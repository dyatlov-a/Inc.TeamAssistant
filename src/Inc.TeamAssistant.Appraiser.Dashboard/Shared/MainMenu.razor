@using Inc.TeamAssistant.Appraiser.Dashboard.Shared.Annotations
@using Inc.TeamAssistant.Appraiser.Dashboard.Shared.ViewModels
@using System.Text.Encodings.Web
@using System.Text.Unicode
@using System.Web

@inject LanguageManager LanguageManager
@inject NavigationManager NavigationManager
@inject IClientInfoService ClientInfoService

<div class="header__body @(_isMenuOpened ? "header_opened" : string.Empty)">
    <a href="@_logoUrl" class="header__link"><img src="/main/logo.png" alt="@_annotation.Logo" class="header__logo"> <span class="header__text">@_annotation.Appraiser</span></a>
    <div class="header__menu">
        <nav class="menu__body">
            <ul class="menu__list">
                @foreach (var item in _menuItems)
                {
                    <li class="menu__item"><a href="@item.Url" @onclick="Close" class="menu__link" target="@item.Target">@item.Title</a></li>
                }

                @foreach (var item in _languageItems)
                {
                    <li class="menu__item menu__item_hidden-on-tablet"><a href="#" @onclick="@(() => ChangeLanguage(item.Url))" @onclick:preventDefault="true" class="menu__link">@item.Title</a></li>
                }
            </ul>
        </nav>
    </div>
    <div class="header__buttons">
        <a href="https://t.me/ocs_teamassistant_appraiser_bot/" target="_blank" class="button button_white button_fixed">@_annotation.MoveToBot</a>

        @foreach (var item in _languageItems)
        {
            <a href="#" @onclick="@(() => ChangeLanguage(item.Url))" @onclick:preventDefault="true" class="header__lang-item header__lang-item_active-@item.Selected.ToString().ToLower()">@item.Title</a>
        }

        <a href="#" class="header__open" @onclick="ChangeMenuState" @onclick:preventDefault="true"><span class="header__burger"></span></a>
        <a href="#" class="header__close" @onclick="ChangeMenuState" @onclick:preventDefault="true"></a>
    </div>
</div>

@code {
    private MainMenuAnnotation _annotation = MainMenuAnnotation.Empty;

    private IReadOnlyCollection<LinkViewModel> _languageItems = Array.Empty<LinkViewModel>();
    private string _logoUrl = string.Empty;
    private IReadOnlyCollection<LinkViewModel> _menuItems = Array.Empty<LinkViewModel>();

    private bool _isMenuOpened = false;
    private void ChangeMenuState() => _isMenuOpened = !_isMenuOpened;
    private void Close() => _isMenuOpened = false;

    private void ChangeLanguage(string lang) => NavigationManager.NavigateTo($"/{lang}/", forceLoad: true);

    protected override async Task OnInitializedAsync()
    {
        var currentLanguageId = await ClientInfoService.GetCurrentLanguageId();
        var resources = await LanguageManager.GetResource();
        var linkBuilder = LanguageManager.CreateLinkBuilder();

        _languageItems = Settings.LanguageIds
            .Select(l => new LinkViewModel(
                l.Value.ToUpper(),
                l.Value.ToLower(),
                selected: currentLanguageId.Equals(l)))
            .ToArray();
        _logoUrl = linkBuilder(string.Empty);
        _annotation = new(
            resources[Messages.GUI_Appraiser],
            resources[Messages.GUI_LinkMoveToBot],
            resources[Messages.GUI_Logo]);
        _menuItems = new[]
        {
            new LinkViewModel(resources[Messages.GUI_Features], linkBuilder("#features"), "_top"),
            new LinkViewModel(resources[Messages.GUI_LinkDevelopment], linkBuilder("#development"), "_top"),
            new LinkViewModel(resources[Messages.GUI_Feedback], linkBuilder("#feedback"), "_top")
        };

        await InvokeAsync(StateHasChanged);
    }
}