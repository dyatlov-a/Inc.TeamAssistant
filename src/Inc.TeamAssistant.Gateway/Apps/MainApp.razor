@inject AnalyticsOptions AnalyticsOptions
@inject IRenderContext RenderContext
@inject IHostEnvironment HostEnvironment
@inject IHttpContextAccessor HttpContextAccessor
@inject PersonResolver PersonResolver

@{
    if (HttpContextAccessor.HttpContext?.User.Identity?.IsAuthenticated == true)
        PersonResolver.TrySet(HttpContextAccessor.HttpContext.User.ToPerson());
    else
        PersonResolver.Reset();
}

<!DOCTYPE html>
<html lang="@_lang">
<head>
    @if (!string.IsNullOrWhiteSpace(AnalyticsOptions.GoogleVerificationValue))
    {
        <!-- Google Tag Manager -->
        <script>
            (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
                new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
            })(window,document,'script','dataLayer','@AnalyticsOptions.GoogleVerificationValue');
        </script>
        <!-- End Google Tag Manager -->
    }
    @if (!string.IsNullOrWhiteSpace(AnalyticsOptions.YandexVerificationValue))
    {
        <!-- yandex webmaster -->
        <meta name="yandex-verification" content="@AnalyticsOptions.YandexVerificationValue)"/>
    }

    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <base href="/"/>

    <link rel="icon" type="image/x-icon" href="@Assets["favicon.ico"]">
    <link rel="apple-touch-icon" sizes="180x180" href="@Assets["apple-touch-icon.png"]">
    <link rel="icon" type="image/png" sizes="32x32" href="@Assets["favicon-32x32.png"]">
    <link rel="icon" type="image/png" sizes="16x16" href="@Assets["favicon-16x16.png"]">
    <link rel="manifest" href="@Assets["site.webmanifest"]">
    
    <link href="@Assets["css/main.css"]" rel="stylesheet"/>
    <link href="@Assets["Inc.TeamAssistant.WebUI.styles.css"]" rel="stylesheet"/>

    <HeadOutlet @rendermode="_renderMode"/>
</head>
<body>
    @if (!string.IsNullOrWhiteSpace(AnalyticsOptions.GoogleVerificationValue))
    {
        <!-- Google Tag Manager (noscript) -->
        <noscript>
            <iframe
                src="https://www.googletagmanager.com/ns.html?id=@AnalyticsOptions.GoogleVerificationValue"
                height="0"
                width="0"
                style="display:none;visibility:hidden">
            </iframe>
        </noscript>
        <!-- End Google Tag Manager (noscript) -->
    }
    
    <Routes @rendermode="_renderMode"/>
    
    <script src="@Assets["_framework/blazor.web.js"]" autostart="false"></script>
    <script>
        window.browserJsFunctions = {
            getTimezone: () => {
                return new Date().getTimezoneOffset();
            },
            changeUrl: url => {
                history.pushState(null, '', url);
            },
            scrollToTop: () => {
                document.documentElement.scrollTop = 0;
            },
            editableText: {
                get: element => {
                    return element.innerText
                },
                set: (element, value) => {
                    element.innerText = value;
                }
            },
            focusElement: element => {
                element.focus();
            },
            addClassToElement: (selector, className) => {
                let element = document.querySelector(selector);
                if (element) {
                    element.classList.add(className);
                }
            },
            addPageScrollObserver: (elementSelector, anchorSelector, modificatorClass) => {
                const anchor = document.querySelector(anchorSelector);
                const element = document.querySelector(elementSelector);
                const placeholder = document.querySelector(elementSelector + '_placeholder')

                const observer = new IntersectionObserver(es => {
                    es.forEach(e => {
                        if (e.isIntersecting)
                        {
                            element.classList.remove(modificatorClass);
                            placeholder.style.height = '0px';
                        }
                        else {
                            element.classList.add(modificatorClass);
                            placeholder.style.height = element.offsetHeight + 'px';
                        }
                    });
                }, { threshold: 0 });

                if (anchor && element && placeholder)
                    observer.observe(anchor);
            },
            addCleanStyleActionToPasteListener: element => {
                element.addEventListener("paste", function(e) {
                    e.preventDefault();
                    
                    const text = e.clipboardData.getData("text/plain");
                    const selection = window.getSelection();
                    if (!selection.rangeCount) return;

                    const range = selection.getRangeAt(0);
                    range.deleteContents();

                    const textNode = document.createTextNode(text);
                    range.insertNode(textNode);
                    
                    range.setStartAfter(textNode);
                    range.setEndAfter(textNode);
                    selection.removeAllRanges();
                    selection.addRange(range);
                });
            }
        };

        Blazor.start({
            webAssembly: {
                environment: "@HostEnvironment.EnvironmentName"
            }
        });
    </script>
</body>
</html>

@code {
    private readonly InteractiveWebAssemblyRenderMode _renderMode = new(prerender: true);
    private string _lang = LanguageSettings.DefaultLanguageId.Value;

    protected override void OnInitialized()
    {
        var languageContext = RenderContext.GetLanguageContext();
        
        _lang = languageContext.CurrentLanguage.Value;
    }
}