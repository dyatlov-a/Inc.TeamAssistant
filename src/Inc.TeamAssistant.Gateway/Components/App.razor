@using Inc.TeamAssistant.Gateway.Configs
@using Inc.TeamAssistant.Primitives.Languages
@using Inc.TeamAssistant.WebUI.Contracts
@using Microsoft.AspNetCore.Components.Web
@using Inc.TeamAssistant.WebUI.Features

@inject IRenderContext RenderContext
@inject AnalyticsOptions AnalyticsOptions

<!DOCTYPE html>
<html lang="@_lang">

<head>
    @if (!string.IsNullOrWhiteSpace(AnalyticsOptions.GoogleVerificationValue))
    {
        <!-- Google tag (gtag.js) -->
        <script async src="https://www.googletagmanager.com/gtag/js?id=@AnalyticsOptions.GoogleVerificationValue"></script>
        <script>
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
    
            gtag('config', '@AnalyticsOptions.GoogleVerificationValue');
        </script>
    }
    @if (!string.IsNullOrWhiteSpace(AnalyticsOptions.YandexVerificationValue))
    {
        <!-- yandex webmaster -->
        <meta name="yandex-verification" content="@AnalyticsOptions.YandexVerificationValue)"/>
    }

    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <base href="/"/>

    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">

    <link href="leaflet/leaflet.css?v=@_appVersion" rel="stylesheet"/>
    <link href="css/main.css?v=@_appVersion" rel="stylesheet"/>
    <link href="Inc.TeamAssistant.WebUI.styles.css?v=@_appVersion" rel="stylesheet"/>

    <HeadOutlet @rendermode="_renderMode"/>
</head>

<body>
    <Routes @rendermode="_renderMode" />

    <script src="leaflet/leaflet.js?v=@_appVersion"></script>
    <script src="_framework/blazor.web.js?v=@_appVersion"></script>
    <script>
        window.browserJsFunctions = {
            getTimezone: () => {
                return new Date().getTimezoneOffset();
            }
        };
    </script>
</body>

</html>

@code {
    private readonly InteractiveWebAssemblyRenderMode _renderMode = new(prerender: true);
    private readonly string _appVersion = ApplicationContext.GetVersion();
    private string _lang = LanguageSettings.DefaultLanguageId.Value;

    protected override void OnInitialized()
    {
        _lang = RenderContext.GetCurrentLanguageId().Language.Value;
    }
}