@using Inc.TeamAssistant.WebUI.Components.Features.Items
@using Inc.TeamAssistant.WebUI.Components.Features.ViewModels

@implements IDisposable

@inject ISwipeService SwipeService
@inject LanguageManager LanguageManager
@inject IClientInfoService ClientInfoService

<div class="features__body">
    <div class="phone phone_move-on-mobile">
        <div class="phone__screen">
            @foreach (var item in _featureList)
            {
                <img
                    src="@item.Image.Path"
                    alt="@item.Image.Alt"
                    class="phone__content phone__content_hidden-by-default @AddClassIfActive(item, "phone__content_active")">
            }
            <div class="phone__mockup"></div>
        </div>
    </div>
    <div class="features__content">
        <div class="features__buttons">
            @foreach (var item in _featureList)
            {
                <button
                    type="button"
                    class="features__button @AddClassIfActive(item, "features__button_active")"
                    @onclick="() => MoveToItem(item)"></button>
            }
        </div>
        @if (_selectedBlock is not null)
        {
            <div>
                <DynamicComponent Type="@_selectedBlock.Value.Description"/>
            </div>
        }
    </div>
</div>

@code {
    private LinkedList<FeatureViewModel> _featureList = new();
    private LinkedListNode<FeatureViewModel>? _selectedBlock;
    private readonly System.Timers.Timer _moveToNextItemTimer = new (3_000);

    protected override async Task OnInitializedAsync()
    {
        var language = await ClientInfoService.GetCurrentLanguageId();
        var resources = await LanguageManager.GetResource();

        _featureList = new(new FeatureViewModel[]
        {
            new(new($"/main/features/getting__start/phone__content_{language.Value}.jpg", resources[Messages.GUI_EasyStart]), typeof(GettingStart)),
            new(new($"/main/features/user__friendly/phone__content_{language.Value}.jpg", resources[Messages.GUI_ResponsiveInterface]), typeof(UserFriendly)),
            new(new($"/main/features/easy/phone__content_{language.Value}.jpg", resources[Messages.GUI_ComfortableInUsing]), typeof(Easy))
        });
        _selectedBlock = _featureList.First;

        _moveToNextItemTimer.Elapsed += (_, _) => MoveToNextItem();
        _moveToNextItemTimer.Start();
    }

    private string AddClassIfActive(FeatureViewModel feature, string className) => _selectedBlock?.Value == feature
        ? className
        : string.Empty;

    internal void SwipeStarting(TouchEventArgs e)
    {
        _moveToNextItemTimer.Dispose();
        SwipeService.SwipeStarting(new(e.TargetTouches[0].ClientX, e.TargetTouches[0].ClientY));
    }

    internal void SwipeEnded(TouchEventArgs e)
    {
        _moveToNextItemTimer.Dispose();
        SwipeService.SwipeEnded(
            new(e.TargetTouches[0].ClientX, e.TargetTouches[0].ClientY),
            () => MoveToNextItem(),
            () => MoveToNextItem(reverse: true));
    }

    private void MoveToNextItem(bool reverse = false)
    {
        if (_selectedBlock is null)
            return;

        if (reverse)
            _selectedBlock = _selectedBlock.Previous ?? _featureList.Last!;
        else
            _selectedBlock = _selectedBlock.Next ?? _featureList.First!;

        InvokeAsync(StateHasChanged);
    }

    private void MoveToItem(FeatureViewModel feature)
    {
        _moveToNextItemTimer.Dispose();
        _selectedBlock = _featureList.Find(feature)!;
    }

    public void Dispose() => _moveToNextItemTimer.Dispose();
}