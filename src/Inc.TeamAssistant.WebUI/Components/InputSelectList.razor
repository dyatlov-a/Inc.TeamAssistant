@typeparam TValue
@typeparam TItem

@inherits InputBase<TValue>

<div>
    @if (IsDisabled)
    {
        <InputSelect
            id="@FieldId"
            Value="_value"
            ValueExpression="@(() => _value)"
            class="form-control form-control_select-list form-control_disabled"
            disabled="disabled">
            @if (HasEmptyValue)
            {
                <option value=""></option>
            }
            @foreach (var item in Items)
            {
                <option value="@ValueSelector(item)">@TitleSelector(item)</option>
            }
        </InputSelect>
    }
    else
    {
        <InputSelect
            id="@FieldId"
            Value="_value"
            ValueExpression="@(() => _value)"
            ValueChanged="@((TValue? v) => SetCurrentValue(v))"
            class="@($"form-control form-control_select-list form-control_enabled {CssClass} {ParentCssClass}")">
            @if (HasEmptyValue)
            {
                <option value=""></option>
            }
            @foreach (var item in Items)
            {
                <option value="@ValueSelector(item)">@TitleSelector(item)</option>
            }
        </InputSelect>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public string FieldId { get; set; } = default!;

    [Parameter, EditorRequired]
    public IEnumerable<TItem> Items { get; set; } = default!;

    [Parameter, EditorRequired]
    public Func<TItem, string> TitleSelector { get; set; } = default!;

    [Parameter, EditorRequired]
    public Func<TItem, TValue> ValueSelector { get; set; } = default!;
    
    [Parameter]
    public string ParentCssClass { get; set; } = string.Empty;

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public bool HasEmptyValue { get; set; }

    private TValue? _value = default!;

    protected override void OnParametersSet()
    {
        _value = CurrentValue;
    }

    private void SetCurrentValue(TValue? value) => CurrentValue = value;

    protected override bool TryParseValueFromString(
        string? value,
        out TValue result,
        out string validationErrorMessage)
    {
        throw new NotImplementedException();
    }
}