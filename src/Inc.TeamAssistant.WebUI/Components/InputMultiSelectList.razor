@typeparam TValue
@typeparam TItem

@inherits InputBase<IEnumerable<TValue>>

<div class="input-multiselect @CssClass @DisabledCssClass">
    @foreach (var item in Items)
    {
        var value = ValueSelector(item);

        <span
            class="input-multiselect__item @SelectedCssClass(value)"
            @onclick="() => ChangeValue(value)">
            @TitleSelector(item)
        </span>
    }
    
    <input type="text" value="@ValuesAsString" id="@FieldId" style="display: none;" />
</div>

@code {
    /// <summary>
    /// Field for the input element.
    /// </summary>
    [Parameter, EditorRequired]
    public string FieldId { get; set; } = default!;
    
    /// <summary>
    /// Select list items.
    /// </summary>
    [Parameter, EditorRequired]
    public IEnumerable<TItem> Items { get; set; } = default!;
    
    /// <summary>
    /// Title selector for the select list items.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<TItem, string> TitleSelector { get; set; } = default!;
    
    /// <summary>
    /// Value selector for the select list items.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<TItem, TValue> ValueSelector { get; set; } = default!;
    
    /// <summary>
    /// Is disabled state of the input.
    /// </summary>
    [Parameter]
    public bool IsDisabled { get; set; }

    private readonly List<TValue> _values = new();

    protected override void OnParametersSet()
    {
        _values.Clear();
        if (CurrentValue is not null)
            _values.AddRange(CurrentValue);
    }
    
    private string DisabledCssClass => IsDisabled ? "input-multiselect_disabled" : "input-multiselect_enabled";
    private string ValuesAsString => string.Join(',', _values);
    
    private string SelectedCssClass(TValue value) => _values.Contains(value)
        ? "input-multiselect__item_selected"
        : string.Empty;

    private void ChangeValue(TValue value)
    {
        if (IsDisabled)
            return;
        
        if (_values.Contains(value))
            _values.Remove(value);
        else
            _values.Add(value);

        CurrentValue = _values;
    }

    protected override bool TryParseValueFromString(
        string? value,
        out IEnumerable<TValue> result,
        out string validationErrorMessage)
    {
        throw new NotImplementedException();
    }
}