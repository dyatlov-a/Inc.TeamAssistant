@if (ButtonType == ButtonType.Tab)
{
    <a href="@Link" target="_blank" class="button @CssClass @ModeCssClass">
        @if (Content is not null)
        {
            @Content
        }
    </a>
}
else if (IsDisabled)
{
    <button type="@ButtonTypeAsString" class="button @CssClass @ModeCssClass" disabled="disabled">
        @if (Content is not null)
        {
            @Content
        }
    </button>
}
else
{
    <button type="@ButtonTypeAsString" @onclick="EmitOnClick" class="button @CssClass @ModeCssClass">
        @if (Content is not null)
        {
            @Content
        }
    </button>
}

@code {
    /// <summary>
    /// Html or text content of the button.
    /// </summary>
    [Parameter]
    public RenderFragment? Content { get; set; }
    
    /// <summary>
    /// On click event.
    /// </summary>
    [Parameter]
    public EventCallback OnClick { get; set; }
    
    /// <summary>
    /// Button mode: Default or Small.
    /// </summary>
    [Parameter]
    public ButtonMode ButtonMode { get; set; } = ButtonMode.Default;
    
    /// <summary>
    /// Flag for set dark or light theme.
    /// </summary>
    [Parameter]
    public bool IsDark { get; set; }
    
    /// <summary>
    /// Flag for set disabled state.
    /// </summary>
    [Parameter]
    public bool IsDisabled { get; set; }
    
    /// <summary>
    /// Button type: Submit or Button.
    /// </summary>
    [Parameter]
    public ButtonType ButtonType { get; set; }
    
    /// <summary>
    /// Link for button (supported for ButtonType=Tab).
    /// </summary>
    [Parameter]
    public string? Link { get; set; }

    private string ModeCssClass => ButtonMode switch
    {
        ButtonMode.Small => "button_small",
        _ => string.Empty
    };

    private string CssClass => IsDark ? "button_dark" : "button_light";

    private string ButtonTypeAsString => ButtonType == ButtonType.Submit ? "submit" : "button";
    
    private async Task EmitOnClick()
    {
        if (!OnClick.Equals(default(EventCallback)))
            await OnClick.InvokeAsync();
    }
}