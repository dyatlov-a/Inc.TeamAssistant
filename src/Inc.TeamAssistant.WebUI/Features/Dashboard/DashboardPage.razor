@page "/dashboard"
@page "/ru/dashboard"
@page "/en/dashboard"
@page "/dashboard/{BotId:guid}"
@page "/ru/dashboard/{BotId:guid}"
@page "/en/dashboard/{BotId:guid}"
@page "/dashboard/{BotId:guid}/{TeamId:guid}"
@page "/ru/dashboard/{BotId:guid}/{TeamId:guid}"
@page "/en/dashboard/{BotId:guid}/{TeamId:guid}"

@attribute [Authorize]

@using Inc.TeamAssistant.Connector.Model.Queries.GetBotsByCurrentUser;

@inject IBotService BotService
@inject ResourcesManager Resources
@inject RequestProcessor RequestProcessor
@inject IJSRuntime JsRuntime

<MetaDataModule
    WebsiteSection="WebsiteSection.Dashboard"
    MetaOverrideTitle="@Resources[Messages.Dashboard_Title]" />

<div class="dashboard">
    <div class="dashboard-toolbar">
        <div class="dashboard-toolbar__content">
            <DashboardTeamSelector
                BotId="_botId"
                TeamId="_teamId"
                State="_state"
                Bots="_bots"
                Retry="Load"
                TeamContextChanged="ChangeTeamContext"/>
            
            @if (_teamId.HasValue)
            {
                <DashboardTeamConnector TeamId="_teamId.Value"/>
            }
        </div>
    </div>
    <div class="dashboard-content">
        <div class="dashboard-widgets">
            @if (_teamId.HasValue)
            {
                <DashboardWidget Title="@Resources[Messages.Dashboard_TeammatesWidgetTitle]">
                    <Content>
                        <TeammatesWidget TeamId="_teamId.Value"/>
                    </Content>
                </DashboardWidget>

                if (HasFeature("Reviewer"))
                {
                    <DashboardWidget
                        HasControls="true"
                        HasChart="true"
                        Title="@Resources[Messages.Dashboard_ReviewTotalStatsWidgetTitle]">
                        <Content>
                            <ReviewTotalStatsWidget TeamId="_teamId.Value"/>
                        </Content>
                    </DashboardWidget>
                    <DashboardWidget
                        HasControls="true"
                        Title="@Resources[Messages.Dashboard_LastTasksWidgetTitle]">
                        <Content>
                            <ReviewHistoryWidget TeamId="_teamId.Value"/>
                        </Content>
                    </DashboardWidget>
                    <DashboardWidget
                        HasControls="true"
                        HasChart="true"
                        Title="@Resources[Messages.Dashboard_ReviewAverageStatsWidgetTitle]">
                        <Content>
                            <ReviewAverageStatsWidget TeamId="_teamId.Value"/>
                        </Content>
                    </DashboardWidget>
                }

                if (HasFeature("Appraiser"))
                {
                    <DashboardWidget HasControls="true" Title="@Resources[Messages.Dashboard_AppraiserHistoryTitle]">
                        <Content>
                            <AppraiserHistoryWidget TeamId="_teamId.Value"/>
                        </Content>
                    </DashboardWidget>
                    <DashboardWidget Title="@Resources[Messages.Dashboard_AppraiserIntegrationTitle]">
                        <Content>
                            <AppraiserIntegrationWidget TeamId="_teamId.Value"/>
                        </Content>
                    </DashboardWidget>
                }
            }

            @if (_botId.HasValue)
            {
                if (HasFeature("RandomCoffee"))
                {
                    <DashboardWidget Title="@Resources[Messages.Dashboard_RandomCoffeeHistoryWidgetTitle]">
                        <Content>
                            <RandomCoffeeHistoryWidget BotId="_botId.Value" />
                        </Content>
                    </DashboardWidget>
                }
                
                if (HasFeature("CheckIn"))
                {
                    <DashboardWidget Title="@Resources[Messages.Dashboard_CheckInMapWidgetTitle]">
                        <Content>
                            <MapWidget BotId="_botId.Value" />
                        </Content>
                    </DashboardWidget>
                }
            }
            else
            {
                <BotNotSelected />
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid? BotId { get; set; }
    
    [Parameter]
    public Guid? TeamId { get; set; }

    private Guid? _botId;
    private Guid? _teamId;
    
    private LoadingState _state = LoadingState.Done();
    private IReadOnlyCollection<BotDto> _bots = Array.Empty<BotDto>();

    protected override async Task OnParametersSetAsync()
    {
        _botId = BotId;
        _teamId = TeamId;
        
        await Load();
    }
    
    private async Task Load()
    {
        await RequestProcessor.Process(
            () => BotService.GetFromCurrentUser(),
            nameof(DashboardPage),
            r => _bots = r.Bots,
            s =>
            {
                _state = s;
                StateHasChanged();
            });
    }

    private bool HasFeature(string feature)
    {
        var bot = _bots.SingleOrDefault(b => b.Id == _botId);

        return bot?.Features.Contains(feature, StringComparer.InvariantCultureIgnoreCase) == true;
    }
    
    private async Task ChangeTeamContext((Guid? BotId, Guid? TeamId) botContext)
    {
        var url = (botContext.BotId.HasValue, botContext.TeamId.HasValue) switch
        {
            (true, true) => $"dashboard/{botContext.BotId:N}/{botContext.TeamId:N}",
            (true, false) => $"dashboard/{botContext.BotId:N}",
            _ => "dashboard"
        };
        
        _botId = botContext.BotId;
        _teamId = botContext.TeamId;

        await JsRuntime.Execute(JsFunctions.ChangeUrl(url));
    }
}