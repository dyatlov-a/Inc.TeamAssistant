@page "/dashboard"
@page "/ru/dashboard"
@page "/en/dashboard"
@page "/dashboard/{BotId:guid}"
@page "/ru/dashboard/{BotId:guid}"
@page "/en/dashboard/{BotId:guid}"
@page "/dashboard/{BotId:guid}/{TeamId:guid}"
@page "/ru/dashboard/{BotId:guid}/{TeamId:guid}"
@page "/en/dashboard/{BotId:guid}/{TeamId:guid}"

@attribute [Authorize]

@using Inc.TeamAssistant.Connector.Model.Queries.GetBots;

@inject IBotService BotService
@inject ResourcesManager Resources
@inject RequestProcessor RequestProcessor

<MetaDataModule WebsiteSection="WebsiteSection.Dashboard" MetaOverrideTitle="@Resources[Messages.Dashboard_Title]" />

<div class="dashboard">
    <div class="dashboard-toolbar">
        <div class="dashboard-toolbar__content">
            <Loading State="_state">
                <Content>
                    <DashboardTeamSelector BotId="BotId" TeamId="TeamId" Bots="_bots"/>

                    @if (TeamId.HasValue)
                    {
                        <DashboardTeamConnector TeamId="TeamId.Value"/>
                    }
                </Content>
            </Loading>
        </div>
    </div>
    <div class="dashboard-content">
        <div class="dashboard-widgets">
            @if (TeamId.HasValue)
            {
                <TeamModule TeamId="TeamId.Value" />

                if (HasFeature("Reviewer"))
                {
                    <ReviewerModule TeamId="TeamId.Value"/>
                }
                
                if (HasFeature("Appraiser"))
                {
                    <AppraiserModule TeamId="TeamId.Value"/>
                }
            }

            @if (BotId.HasValue)
            {
                if (HasFeature("RandomCoffee"))
                {
                    <RandomCoffeeModule BotId="BotId.Value"/>
                }
                
                if (HasFeature("CheckIn"))
                {
                    <CheckInModule BotId="BotId.Value" />
                }
            }
            else
            {
                <DashboardWidget Title="@Resources[Messages.Dashboard_BotWidgetTitle]">
                    <Content>
                        <BotNotSelected />
                    </Content>
                </DashboardWidget>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid? BotId { get; set; }
    
    [Parameter]
    public Guid? TeamId { get; set; }
    
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;
    
    private RequestState _state = RequestState.Done();
    private IReadOnlyCollection<BotDto> _bots = Array.Empty<BotDto>();

    protected override Task OnParametersSetAsync() => Load();
    
    private async Task Load()
    {
        var authenticationState = await AuthenticationStateTask;
        var currentPerson = authenticationState.User.ToPerson();
        
        _state = await RequestProcessor.Process(
            () => BotService.GetByUser(currentPerson.Id),
            nameof(DashboardPage),
            r =>
            {
                _bots = r.Bots;
                _state = RequestState.Done();
                StateHasChanged();
            });
    }

    private bool HasFeature(string feature)
    {
        var bot = _bots.SingleOrDefault(b => b.Id == BotId);

        return bot?.Features.Contains(feature, StringComparer.InvariantCultureIgnoreCase) == true;
    }
}