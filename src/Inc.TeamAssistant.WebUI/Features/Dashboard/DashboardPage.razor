@page "/dashboard"
@page "/ru/dashboard"
@page "/en/dashboard"
@page "/dashboard/{BotId:guid}"
@page "/ru/dashboard/{BotId:guid}"
@page "/en/dashboard/{BotId:guid}"
@page "/dashboard/{BotId:guid}/{TeamId:guid}"
@page "/ru/dashboard/{BotId:guid}/{TeamId:guid}"
@page "/en/dashboard/{BotId:guid}/{TeamId:guid}"

@attribute [Authorize]

@using Inc.TeamAssistant.Connector.Model.Queries.GetWidgets

@inject IBotService BotService
@inject ResourcesManager Resources
@inject RequestProcessor RequestProcessor
@inject NavRouter NavRouter

<MetaDataModule
    WebsiteSection="WebsiteSection.Dashboard"
    MetaOverrideTitle="@Resources[Messages.Dashboard_Title]" />

<div class="dashboard__fluent-container">
    <DashboardSettings BotId="BotId" Widgets="_widgets" Changed="Load" />
    
    <div class="dashboard">
        <div class="dashboard-toolbar">
            <div class="dashboard-toolbar__content">
                <DashboardTeamSelector BotId="_botId" TeamId="_teamId" TeamContextChanged="ChangeTeamContext"/>

                @if (_teamId.HasValue)
                {
                    <DashboardTeamConnector TeamId="_teamId.Value"/>
                }
            </div>
        </div>
        <div class="dashboard-content">
            <Loading State="_state" Retry="Load">
                <Content>
                    <div class="dashboard-widgets">
                        @if (_botId.HasValue)
                        {
                            foreach (var widget in _widgets.Where(w => w.IsVisible).OrderBy(w => w.Position))
                            {
                                <DynamicComponent Type="ToWidgetType(widget.Type)" Parameters="WidgetParameters"/>
                            }
                        }
                        else
                        {
                            <BotNotSelected/>
                        }
                    </div>
                </Content>
            </Loading>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid? BotId { get; set; }
    
    [Parameter]
    public Guid? TeamId { get; set; }

    private Guid? _botId;
    private Guid? _teamId;
    
    private LoadingState _state = LoadingState.Done();
    private IReadOnlyCollection<WidgetDto> _widgets = Array.Empty<WidgetDto>();
    
    private Dictionary<string, object?> WidgetParameters => new()
    {
        ["BotId"] = _botId!.Value,
        ["TeamId"] = _teamId
    };
    
    private readonly Dictionary<string, Type> _widgetsLookup = new()
    {
        [nameof(TeammatesWidget)] = typeof(TeammatesWidget),
        [nameof(ReviewAverageStatsWidget)] = typeof(ReviewAverageStatsWidget),
        [nameof(ReviewHistoryWidget)] = typeof(ReviewHistoryWidget),
        [nameof(ReviewTotalStatsWidget)] = typeof(ReviewTotalStatsWidget),
        [nameof(AppraiserHistoryWidget)] = typeof(AppraiserHistoryWidget),
        [nameof(AppraiserIntegrationWidget)] = typeof(AppraiserIntegrationWidget),
        [nameof(RandomCoffeeHistoryWidget)] = typeof(RandomCoffeeHistoryWidget),
        [nameof(MapWidget)] = typeof(MapWidget)
    };

    protected override async Task OnParametersSetAsync()
    {
        _botId = BotId;
        _teamId = TeamId;
        
        await Load();
    }
    
    private async Task Load()
    {
        if (_botId.HasValue)
            await RequestProcessor.Process(
                () => BotService.GetWidgetsForCurrentUser(_botId.Value),
                nameof(DashboardPage),
                r => _widgets = r.Widgets,
                s =>
                {
                    _state = s;
                    StateHasChanged();
                });
        else
            _widgets = Array.Empty<WidgetDto>();
        
        StateHasChanged();
    }

    private Type ToWidgetType(string type) => _widgetsLookup[type];
    
    private void ChangeTeamContext((Guid? BotId, Guid? TeamId) botContext)
    {
        var routeSegment = (botContext.BotId.HasValue, botContext.TeamId.HasValue) switch
        {
            (true, true) => $"dashboard/{botContext.BotId:N}/{botContext.TeamId:N}",
            (true, false) => $"dashboard/{botContext.BotId:N}",
            _ => "dashboard"
        };

        _botId = botContext.BotId;
        _teamId = botContext.TeamId;
        
        NavRouter.NavigateToRouteSegment(routeSegment);
    }
}