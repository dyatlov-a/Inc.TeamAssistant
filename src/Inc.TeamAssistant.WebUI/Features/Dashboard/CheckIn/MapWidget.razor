@inject ICheckInService CheckInService
@inject ResourcesManager Resources
@inject LinkBuilder LinkBuilder
@inject RequestProcessor RequestProcessor

<Loading State="_state">
    <Content>
        <div class="map-selector">
            <InputSelect id="map-selector" @bind-Value="_formModel.MapId" class="form-control">
                @foreach (var map in _formModel.Maps)
                {
                    <option value="@map.Id">@map.Name</option>
                }
            </InputSelect>
        </div>
        @if (_formModel.MapId.HasValue)
        {
            var mapUrl = LinkBuilder.Build($"map/{_formModel.MapId.Value:N}");

            <div class="checkin-map">
                <iframe src="@mapUrl/true" class="checkin-map__body"></iframe>
                <div class="checkin-map__bg"></div>
                <div class="checkin-map__controls">
                    <div class="checkin-map__controls-body">
                        <a href="@mapUrl" target="_blank" class="button button_dark">
                            @Resources[Messages.Dashboard_CheckInMoveToMapTitle]
                        </a>
                    </div>
                </div>
            </div>
        }
        else
        {
            <NoData/>
        }
    </Content>
</Loading>

@code {
    [Parameter, EditorRequired]
    public Guid BotId { get; set; }
    
    private RequestState _state = RequestState.Done();
    private MapWidgetFormModel _formModel = new();

    protected override Task OnParametersSetAsync() => Load();
    
    private async Task Load()
    {
        _state = await RequestProcessor.Process(
            async () =>
            {
                var getMaps = await CheckInService.GetMaps(BotId);
                return new MapWidgetFormModel
                {
                    Maps = getMaps.Items,
                    MapId = getMaps.Items.FirstOrDefault()?.Id
                };
            },
            nameof(MapWidget),
            r =>
            {
                _formModel = r;
                _state = RequestState.Done();
                StateHasChanged();
            });
    }
}