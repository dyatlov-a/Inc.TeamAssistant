@inject IBotService BotService
@inject RequestProcessor RequestProcessor
@inject ResourcesManager Resources

<ContentDialog Title="@Resources[Messages.Dashboard_Settings]" @ref="_contentDialog">
    <Content>
        <div class="widget-settings">
            <EditForm EditContext="_editContext" OnSubmit="SubmitForm">
                <FluentValidationValidator @ref="_fluentValidationValidator"/>
                <Loading State="_state" Retry="Load">
                    <Content>
                        <div class="widget-settings__body">
                            <ValidationSummary/>
                            @{
                                var widgets = _formModel.Items.OrderBy(w => w.Position).ToArray();

                                for (var i = 0; i < widgets.Length; i++)
                                {
                                    var current = widgets[i];
                                    var next = i < widgets.Length - 1 ? widgets[i + 1] : null;
                                    var prev = i > 0 ? widgets[i - 1] : null;
                                    var isEnabledId = "is-enabled-" + current.Type;

                                    <div class="widget-settings__item">
                                        @if (next is not null)
                                        {
                                            <button
                                                type="button"
                                                class="button button_dark button_small widget-settings__button"
                                                @onclick="() => Swap(current, next)">
                                                <ArrowDownIcon Size="20px" IsDark="true"/>
                                            </button>
                                        }
                                        else
                                        {
                                            <button
                                                type="button"
                                                class="button button_dark button_small widget-settings__button"
                                                disabled="disabled">
                                                <ArrowDownIcon Size="20px" IsDark="true"/>
                                            </button>
                                        }
                                        @if (prev is not null)
                                        {
                                            <button
                                                type="button"
                                                class="button button_dark button_small widget-settings__button"
                                                @onclick="() => Swap(current, prev)">
                                                <ArrowUpIcon Size="20px" IsDark="true"/>
                                            </button>
                                        }
                                        else
                                        {
                                            <button
                                                type="button"
                                                class="button button_dark button_small widget-settings__button"
                                                disabled="disabled">
                                                <ArrowUpIcon Size="20px" IsDark="true"/>
                                            </button>
                                        }
                                        @if (current.CanEnabled)
                                        {
                                            <InputCheckbox
                                                id="@isEnabledId"
                                                @bind-Value="current.IsEnabled"
                                                class="widget-settings__checkbox"/>
                                            <label for="@isEnabledId" class="widget-settings__label">
                                                @ToWidgetTitle(current.Type)
                                            </label>
                                        }
                                        else
                                        {
                                            <InputCheckbox
                                                id="@isEnabledId"
                                                @bind-Value="current.IsEnabled"
                                                disabled="disabled"/>
                                            <label for="@isEnabledId">@current.Type</label>
                                        }
                                    </div>
                                }
                            }
                        </div>
                        <div class="widget-settings__actions">
                            <button type="submit" class="button button_dark">@Resources[Messages.PanelSave]</button>
                        </div>
                    </Content>
                </Loading>
            </EditForm>
        </div>
    </Content>
</ContentDialog>

<div class="dashboard-settings">
    <button type="button" class="button button_dark button_small" @onclick="Open">
        <SettingsIcon Size="20px" IsDark="true" />
    </button>
</div>

@code {
    [Parameter, EditorRequired]
    public Guid? BotId { get; set; }
    
    [Parameter, EditorRequired]
    public EventCallback Changed { get; set; }

    private ContentDialog? _contentDialog;
    
    private LoadingState _state = LoadingState.Done();
    private readonly DashboardSettingsFormModel _formModel = new();
    private FluentValidationValidator? _fluentValidationValidator;
    private EditContext? _editContext;
    
    private Dictionary<string, string> WidgetsLookup => new()
    {
        [nameof(TeammatesWidget)] = Resources[Messages.Dashboard_TeammatesWidgetTitle],
        [nameof(ReviewAverageStatsWidget)] = Resources[Messages.Dashboard_ReviewAverageStatsWidgetTitle],
        [nameof(ReviewHistoryWidget)] = Resources[Messages.Dashboard_LastTasksWidgetTitle],
        [nameof(ReviewTotalStatsWidget)] = Resources[Messages.Dashboard_ReviewTotalStatsWidgetTitle],
        [nameof(AppraiserHistoryWidget)] = Resources[Messages.Dashboard_AppraiserHistoryTitle],
        [nameof(AppraiserIntegrationWidget)] = Resources[Messages.Dashboard_AppraiserIntegrationTitle],
        [nameof(RandomCoffeeHistoryWidget)] = Resources[Messages.Dashboard_RandomCoffeeHistoryWidgetTitle],
        [nameof(MapWidget)] = Resources[Messages.Dashboard_CheckInMapWidgetTitle]
    };
    
    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(_formModel);
    }

    private async Task Load()
    {
        if (!BotId.HasValue)
            return;
        
        await RequestProcessor.Process(
            () => BotService.GetWidgetsForCurrentUser(BotId.Value),
            nameof(DashboardSettings),
            r => _formModel.Apply(r),
            s =>
            {
                _state = s;
                StateHasChanged();
            });
    }
    
    private string ToWidgetTitle(string type) => WidgetsLookup.GetValueOrDefault(type, type);

    private async Task Open()
    {
        _contentDialog?.Open();

        await Load();
    }

    private void Swap(DashboardSettingsItem first, DashboardSettingsItem second)
    {
        _formModel.Swap(first, second);
        StateHasChanged();
    }
    
    private async Task SubmitForm()
    {
        if (!BotId.HasValue || _fluentValidationValidator is null || !await _fluentValidationValidator.ValidateAsync())
            return;

        await BotService.UpdateWidgets(_formModel.ToCommand(BotId.Value));
        
        _contentDialog?.Close();

        await Changed.InvokeAsync();
    }
}