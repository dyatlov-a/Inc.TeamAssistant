@inject IStringLocalizer<DashboardResources> Localizer
@inject DragAndDropService<DashboardSettingsItem> DragAndDropService
@inject FeaturesFactory FeaturesFactory

<ContentDialog Title="@Localizer["Settings"]" @ref="_contentDialog">
    <div class="widget-settings @CssClass">
        <EditForm EditContext="_editContext" OnSubmit="SubmitForm">
            <FluentValidationValidator @ref="_fluentValidationValidator" DisableAssemblyScanning="true" />
            <Loading State="State" Retry="SubmitForm">
                <div class="widget-settings__body">
                    <ValidationSummary/>
                    @{
                        var widgets = _formModel.Items.OrderBy(w => w.Position).ToArray();

                        for (var i = 0; i < widgets.Length; i++)
                        {
                            var current = widgets[i];
                            var next = i < widgets.Length - 1 ? widgets[i + 1] : null;
                            var prev = i > 0 ? widgets[i - 1] : null;
                            var isVisibleId = "is-visible-" + current.Type;

                            <div
                                class="widget-settings__item"
                                title="@FeatureHelp(current)"
                                draggable="true"
                                ondragover="event.preventDefault();"
                                @ondrop="() => HandleDrop(widgets, current)"
                                @ondragenter="HandleDragEnter"
                                @ondragstart="@(() => HandleDragStart(current))">
                                <div class="widget-settings__drag">
                                    <DragVerticalIcon Size="30px" ComponentStyle="ComponentStyle.Secondary"/>
                                </div>
                                @if (next is not null)
                                {
                                    <Button
                                        ComponentStyle="ComponentStyle.Secondary"
                                        ButtonMode="ButtonMode.Small"
                                        OnClick="() => MoveDown(widgets, current, next)">
                                        <ArrowDownIcon Size="20px" ComponentStyle="ComponentStyle.Secondary"/>
                                    </Button>
                                }
                                else
                                {
                                    <Button
                                        ComponentStyle="ComponentStyle.Secondary"
                                        IsDisabled="true"
                                        ButtonMode="ButtonMode.Small">
                                        <ArrowDownIcon Size="20px" ComponentStyle="ComponentStyle.Secondary"/>
                                    </Button>
                                }
                                @if (prev is not null)
                                {
                                    <Button
                                        ComponentStyle="ComponentStyle.Secondary"
                                        ButtonMode="ButtonMode.Small"
                                        OnClick="() => MoveUp(widgets, current, prev)">
                                        <ArrowUpIcon Size="20px" ComponentStyle="ComponentStyle.Secondary"/>
                                    </Button>
                                }
                                else
                                {
                                    <Button
                                        ComponentStyle="ComponentStyle.Secondary"
                                        IsDisabled="true"
                                        ButtonMode="ButtonMode.Small">
                                        <ArrowUpIcon Size="20px" ComponentStyle="ComponentStyle.Secondary"/>
                                    </Button>
                                }
                                @if (current.CanEnabled)
                                {
                                    <InputCheckbox id="@isVisibleId" @bind-Value="current.IsVisible"/>
                                    <label for="@isVisibleId">
                                        @ToWidgetTitle(current.Type)
                                    </label>
                                }
                                else
                                {
                                    <InputCheckbox
                                        id="@isVisibleId"
                                        @bind-Value="current.IsVisible"
                                        disabled="disabled"/>
                                    <label for="@isVisibleId">
                                        @ToWidgetTitle(current.Type)
                                    </label>
                                }
                            </div>
                        }
                    }
                </div>
                <div class="widget-settings__actions">
                    <Button ButtonType="ButtonType.Submit" ComponentStyle="ComponentStyle.Secondary">
                        @Localizer["Apply"]
                    </Button>
                </div>
            </Loading>
        </EditForm>
    </div>
</ContentDialog>
<div class="dashboard-settings">
    <Button
        ComponentStyle="ComponentStyle.Secondary"
        ButtonMode="ButtonMode.Small"
        OnClick="() => _contentDialog?.Open()">
        <SettingsIcon Size="20px" ComponentStyle="ComponentStyle.Secondary"/>
    </Button>
</div>

@code {
    /// <summary>
    /// Bot identifier.
    /// </summary>
    [Parameter, EditorRequired]
    public Guid? BotId { get; set; }
    
    /// <summary>
    /// Widgets.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyCollection<WidgetDto> Widgets { get; set; } = default!;
    
    /// <summary>
    /// Component state.
    /// </summary>
    [Parameter, EditorRequired]
    public LoadingState State { get; set; } = default!;
    
    /// <summary>
    /// OnValidSubmit event.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<UpdateWidgetsCommand> OnValidSubmit { get; set; }
    
    /// <summary>
    /// Close action.
    /// </summary>
    public void Close() => _contentDialog?.Close();

    private ContentDialog? _contentDialog;
    private bool _isDragStarting;
    private readonly DashboardSettingsFormModel _formModel = new();
    private FluentValidationValidator? _fluentValidationValidator;
    private EditContext? _editContext;
    
    private Dictionary<string, string> WidgetsLookup => new()
    {
        [nameof(TeammatesWidget)] = Localizer["TeammatesWidgetTitle"],
        [nameof(ReviewAverageStatsWidget)] = Localizer["ReviewAverageStatsWidgetTitle"],
        [nameof(ReviewHistoryWidget)] = Localizer["LastTasksWidgetTitle"],
        [nameof(ReviewTotalStatsWidget)] = Localizer["ReviewTotalStatsWidgetTitle"],
        [nameof(AppraiserHistoryWidget)] = Localizer["AppraiserHistoryTitle"],
        [nameof(AppraiserIntegrationWidget)] = Localizer["AppraiserIntegrationTitle"],
        [nameof(RandomCoffeeHistoryWidget)] = Localizer["RandomCoffeeHistoryWidgetTitle"],
        [nameof(MapWidget)] = Localizer["CheckInMapWidgetTitle"]
    };
    
    private string CssClass => _isDragStarting ? "widget-settings_on-drag" : "widget-settings_no-drag";
    
    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(_formModel.Apply(Widgets));
    }
    
    private string ToWidgetTitle(string type) => WidgetsLookup.GetValueOrDefault(type, type);

    private string FeatureHelp(DashboardSettingsItem item)
    {
        if (item.CanEnabled)
            return string.Empty;
        
        var featureName = FeaturesFactory.CreateName(item.Feature);

        return string.Format(Localizer["DisableWidgetHelpTemplate"], featureName);
    }
    
    private void HandleDrop(DashboardSettingsItem[] items, DashboardSettingsItem target)
    {
        var source = DragAndDropService.End();
        
        Swap(items, source, target);
        
        _isDragStarting = false;
    }
    
    private void HandleDragStart(DashboardSettingsItem source) => DragAndDropService.Start(source);
    
    private void HandleDragEnter() => _isDragStarting = true;
    
    private void Swap(DashboardSettingsItem[] items, DashboardSettingsItem first, DashboardSettingsItem second)
    {
        if (first.Position < second.Position)
            MoveDown(items, first, second);
        else
            MoveUp(items, first, second);
    }

    private void MoveDown(DashboardSettingsItem[] items, DashboardSettingsItem first, DashboardSettingsItem second)
    {
        var targets = items
            .Where(i => i.Position > first.Position && i.Position <= second.Position)
            .OrderBy(i => i.Position);
        
        foreach (var target in targets)
            _formModel.Swap(first, target);
    }

    private void MoveUp(DashboardSettingsItem[] items, DashboardSettingsItem first, DashboardSettingsItem second)
    {
        var targets = items
            .Where(i => i.Position <= first.Position && i.Position > second.Position)
            .OrderByDescending(i => i.Position);
        
        foreach (var target in targets)
            _formModel.Swap(second, target);
    }
    
    private async Task SubmitForm()
    {
        if (!BotId.HasValue || _fluentValidationValidator is null || !await _fluentValidationValidator.ValidateAsync())
            return;

        await OnValidSubmit.InvokeAsync(_formModel.ToCommand(BotId!.Value));
    }
}