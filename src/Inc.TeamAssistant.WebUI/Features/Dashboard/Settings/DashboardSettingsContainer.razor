@inject IBotService BotService
@inject RequestProcessor RequestProcessor
@inject IStringLocalizer<DashboardResources> Localizer
@inject IServiceProvider ServiceProvider

<DashboardSettings
    BotId="BotId"
    Widgets="Widgets"
    State="_state"
    OnValidSubmit="SubmitForm"
    @ref="_settings" />

@code {
    [Parameter, EditorRequired]
    public Guid? BotId { get; set; }
    
    [Parameter, EditorRequired]
    public EventCallback Changed { get; set; }
    
    [Parameter, EditorRequired]
    public IReadOnlyCollection<WidgetDto> Widgets { get; set; } = default!;
    
    private DashboardSettings? _settings;
    private readonly LoadingState _state = LoadingState.Done();
    
    private async Task SubmitForm(UpdateWidgetsCommand command)
    {
        var notificationsService = ServiceProvider.GetRequiredService<INotificationsService>();
        var notification = Notification.Info(Localizer["SettingsApplied"]);

        await RequestProcessor.Process(
            () => BotService.UpdateWidgets(command),
            _state);
        
        _settings?.Close();
        notificationsService.Publish(notification);
        
        await Changed.InvokeAsync();
    }
}