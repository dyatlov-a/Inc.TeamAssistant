@inject IBotService BotService
@inject ResourcesManager Resources
@inject RequestProcessor RequestProcessor

<ConfirmDialog OnConfirm="RemoveTeammate" @ref="_confirmDialog">
    <Content>
        @if (_exclude || _leaveUntil.HasValue)
        {
            <p>@Resources[Messages.Dashboard_LeaveTeammate] @_selectedTeammate?.Name</p>
            @if (_leaveUntil.HasValue)
            {
                <p>@_leaveUntil.Value @Resources[Messages.Dashboard_Days]</p>
            }
            else
            {
                <p>@Resources[Messages.Dashboard_Forever]</p>
            }
        }
        else
        {
            <p>@Resources[Messages.Dashboard_RecoveryTeammate] @_selectedTeammate?.Name</p>
        }
    </Content>
</ConfirmDialog>

@if (TeamId.HasValue)
{
    <DashboardWidget Title="@Resources[Messages.Dashboard_TeammatesWidgetTitle]">
        <Content>
            <Loading State="_state" Retry="() => Load()">
                <Content>
                    <div class="component-container">
                        @if (Teammates.Any())
                        {
                            <QuickGrid Items="Teammates" class="quick-data-grid">
                                <TemplateColumn
                                    Title="@Resources[Messages.Dashboard_PersonName]"
                                    Sortable="true"
                                    SortBy="GridSort<TeammateDto>.ByAscending(e => e.Name).ThenAscending(e => e.UserName)">
                                    @context.Name
                                    <br/>
                                    @context.UserName
                                </TemplateColumn>
                                <TemplateColumn
                                    Title="@Resources[Messages.Dashboard_LeaveUntil]"
                                    Sortable="true"
                                    SortBy="GridSort<TeammateDto>.ByAscending(e => e.LeaveUntil)">
                                    @if (context.LeaveUntil.HasValue)
                                    {
                                        <span>@context.LeaveUntil.Value.ToString("dd.MM.yyyy")</span>
                                        if (_item.HasManagerAccess)
                                        {
                                            <RouterLink OnClick="() => ExcludeFromTeam(context, false)">
                                                <Content>
                                                    [X]
                                                </Content>
                                            </RouterLink>
                                        }
                                    }
                                </TemplateColumn>
                                <TemplateColumn Title="@Resources[Messages.Dashboard_ExcludeFromTeam]" Sortable="false">
                                    @if (_item.HasManagerAccess)
                                    {
                                        <RouterLink OnClick="() => ExcludeFromTeam(context, false, 1)">
                                            <Content>1</Content>
                                        </RouterLink>
                                        <RouterLink OnClick="() => ExcludeFromTeam(context, false, 7)">
                                            <Content>7</Content>
                                        </RouterLink>
                                        <RouterLink OnClick="() => ExcludeFromTeam(context, false, 14)">
                                            <Content>14</Content>
                                        </RouterLink>
                                        <br/>
                                        <RouterLink OnClick="() => ExcludeFromTeam(context, true)">
                                            <Content>@Resources[Messages.Dashboard_Forever]</Content>
                                        </RouterLink>
                                    }
                                    else
                                    {
                                        <p>-</p>
                                    }
                                </TemplateColumn>
                            </QuickGrid>
                        }
                        else
                        {
                            <NoData IsDark="true"/>
                        }
                    </div>
                </Content>
            </Loading>
        </Content>
    </DashboardWidget>
}

@code {
    [Parameter, EditorRequired]
    public Guid BotId { get; set; }
    
    [Parameter, EditorRequired]
    public Guid? TeamId { get; set; }

    private ConfirmDialog? _confirmDialog;

    private TeammateDto? _selectedTeammate;
    private bool _exclude;
    private int? _leaveUntil;
    
    private LoadingState _state = LoadingState.Done();
    private GetTeammatesResult _item = new(false, Array.Empty<TeammateDto>());
    private IQueryable<TeammateDto> Teammates => _item.Teammates.AsQueryable();

    protected override Task OnParametersSetAsync() => Load();

    private async Task Load(bool showLoading = true)
    {
        if (!TeamId.HasValue)
            return;

        await RequestProcessor.Process(
            () => BotService.GetTeammates(TeamId.Value),
            nameof(TeammatesWidget),
            r => _item = r,
            s =>
            {
                if (showLoading || !s.IsLoading)
                {
                    _state = s;
                    StateHasChanged();
                }
            });
    }

    private void ExcludeFromTeam(TeammateDto teammate, bool exclude, int? leaveUntil = null)
    {
        _leaveUntil = leaveUntil;
        _selectedTeammate = teammate;
        _exclude = exclude;

        _confirmDialog?.Open();
    }

    private async Task RemoveTeammate()
    {
        if (_selectedTeammate is null)
            return;

        await RequestProcessor.Process(
            async () =>
            {
                await BotService.RemoveTeammate(new RemoveTeammateCommand(
                    _selectedTeammate.TeamId,
                    _selectedTeammate.PersonId,
                    _leaveUntil.HasValue ? DateTimeOffset.UtcNow.AddDays(_leaveUntil.Value) : null,
                    _exclude));

                _leaveUntil = null;
                _selectedTeammate = null;
                
                await Load(showLoading: false);
            },
            () => { },
            _ => StateHasChanged());
    }
}