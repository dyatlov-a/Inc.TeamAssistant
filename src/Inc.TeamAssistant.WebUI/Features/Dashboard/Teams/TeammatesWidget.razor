@inject IBotService BotService
@inject IStringLocalizer<DashboardResources> Localizer
@inject RequestProcessor RequestProcessor

<ConfirmDialog OnConfirm="RemoveTeammate" @ref="_confirmDialog">
    @if (_exclude || _leaveUntil.HasValue)
    {
        <p>@Localizer["LeaveTeammate"] @_selectedTeammate?.Name</p>
        @if (_leaveUntil.HasValue)
        {
            <p>@_leaveUntil.Value @Localizer["Days"]</p>
        }
        else
        {
            <p>@Localizer["Forever"]</p>
        }
    }
    else
    {
        <p>@Localizer["RecoveryTeammate"] @_selectedTeammate?.Name</p>
    }
</ConfirmDialog>

@if (TeamId.HasValue)
{
    <DashboardWidget Title="@Localizer["TeammatesWidgetTitle"]">
        <Loading State="_state" Retry="() => Load()">
            <div class="component-container">
                @if (Teammates.Any())
                {
                    <QuickGrid Items="Teammates" class="quick-data-grid">
                        <TemplateColumn
                            Title="@Localizer["PersonName"]"
                            Sortable="true"
                            SortBy="GridSort<TeammateDto>.ByAscending(e => e.Name).ThenAscending(e => e.UserName)">
                            @context.Name
                            <br/>
                            @context.UserName
                        </TemplateColumn>
                        <TemplateColumn
                            Title="@Localizer["LeaveUntil"]"
                            Sortable="true"
                            SortBy="GridSort<TeammateDto>.ByAscending(e => e.LeaveUntil)">
                            @if (context.LeaveUntil.HasValue)
                            {
                                <span>@context.LeaveUntil.Value.ToString("dd.MM.yyyy")</span>
                                if (_item.HasManagerAccess)
                                {
                                    <RouterLink OnClick="() => ExcludeFromTeam(context, false)">[X]</RouterLink>
                                }
                            }
                        </TemplateColumn>
                        <TemplateColumn Title="@Localizer["ExcludeFromTeam"]" Sortable="false">
                            @if (_item.HasManagerAccess)
                            {
                                <RouterLink OnClick="() => ExcludeFromTeam(context, false, 1)">1</RouterLink>
                                <RouterLink OnClick="() => ExcludeFromTeam(context, false, 7)">7</RouterLink>
                                <RouterLink OnClick="() => ExcludeFromTeam(context, false, 14)">14</RouterLink>
                                <br/>
                                <RouterLink OnClick="() => ExcludeFromTeam(context, true)">
                                    @Localizer["Forever"]
                                </RouterLink>
                            }
                            else
                            {
                                <p>-</p>
                            }
                        </TemplateColumn>
                    </QuickGrid>
                }
                else
                {
                    <NoData ComponentStyle="ComponentStyle.Secondary"/>
                }
            </div>
        </Loading>
    </DashboardWidget>
}

@code {
    [Parameter, EditorRequired]
    public Guid BotId { get; set; }
    
    [Parameter, EditorRequired]
    public Guid? TeamId { get; set; }

    private ConfirmDialog? _confirmDialog;

    private TeammateDto? _selectedTeammate;
    private bool _exclude;
    private int? _leaveUntil;
    
    private LoadingState _state = LoadingState.Done();
    private GetTeammatesResult _item = new(false, Array.Empty<TeammateDto>());
    private IQueryable<TeammateDto> Teammates => _item.Teammates.AsQueryable();

    protected override Task OnParametersSetAsync() => Load();

    private async Task Load(bool showLoading = true)
    {
        if (!TeamId.HasValue)
            return;

        await RequestProcessor.Process(
            () => BotService.GetTeammates(TeamId.Value),
            nameof(TeammatesWidget),
            r => _item = r,
            s =>
            {
                if (showLoading || !s.IsLoading)
                {
                    _state = s;
                    StateHasChanged();
                }
            });
    }

    private void ExcludeFromTeam(TeammateDto teammate, bool exclude, int? leaveUntil = null)
    {
        _leaveUntil = leaveUntil;
        _selectedTeammate = teammate;
        _exclude = exclude;

        _confirmDialog?.Open();
    }

    private async Task RemoveTeammate()
    {
        if (_selectedTeammate is null)
            return;

        await RequestProcessor.Process(
            async () =>
            {
                await BotService.RemoveTeammate(new RemoveTeammateCommand(
                    _selectedTeammate.TeamId,
                    _selectedTeammate.PersonId,
                    _leaveUntil.HasValue ? DateTimeOffset.UtcNow.AddDays(_leaveUntil.Value) : null,
                    _exclude));

                _leaveUntil = null;
                _selectedTeammate = null;
                
                await Load(showLoading: false);
            },
            () => { },
            _ => StateHasChanged());
    }
}