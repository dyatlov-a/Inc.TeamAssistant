@using Inc.TeamAssistant.Connector.Model.Commands.RemoveTeammate
@using Inc.TeamAssistant.Connector.Model.Queries.GetTeammates

@inject IBotService BotService
@inject ResourcesManager Resources
@inject RequestProcessor RequestProcessor

<ConfirmDialog OnConfirm="RemoveTeammate" @ref="_confirmDialog">
    <Content>
        @if (_exclude || _leaveUntil.HasValue)
        {
            <p>@Resources[Messages.Dashboard_LeaveTeammate] @_selectedTeammate?.Name</p>
            @if (_leaveUntil.HasValue)
            {
                <p>@_leaveUntil.Value @Resources[Messages.Dashboard_Days]</p>
            }
            else
            {
                <p>@Resources[Messages.Dashboard_Forever]</p>
            }
        }
        else
        {
            <p>@Resources[Messages.Dashboard_RecoveryTeammate] @_selectedTeammate?.Name</p>
        }
    </Content>
</ConfirmDialog>
<Loading State="_state">
    <Content>
        <QuickGrid Items="Teammates" class="quick-data-grid">
            <TemplateColumn
                Title="@Resources[Messages.Dashboard_PersonName]"
                Sortable="true"
                SortBy="GridSort<TeammateDto>.ByAscending(e => e.Name).ThenAscending(e => e.UserName)">
                @context.Name
                <br/>
                @context.UserName
            </TemplateColumn>
            <TemplateColumn
                Title="@Resources[Messages.Dashboard_LeaveUntil]"
                Sortable="true"
                SortBy="GridSort<TeammateDto>.ByAscending(e => e.LeaveUntil)">
                @if (context.LeaveUntil.HasValue)
                {
                    <span>@context.LeaveUntil.Value.ToString("dd.MM.yyyy")</span>
                    if (_item.HasManagerAccess)
                    {
                        <a
                            href="#"
                            @onclick="() => ExcludeFromTeam(context, false)"
                            class="link link_light" @onclick:preventDefault="true">[X]</a>
                    }
                }
            </TemplateColumn>
            <TemplateColumn Title="@Resources[Messages.Dashboard_ExcludeFromTeam]" Sortable="false">
                @if (_item.HasManagerAccess)
                {
                    <a
                        href="#"
                        @onclick="() => ExcludeFromTeam(context, false, 1)"
                        class="link link_light"
                        @onclick:preventDefault="true">1</a>
                    <a
                        href="#"
                        @onclick="() => ExcludeFromTeam(context, false, 7)"
                        class="link link_light"
                        @onclick:preventDefault="true">7</a>
                    <a
                        href="#"
                        @onclick="() => ExcludeFromTeam(context, false, 14)"
                        class="link link_light"
                        @onclick:preventDefault="true">14</a>
                    <br/>
                    <a
                        href="#"
                        @onclick="() => ExcludeFromTeam(context, true)"
                        class="link link_light"
                        @onclick:preventDefault="true">@Resources[Messages.Dashboard_Forever]</a>
                }
                else
                {
                    <p>-</p>
                }
            </TemplateColumn>
        </QuickGrid>
    </Content>
</Loading>

@code {
    [Parameter, EditorRequired]
    public Guid TeamId { get; set; }

    private ConfirmDialog? _confirmDialog;

    private TeammateDto? _selectedTeammate;
    private bool _exclude;
    private int? _leaveUntil;
    
    private LoadingState _state = LoadingState.Done();
    private GetTeammatesResult _item = new(false, Array.Empty<TeammateDto>());
    private IQueryable<TeammateDto> Teammates => _item.Teammates.AsQueryable();

    protected override Task OnParametersSetAsync() => Load();
    
    private async Task Load()
    {
        _state = await RequestProcessor.Process(
            () => BotService.GetTeammates(TeamId),
            nameof(TeammatesWidget),
            r =>
            {
                _item = r;
                _state = LoadingState.Done();
                StateHasChanged();
            });
    }

    private void ExcludeFromTeam(TeammateDto teammate, bool exclude, int? leaveUntil = null)
    {
        _leaveUntil = leaveUntil;
        _selectedTeammate = teammate;
        _exclude = exclude;

        _confirmDialog?.Open();
    }

    private async Task RemoveTeammate()
    {
        if (_selectedTeammate is null)
            return;

        var leaveUntil = _leaveUntil.HasValue
            ? DateTimeOffset.UtcNow.AddDays(_leaveUntil.Value)
            : (DateTimeOffset?)null;

        await BotService.RemoveTeammate(new RemoveTeammateCommand(
            _selectedTeammate.TeamId,
            _selectedTeammate.PersonId,
            leaveUntil,
            _exclude));

        _leaveUntil = null;
        _selectedTeammate = null;

        await Load();
    }
}