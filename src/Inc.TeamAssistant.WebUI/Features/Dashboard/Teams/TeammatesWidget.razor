@inject IStringLocalizer<DashboardResources> Localizer

<ConfirmDialog OnConfirm="EmitTeammateRemoved" @ref="_confirmDialog">
    @if (_exclude || _leaveUntil.HasValue)
    {
        <p>@Localizer["LeaveTeammate"] @_selectedTeammate?.Name</p>
        @if (_leaveUntil.HasValue)
        {
            <p>@_leaveUntil.Value @Localizer["Days"]</p>
        }
        else
        {
            <p>@Localizer["Forever"]</p>
        }
    }
    else
    {
        <p>@Localizer["RecoveryTeammate"] @_selectedTeammate?.Name</p>
    }
</ConfirmDialog>

@if (TeamId.HasValue)
{
    <DashboardWidget Title="@Localizer["TeammatesWidgetTitle"]">
        <Loading State="State" Retry="Retry">
            <div class="component-container">
                @if (Teammates.Any())
                {
                    <QuickGrid Items="Teammates" class="quick-data-grid">
                        <TemplateColumn
                            Title="@Localizer["PersonName"]"
                            Sortable="true"
                            SortBy="GridSort<TeammateDto>.ByAscending(e => e.Name).ThenAscending(e => e.UserName)">
                            @context.Name
                            <br/>
                            @context.UserName
                        </TemplateColumn>
                        <TemplateColumn
                            Title="@Localizer["LeaveUntil"]"
                            Sortable="true"
                            SortBy="GridSort<TeammateDto>.ByAscending(e => e.LeaveUntil)">
                            @if (context.LeaveUntil.HasValue)
                            {
                                <span>@context.LeaveUntil.Value.ToString("dd.MM.yyyy")</span>
                                if (Item.HasManagerAccess)
                                {
                                    <RouterLink OnClick="() => ExcludeFromTeam(context, false)">[X]</RouterLink>
                                }
                            }
                        </TemplateColumn>
                        <TemplateColumn Title="@Localizer["ExcludeFromTeam"]" Sortable="false">
                            @if (Item.HasManagerAccess)
                            {
                                <RouterLink OnClick="() => ExcludeFromTeam(context, false, 1)">1</RouterLink>
                                <RouterLink OnClick="() => ExcludeFromTeam(context, false, 7)">7</RouterLink>
                                <RouterLink OnClick="() => ExcludeFromTeam(context, false, 14)">14</RouterLink>
                                <br/>
                                <RouterLink OnClick="() => ExcludeFromTeam(context, true)">
                                    @Localizer["Forever"]
                                </RouterLink>
                            }
                            else
                            {
                                <p>-</p>
                            }
                        </TemplateColumn>
                    </QuickGrid>
                }
                else
                {
                    <NoData ComponentStyle="ComponentStyle.Secondary"/>
                }
            </div>
        </Loading>
    </DashboardWidget>
}

@code {
    /// <summary>
    /// Team identifier.
    /// </summary>
    [Parameter, EditorRequired]
    public Guid? TeamId { get; set; }

    /// <summary>
    /// Component state.
    /// </summary>
    [Parameter, EditorRequired]
    public LoadingState State { get; set; } = default!;
    
    /// <summary>
    /// Teammates data.
    /// </summary>
    [Parameter, EditorRequired]
    public GetTeammatesResult Item { get; set; } = default!;
    
    /// <summary>
    /// Action for retry.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Task> Retry { get; set; } = default!;
    
    /// <summary>
    /// On confirm event
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<(TeammateDto Teammate, bool Exclude, int? LeaveUntil)> TeammateRemoved { get; set; }

    private ConfirmDialog? _confirmDialog;
    private TeammateDto? _selectedTeammate;
    private bool _exclude;
    private int? _leaveUntil;
    
    private IQueryable<TeammateDto> Teammates => Item.Teammates.AsQueryable();

    private void ExcludeFromTeam(TeammateDto teammate, bool exclude, int? leaveUntil = null)
    {
        _leaveUntil = leaveUntil;
        _selectedTeammate = teammate;
        _exclude = exclude;

        _confirmDialog?.Open();
    }

    private async Task EmitTeammateRemoved()
    {
        if (_selectedTeammate is not null)
            await TeammateRemoved.InvokeAsync((_selectedTeammate, _exclude, _leaveUntil));

        _selectedTeammate = null;
        _exclude = false;
        _leaveUntil = null;
    }
}