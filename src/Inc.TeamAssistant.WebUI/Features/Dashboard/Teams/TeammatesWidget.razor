@inject IStringLocalizer<DashboardResources> Localizer

<ConfirmDialog @ref="_confirmDialog">
    @if (_isDelete || _deleteUntil.HasValue)
    {
        <p>@Localizer["ConfirmDeleteTeammate"] @_selectedTeammate?.Name</p>
        @if (_deleteUntil.HasValue)
        {
            <p>@_deleteUntil.Value @Localizer["Days"]</p>
        }
    }
    else
    {
        <p>@Localizer["RecoveryTeammate"] @_selectedTeammate?.Name</p>
    }
</ConfirmDialog>

@if (TeamId.HasValue)
{
    <DashboardWidget Title="@Localizer["TeammatesWidgetTitle"]">
        <Loading State="State" Retry="Retry">
            <div class="component-container">
                @if (Teammates.Any())
                {
                    <QuickGrid Items="Teammates" class="quick-data-grid">
                        <TemplateColumn
                            Title="@Localizer["PersonName"]"
                            Sortable="true"
                            SortBy="GridSort<TeammateDto>.ByAscending(e => e.Name).ThenAscending(e => e.UserName)">
                            @context.Name
                            <br/>
                            @context.UserName
                        </TemplateColumn>
                        <TemplateColumn
                            Title="@Localizer["CanFinalize"]"
                            Sortable="false">
                            <RouterLink OnClick="() => ChangeTeammate(context)">
                                @ValueToString(context.CanFinalize)
                            </RouterLink>
                        </TemplateColumn>
                        <TemplateColumn
                            Title="@Localizer["LeaveUntil"]"
                            Sortable="true"
                            SortBy="GridSort<TeammateDto>.ByAscending(e => e.LeaveUntil)">
                            @if (context.LeaveUntil.HasValue)
                            {
                                <span>@context.LeaveUntil.Value.ToString("dd.MM.yyyy")</span>
                                if (Item.HasManagerAccess)
                                {
                                    <RouterLink OnClick="() => RecoveryTeammate(context)">[X]</RouterLink>
                                }
                            }
                        </TemplateColumn>
                        <TemplateColumn Title="@Localizer["ExcludeFromTeam"]" Sortable="false">
                            @if (Item.HasManagerAccess)
                            {
                                <RouterLink OnClick="() => DeleteTeammate(context, 1)">1</RouterLink>
                                <RouterLink OnClick="() => DeleteTeammate(context, 7)">7</RouterLink>
                                <RouterLink OnClick="() => DeleteTeammate(context, 14)">14</RouterLink>
                                <br/>
                                <RouterLink OnClick="() => DeleteTeammate(context, null)">
                                    @Localizer["Delete"]
                                </RouterLink>
                            }
                            else
                            {
                                <p>-</p>
                            }
                        </TemplateColumn>
                    </QuickGrid>
                }
                else
                {
                    <NoData ComponentStyle="ComponentStyle.Secondary"/>
                }
            </div>
        </Loading>
    </DashboardWidget>
}

@code {
    /// <summary>
    /// Team identifier.
    /// </summary>
    [Parameter, EditorRequired]
    public Guid? TeamId { get; set; }

    /// <summary>
    /// Component state.
    /// </summary>
    [Parameter, EditorRequired]
    public LoadingState State { get; set; } = default!;
    
    /// <summary>
    /// Teammates data.
    /// </summary>
    [Parameter, EditorRequired]
    public GetTeammatesResult Item { get; set; } = default!;
    
    /// <summary>
    /// Action for retry.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Task> Retry { get; set; } = default!;
    
    /// <summary>
    /// Removed teammate callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<RemoveTeammateCommand> TeammateRemoved { get; set; }
    
    /// <summary>
    /// Updated teammate callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<UpdateTeammateCommand> TeammateUpdated { get; set; }

    private ConfirmDialog? _confirmDialog;
    private TeammateDto? _selectedTeammate;
    private bool _isDelete;
    private int? _deleteUntil;
    
    private IQueryable<TeammateDto> Teammates => Item.Teammates.AsQueryable();
    
    private string ValueToString(bool value) => value
        ? Localizer["BooleanTrueText"]
        : Localizer["BooleanFalseText"];

    private async Task ChangeTeammate(TeammateDto teammate)
    {
        await TeammateUpdated.InvokeAsync(new UpdateTeammateCommand(
            teammate.TeamId,
            teammate.PersonId,
            HasLeaveUntil: false,
            LeaveUntil: null,
            !teammate.CanFinalize));
    }

    private async Task DeleteTeammate(TeammateDto teammate, int? leaveUntil)
    {
        _selectedTeammate = teammate;
        _deleteUntil = leaveUntil;
        _isDelete = !leaveUntil.HasValue;

        if (_confirmDialog is not null && await _confirmDialog.IsConfirmed())
            await ChangeMembership();
    }

    private async Task RecoveryTeammate(TeammateDto teammate)
    {
        _selectedTeammate = teammate;
        _deleteUntil = null;
        _isDelete = false;

        if (_confirmDialog is not null && await _confirmDialog.IsConfirmed())
            await ChangeMembership();
    }

    private async Task ChangeMembership()
    {
        if (_selectedTeammate is not null)
        {
            if (_isDelete)
                await TeammateRemoved.InvokeAsync(new RemoveTeammateCommand(
                    _selectedTeammate.TeamId,
                    _selectedTeammate.PersonId));
            else
            {
                var leaveUntil = _deleteUntil.HasValue
                    ? DateTimeOffset.UtcNow.AddDays(_deleteUntil.Value)
                    : (DateTimeOffset?)null;
                
                await TeammateUpdated.InvokeAsync(new UpdateTeammateCommand(
                    _selectedTeammate.TeamId,
                    _selectedTeammate.PersonId,
                    HasLeaveUntil: true,
                    leaveUntil,
                    CanFinalize: null));
            }
        }

        _selectedTeammate = null;
        _isDelete = false;
        _deleteUntil = null;
    }
}