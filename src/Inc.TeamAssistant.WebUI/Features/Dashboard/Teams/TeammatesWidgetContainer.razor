@inject IBotService BotService
@inject RequestProcessor RequestProcessor

<TeammatesWidget
    TeamId="TeamId"
    State="_state"
    Item="_item"
    Retry="() => Load()"
    TeammateUpdated="UpdateTeammate"
    TeammateRemoved="RemoveTeammate" />

@code {
    [Parameter, EditorRequired]
    public Guid BotId { get; set; }
    
    [Parameter, EditorRequired]
    public Guid? TeamId { get; set; }
    
    private readonly LoadingState _state = LoadingState.Done();
    private GetTeammatesResult _item = GetTeammatesResult.Empty;

    protected override Task OnParametersSetAsync() => Load();

    private async Task Load(bool showLoading = true)
    {
        if (!TeamId.HasValue)
            return;

        _item = await RequestProcessor.Process(
            () => BotService.GetTeammates(TeamId.Value),
            nameof(TeammatesWidgetContainer),
            _state,
            showLoading);
        
        StateHasChanged();
    }
    
    private async Task UpdateTeammate(UpdateTeammateCommand command)
    {
        await RequestProcessor.Process(
            () => BotService.UpdateTeammate(command),
            _state,
            showLoading: false);

        await Load(showLoading: false);
    }

    private async Task RemoveTeammate(RemoveTeammateCommand command)
    {
        await RequestProcessor.Process(
            () => BotService.RemoveTeammate(command),
            _state,
            showLoading: false);

        await Load(showLoading: false);
    }
}