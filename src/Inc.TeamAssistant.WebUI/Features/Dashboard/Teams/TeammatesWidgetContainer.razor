@inject IBotService BotService
@inject RequestProcessor RequestProcessor

<TeammatesWidget
    TeamId="TeamId"
    State="_state"
    Item="_item"
    Retry="() => Load()"
    TeammateRemoved="e => RemoveTeammate(e.Teammate, e.Exclude, e.LeaveUntil)" />

@code {
    [Parameter, EditorRequired]
    public Guid BotId { get; set; }
    
    [Parameter, EditorRequired]
    public Guid? TeamId { get; set; }
    
    private readonly LoadingState _state = LoadingState.Done();
    private GetTeammatesResult _item = GetTeammatesResult.Empty;

    protected override Task OnParametersSetAsync() => Load();

    private async Task Load(bool showLoading = true)
    {
        if (!TeamId.HasValue)
            return;

        _item = await RequestProcessor.Process(
            () => BotService.GetTeammates(TeamId.Value),
            nameof(TeammatesWidgetContainer),
            _state,
            showLoading);
        
        StateHasChanged();
    }

    private async Task RemoveTeammate(TeammateDto teammate, bool exclude, int? leaveUntil)
    {
        await RequestProcessor.Process(() => BotService.RemoveTeammate(new RemoveTeammateCommand(
                teammate.TeamId,
                teammate.PersonId,
                leaveUntil.HasValue ? DateTimeOffset.UtcNow.AddDays(leaveUntil.Value) : null,
                exclude)),
            _state,
            showLoading: false);

        await Load(showLoading: false);
    }
}