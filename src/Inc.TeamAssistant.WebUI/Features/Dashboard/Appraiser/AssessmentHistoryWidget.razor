@using Inc.TeamAssistant.Appraiser.Model.Queries.GetAssessmentHistory

@inherits PersistentComponent<AssessmentHistoryWidgetViewModel>

@inject IAppraiserService AppraiserService
@inject IRenderContext RenderContext

<DateSelector Date="_date" Items="ViewModel.DateItems" OnSelected="Changed" />

@if (ViewModel.Items.Any())
{
    <QuickGrid Items="HistoryItems" class="quick-data-grid" Pagination="_pagination">
        <TemplateColumn 
            Title="@ViewModel.AssessmentDate"
            Sortable="true"
            SortBy="GridSort<AssessmentHistoryDto>.ByAscending(t => t.AssessmentDate)">
            <a href="@MoveToItem(context.AssessmentDate)" class="link link_white">
                @context.AssessmentDate.ToString("dd-MM-yyyy")
            </a>
        </TemplateColumn>
        <PropertyColumn Title="@ViewModel.StoriesCountText" Property="@(t => t.StoriesCount)" Sortable="true"/>
        <PropertyColumn Title="@ViewModel.AssessmentSumText" Property="@(t => t.AssessmentSum)" Sortable="true"/>
    </QuickGrid>
    <div class="paginator-container">
        <Paginator State="_pagination"/>
    </div>
    <div class="appraiser-actions">
        <a href="@GetAssessmentSessionUrl()" class="button button_black">@ViewModel.GoToCurrentSessionButtonText</a>
    </div>
}
else
{
    <NoData />
}

@code {
    [Parameter, EditorRequired]
    public Guid TeamId { get; set; }
    
    private DateOnly? _date;
    private readonly PaginationState _pagination = new();

    private IQueryable<AssessmentHistoryDto> HistoryItems => ViewModel.Items.AsQueryable();
    
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _date ??= ViewModel.DateItems.First().Date;
    }
    
    protected override async Task<AssessmentHistoryWidgetViewModel> Initialize(Dictionary<string, string> resources)
    {
        var dateItems = DateSelectorDataFactory.CreateLongPeriod(resources); 
        _date ??= dateItems.First().Date; 
        var getSessionHistoryResult = await AppraiserService.GetAssessmentHistory(TeamId, _date.Value);

       return new AssessmentHistoryWidgetViewModel(
           resources[Messages.Dashboard_TotalStories],
           resources[Messages.Dashboard_GoToCurrentSessionButtonText],
           resources[Messages.Dashboard_AssessmentSum],
           resources[Messages.Dashboard_AssessmentDate],
           dateItems,
           getSessionHistoryResult.Result.Items);
    }

    private string GetAssessmentSessionUrl() => LinkBuilder($"assessment-session/{TeamId:N}");
    
    private string MoveToItem(DateOnly date) => LinkBuilder($"assessment-history/{TeamId:N}/{date:yyyy-MM-dd}");

    private async Task Changed(DateOnly date)
    {
        _date = date;
        await Update();
    }
}