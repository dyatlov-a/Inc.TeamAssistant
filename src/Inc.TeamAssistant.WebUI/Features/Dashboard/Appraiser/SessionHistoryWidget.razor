@using Inc.TeamAssistant.Appraiser.Model.Queries.GetAssessmentHistory

@inherits PersistentComponent<SessionHistoryWidgetViewModel>

@inject IAppraiserService AppraiserService
@inject IRenderContext RenderContext
@inject NavigationManager NavigationManager

@if (ViewModel.Items.Any())
{
    <QuickGrid Items="HistoryItems" class="quick-data-grid">
        <TemplateColumn Title="@ViewModel.AssessmentDate">
            <a href="@MoveToItem(context.AssessmentDate)" class="link link_white">
                @context.AssessmentDate.ToString("dd-MM-yyyy")
            </a>
        </TemplateColumn>
        <PropertyColumn Title="@ViewModel.TasksName" Property="@(t => t.StoriesCount)"/>
    </QuickGrid>
    <div class="appraiser-actions">
        <button type="button" class="button button_white" @onclick="MoveToAssessmentSession">
            @ViewModel.GoToCurrentSessionButtonText
        </button>
    </div>
}
else
{
    <NoData />
}

@code {
    [Parameter, EditorRequired]
    public Guid TeamId { get; set; }
    
    [Parameter, EditorRequired]
    public int HistoryDepth { get; set; }

    private IQueryable<AssessmentHistoryDto> HistoryItems => ViewModel.Items.AsQueryable();
    
    protected override async Task<SessionHistoryWidgetViewModel> Initialize(Dictionary<string, string> resources)
    {
       var getSessionHistoryResult = await AppraiserService.GetAssessmentHistory(TeamId, HistoryDepth);

       return new SessionHistoryWidgetViewModel(
           resources[Messages.Dashboard_TotalStories],
           resources[Messages.Dashboard_GoToCurrentSessionButtonText],
           resources[Messages.Dashboard_AssessmentDate],
           getSessionHistoryResult.Result.Items);
    }

    private void MoveToAssessmentSession()
    {
        NavigationManager.NavigateTo(LinkBuilder($"assessment-session/{TeamId:N}"));
    }
    
    private string MoveToItem(DateOnly date) => LinkBuilder($"assessment-history/{TeamId:N}/{date:yyyy-MM-dd}");
}