@using Inc.TeamAssistant.Connector.Model.Commands.DisableIntegration

@inject IIntegrationService IntegrationService
@inject ResourcesManager Resources
@inject RequestProcessor RequestProcessor

<ConfirmDialog OnConfirm="Disable" @ref="_confirmDialog">
    <Content>
        <p>@Resources[Messages.Dashboard_AppraiserIntegrationConfirmText]</p>
    </Content>
</ConfirmDialog>
<Loading State="_state">
    <Content>
        <EditForm EditContext="_editContext" OnSubmit="SubmitForm">
            <FluentValidationValidator @ref="_fluentValidationValidator"/>
            <div class="appraiser-integration">
                <div class="appraiser-integration__body">
                    <FormFieldSet
                        FieldId="access-token"
                        Label="@Resources[Messages.Dashboard_AppraiserIntegrationAccessTokenLabel]">
                        <Content>
                            <InputText
                                @bind-Value="_formModel.AccessToken"
                                class="form-control"
                                id="access-token"
                                disabled="disabled"/>
                        </Content>
                    </FormFieldSet>
                    <FormFieldSet
                        FieldId="project-key"
                        Label="@Resources[Messages.Dashboard_AppraiserIntegrationProjectKeyLabel]">
                        <Content>
                            @if (_formModel.IsDisableControls)
                            {
                                <InputText
                                    @bind-Value="_formModel.ProjectKey"
                                    class="form-control"
                                    id="project-key"
                                    disabled="disabled"/>
                            }
                            else
                            {
                                <InputText @bind-Value="_formModel.ProjectKey" class="form-control" id="project-key"/>
                            }
                            <ValidationMessage For="@(() => _formModel.ProjectKey)"/>
                        </Content>
                    </FormFieldSet>
                    <FormFieldSet
                        FieldId="scrum-master"
                        Label="@Resources[Messages.Dashboard_AppraiserIntegrationScrumMasterLabel]">
                        <Content>
                            <SelectList
                                FieldId="scrum-master"
                                Value="_formModel.ScrumMasterId"
                                ValueExpression="@(() => _formModel.ScrumMasterId)"
                                ValueChanged="@((long v) => _formModel.ScrumMasterId = v)"
                                Items="_formModel.Teammates"
                                TitleSelector="i => i.DisplayName"
                                ValueSelector="i => i.Id"
                                IsDisabled="_formModel.IsDisableControls" />
                            <ValidationMessage For="@(() => _formModel.ScrumMasterId)"/>
                        </Content>
                    </FormFieldSet>
                    @if (!_formModel.IsDisableControls)
                    {
                        <div class="appraiser-integration__buttons">
                            <button
                                type="submit"
                                class="button button_dark appraiser-integration__button">
                                @Resources[Messages.Dashboard_AppraiserIntegrationSaveButton]
                            </button>
                            <button
                                type="button"
                                class="button button_dark appraiser-integration__button"
                                @onclick="BeginDisable">
                                @Resources[Messages.Dashboard_AppraiserIntegrationDisableButton]
                            </button>
                        </div>
                    }
                </div>
                @if (!_formModel.IsEnabled)
                {
                    <div class="appraiser-integration__bg"></div>
                    <div class="appraiser-integration__controls">
                        <div class="appraiser-integration__controls-body">
                            <button type="button" class="button button_dark" @onclick="Enable">
                                @Resources[Messages.Dashboard_AppraiserIntegrationEnableButton]
                            </button>
                        </div>
                    </div>
                }
            </div>
        </EditForm>
    </Content>
</Loading>

@code {
    [Parameter, EditorRequired]
    public Guid TeamId { get; set; }
    
    private ConfirmDialog? _confirmDialog;
    private readonly AppraiserIntegrationFromModel _formModel = new();
    private FluentValidationValidator? _fluentValidationValidator;
    private EditContext? _editContext;
    private LoadingState _state = LoadingState.Done();

    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(_formModel);
    }

    protected override Task OnParametersSetAsync() => Load();
    
    private async Task Load()
    {
        _state = await RequestProcessor.Process(
            () => IntegrationService.GetTeamProperties(TeamId),
            nameof(AppraiserIntegrationWidget),
            r =>
            {
                _formModel.Apply(r);
                _state = LoadingState.Done();
                StateHasChanged();
            });
    }

    private void BeginDisable() => _confirmDialog?.Open();

    private void Enable() => _formModel.IsEnabled = true;

    private async Task Disable()
    {
        _state = await RequestProcessor.Process(
            () => IntegrationService.DisableIntegration(new DisableIntegrationCommand(TeamId)),
            () =>
            {
                _formModel.Clear();
                _state = LoadingState.Done();
                StateHasChanged();
            });
    }
    
    private async Task SubmitForm()
    {
        if (_fluentValidationValidator is null || !await _fluentValidationValidator.ValidateAsync())
            return;
        
        _state = await RequestProcessor.Process(
            async () =>
            {
                await IntegrationService.SetTeamProperties(_formModel.ToCommand(TeamId));

                await Load();
            },
            StateHasChanged);
    }
}