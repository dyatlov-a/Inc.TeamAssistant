@inject IIntegrationService IntegrationService
@inject IStringLocalizer<DashboardResources> Localizer
@inject RequestProcessor RequestProcessor
@inject IServiceProvider ServiceProvider

<ConfirmDialog OnConfirm="Disable" @ref="_confirmDialog">
    <p>@Localizer["AppraiserIntegrationConfirmText"]</p>
</ConfirmDialog>

@if (TeamId.HasValue)
{
    <DashboardWidget Title="@Localizer["AppraiserIntegrationTitle"]">
        <Loading State="_state" Retry="Load">
            <div class="component-container">
                <EditForm id="@AnalyticEvents.AppraiserIntegrationEnabled" EditContext="_editContext" OnSubmit="SubmitForm">
                    <FluentValidationValidator @ref="_fluentValidationValidator" DisableAssemblyScanning="true" />
                    <div class="appraiser-integration__body">
                        <FormFieldSet
                            FieldId="access-token"
                            Label="@Localizer["AppraiserIntegrationAccessTokenLabel"]">
                            <InputSingleLine
                                FieldId="access-token"
                                @bind-Value="_formModel.AccessToken"
                                IsDisabled="true"/>
                        </FormFieldSet>
                        <FormFieldSet
                            FieldId="project-key"
                            Label="@Localizer["AppraiserIntegrationProjectKeyLabel"]">
                            <InputSingleLine
                                FieldId="project-key"
                                @bind-Value="_formModel.ProjectKey"
                                IsDisabled="!_formModel.HasManagerAccess"/>
                            <ValidationMessage For="@(() => _formModel.ProjectKey)"/>
                        </FormFieldSet>
                        <FormFieldSet
                            FieldId="scrum-master"
                            Label="@Localizer["AppraiserIntegrationScrumMasterLabel"]">
                            <InputSelectList
                                FieldId="scrum-master"
                                Value="_formModel.ScrumMasterId"
                                ValueExpression="@(() => _formModel.ScrumMasterId)"
                                ValueChanged="@((long v) => _formModel.ScrumMasterId = v)"
                                Items="_formModel.Teammates"
                                TitleSelector="i => i.DisplayName"
                                ValueSelector="i => i.Id"
                                IsDisabled="!_formModel.HasManagerAccess" />
                            <ValidationMessage For="@(() => _formModel.ScrumMasterId)"/>
                        </FormFieldSet>
                    </div>
                    @if (_formModel.HasManagerAccess)
                    {
                        <div class="component-actions">
                            <Button ComponentStyle="ComponentStyle.Secondary" ButtonType="ButtonType.Submit">
                                @Localizer["AppraiserIntegrationSaveButton"]
                            </Button>
                            <Button ComponentStyle="ComponentStyle.Secondary" OnClick="BeginDisable">
                                @Localizer["AppraiserIntegrationDisableButton"]
                            </Button>
                        </div>
                    }
                    @if (!_isEnabled)
                    {
                        <div class="appraiser-integration__bg"></div>
                        <div class="appraiser-integration__controls">
                            <div class="appraiser-integration__controls-body">
                                <Button ComponentStyle="ComponentStyle.Secondary" OnClick="Enable">
                                    @Localizer["AppraiserIntegrationEnableButton"]
                                </Button>
                            </div>
                        </div>
                    }
                </EditForm>
            </div>
        </Loading>
    </DashboardWidget>
}

@code {
    [Parameter, EditorRequired]
    public Guid BotId { get; set; }
    
    [Parameter, EditorRequired]
    public Guid? TeamId { get; set; }
    
    private bool _isEnabled;
    private ConfirmDialog? _confirmDialog;
    private readonly AppraiserIntegrationFromModel _formModel = new();
    private FluentValidationValidator? _fluentValidationValidator;
    private EditContext? _editContext;
    private LoadingState _state = LoadingState.Done();

    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(_formModel);
    }

    protected override Task OnParametersSetAsync() => Load();

    private Task Load() => Load(notification: null);
    
    private async Task Load(Notification? notification)
    {
        if (!TeamId.HasValue)
            return;
        
        var notificationsService = ServiceProvider.GetService<INotificationsService>();
        
        await RequestProcessor.Process(
            () => IntegrationService.GetTeamProperties(TeamId.Value),
            nameof(AppraiserIntegrationWidget),
            r =>
            {
                _formModel.Apply(r);
                _isEnabled = _formModel.IsEnabled;
                
                if (notificationsService is not null && notification is not null)
                    notificationsService.Publish(notification);
            },
            s =>
            {
                _state = s;
                StateHasChanged();
            });
    }

    private void BeginDisable()
    {
        if (_formModel.IsEnabled)
            _confirmDialog?.Open();
        else
            _isEnabled = false;
    }

    private void Enable() => _isEnabled = true;

    private async Task Disable()
    {
        if (!TeamId.HasValue)
            return;
        
        await RequestProcessor.Process(
            () => IntegrationService.DisableIntegration(new DisableIntegrationCommand(TeamId.Value)),
            () =>
            {
                _formModel.Clear();
                _isEnabled = false;
            },
            s =>
            {
                _state = s;
                StateHasChanged();
            });
    }
    
    private async Task SubmitForm()
    {
        if (!TeamId.HasValue || _fluentValidationValidator is null || !await _fluentValidationValidator.ValidateAsync())
            return;
        
        await RequestProcessor.Process(
            async () =>
            {
                await IntegrationService.SetTeamProperties(_formModel.ToCommand(TeamId.Value));

                await Load(Notification.Info(Localizer["AppraiserIntegrationEnableSuccess"]));
            },
            () => {},
            _ => StateHasChanged());
    }
}