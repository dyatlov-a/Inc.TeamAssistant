@inject IStringLocalizer<DashboardResources> Localizer

<ConfirmDialog @ref="_confirmDialog">
    <p>@Localizer["AppraiserIntegrationConfirmText"]</p>
</ConfirmDialog>

@if (TeamId.HasValue)
{
    <DashboardWidget Title="@Localizer["AppraiserIntegrationTitle"]">
        <Loading State="State" Retry="Retry">
            <div class="component-container">
                <EditForm id="@AnalyticEvents.AppraiserIntegrationEnabled" EditContext="_editContext" OnSubmit="SubmitForm">
                    <FluentValidationValidator @ref="_fluentValidationValidator" DisableAssemblyScanning="true" />
                    <div class="appraiser-integration__body">
                        <FormFieldSet
                            FieldId="access-token"
                            Label="@Localizer["AppraiserIntegrationAccessTokenLabel"]">
                            <InputSingleLine
                                FieldId="access-token"
                                @bind-Value="FormModel.AccessToken"
                                IsDisabled="true"/>
                        </FormFieldSet>
                        <FormFieldSet
                            FieldId="project-key"
                            Label="@Localizer["AppraiserIntegrationProjectKeyLabel"]">
                            <InputSingleLine
                                FieldId="project-key"
                                @bind-Value="FormModel.ProjectKey"
                                IsDisabled="!FormModel.HasManagerAccess"/>
                            <ValidationMessage For="@(() => FormModel.ProjectKey)"/>
                        </FormFieldSet>
                        <FormFieldSet
                            FieldId="scrum-master"
                            Label="@Localizer["AppraiserIntegrationScrumMasterLabel"]">
                            <InputSelectList
                                FieldId="scrum-master"
                                Value="FormModel.ScrumMasterId"
                                ValueExpression="@(() => FormModel.ScrumMasterId)"
                                ValueChanged="@((long v) => FormModel.ScrumMasterId = v)"
                                Items="FormModel.Teammates"
                                TitleSelector="i => i.DisplayName"
                                ValueSelector="i => i.Id"
                                IsDisabled="!FormModel.HasManagerAccess" />
                            <ValidationMessage For="@(() => FormModel.ScrumMasterId)"/>
                        </FormFieldSet>
                    </div>
                    @if (FormModel.HasManagerAccess)
                    {
                        <div class="component-actions">
                            <Button ComponentStyle="ComponentStyle.Secondary" ButtonType="ButtonType.Submit">
                                @Localizer["AppraiserIntegrationSaveButton"]
                            </Button>
                            <Button ComponentStyle="ComponentStyle.Secondary" OnClick="BeginDisable">
                                @Localizer["AppraiserIntegrationDisableButton"]
                            </Button>
                        </div>
                    }
                    @if (!FormModel.IsEnabled)
                    {
                        <div class="appraiser-integration__bg"></div>
                        <div class="appraiser-integration__controls">
                            <div class="appraiser-integration__controls-body">
                                <Button ComponentStyle="ComponentStyle.Secondary" OnClick="() => FormModel.Enable()">
                                    @Localizer["AppraiserIntegrationEnableButton"]
                                </Button>
                            </div>
                        </div>
                    }
                </EditForm>
            </div>
        </Loading>
    </DashboardWidget>
}

@code {
    /// <summary>
    /// Team identifier.
    /// </summary>
    [Parameter, EditorRequired]
    public Guid? TeamId { get; set; }
    
    /// <summary>
    /// Form model.
    /// </summary>
    [Parameter, EditorRequired]
    public AppraiserIntegrationFromModel FormModel { get; set; } = null!;
    
    /// <summary>
    /// Component state.
    /// </summary>
    [Parameter, EditorRequired]
    public LoadingState State { get; set; } = null!;
    
    /// <summary>
    /// On disabled event.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback OnDisabled { get; set; }
    
    /// <summary>
    /// On valid submit event.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<SetIntegrationPropertiesCommand> OnValidSubmit { get; set; }
    
    /// <summary>
    /// Action for retry.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Task> Retry { get; set; } = null!;
    
    private ConfirmDialog? _confirmDialog;
    private FluentValidationValidator? _fluentValidationValidator;
    private EditContext? _editContext;

    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(FormModel);
    }

    private async Task BeginDisable()
    {
        if (FormModel.IsEnabled && _confirmDialog is not null && await _confirmDialog.IsConfirmed())
            await OnDisabled.InvokeAsync();
    }
    
    private async Task SubmitForm()
    {
        if (!TeamId.HasValue || _fluentValidationValidator is null || !await _fluentValidationValidator.ValidateAsync())
            return;

        var command = FormModel.ToCommand(TeamId.Value);
        
        await OnValidSubmit.InvokeAsync(command);
    }
}