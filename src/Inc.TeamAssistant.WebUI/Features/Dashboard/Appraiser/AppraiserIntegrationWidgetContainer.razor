@inject IIntegrationService IntegrationService
@inject IStringLocalizer<DashboardResources> Localizer
@inject RequestProcessor RequestProcessor
@inject IServiceProvider ServiceProvider

<AppraiserIntegrationWidget
    TeamId="TeamId"
    FormModel="_formModel"
    State="_state"
    OnDisabled="Disable"
    OnValidSubmit="SubmitForm"
    Retry="Load" />

@code {
    [Parameter, EditorRequired]
    public Guid BotId { get; set; }
    
    [Parameter, EditorRequired]
    public Guid? TeamId { get; set; }
    
    private readonly AppraiserIntegrationFromModel _formModel = new();
    private readonly LoadingState _state = LoadingState.Done();
    
    protected override Task OnParametersSetAsync() => Load();

    private Task Load() => Load(notification: null);
    
    private async Task Load(Notification? notification)
    {
        if (!TeamId.HasValue)
            return;
        
        var notificationsService = ServiceProvider.GetService<INotificationsService>();
        
        var result = await RequestProcessor.Process(
            () => IntegrationService.GetTeamProperties(TeamId.Value),
            nameof(AppraiserIntegrationWidgetContainer),
            _state);
        
        _formModel.Apply(result);
                
        if (notificationsService is not null && notification is not null)
            notificationsService.Publish(notification);
        
        StateHasChanged();
    }

    private async Task Disable()
    {
        if (!TeamId.HasValue)
            return;
        
        await RequestProcessor.Process(
            () => IntegrationService.DisableIntegration(new DisableIntegrationCommand(TeamId.Value)),
            _state);
        
        _formModel.Clear();
        
        StateHasChanged();
    }
    
    private async Task SubmitForm(SetIntegrationPropertiesCommand command)
    {
        await RequestProcessor.Process(
             () => IntegrationService.SetTeamProperties(command),
            _state);
        
        await Load(Notification.Info(Localizer["AppraiserIntegrationEnableSuccess"]));
    }
}