@using Inc.TeamAssistant.Appraiser.Model.Queries.GetAssessmentHistory

@inject IAppraiserService AppraiserService
@inject ResourcesManager Resources
@inject LinkBuilder LinkBuilder
@inject RequestProcessor RequestProcessor
@inject DateSelectorFactory DateSelectorFactory

<Loading State="_state" Retry="Load">
    <Content>
        <div class="component-container">
            <DateSelector Date="_date" Items="DateItems" OnSelected="Changed"/>
            <div class="component-content">
                @if (HistoryItems.Any())
                {
                    <QuickGrid Items="HistoryItems" class="quick-data-grid" Pagination="_pagination">
                        <TemplateColumn
                            Title="@Resources[Messages.Dashboard_AssessmentDate]"
                            Sortable="true"
                            SortBy="GridSort<AssessmentHistoryDto>.ByAscending(t => t.AssessmentDate)">
                            <a href="@MoveToItem(context.AssessmentDate)" class="link link_light">
                                @context.AssessmentDate.ToString("dd-MM-yyyy")
                            </a>
                        </TemplateColumn>
                        <PropertyColumn
                            Title="@Resources[Messages.Dashboard_TotalStories]"
                            Property="@(t => t.StoriesCount)"
                            Sortable="true"/>
                        <PropertyColumn
                            Title="@Resources[Messages.Dashboard_AssessmentSum]"
                            Property="@(t => t.AssessmentSum)"
                            Sortable="true"/>
                    </QuickGrid>
                    <Pagination State="_pagination"/>
                }
                else
                {
                    <NoData IsDark="true"/>
                }
            </div>
            <div class="component-actions">
                <a href="@GetAssessmentSessionUrl()" class="button button_dark">
                    @Resources[Messages.Dashboard_GoToCurrentSessionButtonText]
                </a>
            </div>
        </div>
    </Content>
</Loading>

@code {
    [Parameter, EditorRequired]
    public Guid TeamId { get; set; }
    
    private DateOnly? _date;
    private readonly PaginationState _pagination = new();
    
    private LoadingState _state = LoadingState.Done();
    private IReadOnlyCollection<SelectItem<DateOnly>> DateItems => DateSelectorFactory.CreateLongPeriods();
    private IReadOnlyCollection<AssessmentHistoryDto> _items = Array.Empty<AssessmentHistoryDto>();
    private IQueryable<AssessmentHistoryDto> HistoryItems => _items.AsQueryable();
    
    protected override async Task OnParametersSetAsync()
    {
        _date ??= DateItems.First().Value;

        await Load();
    }
    
    private async Task Load()
    {
         await RequestProcessor.Process(
            () => AppraiserService.GetAssessmentHistory(TeamId, from: _date!.Value),
            nameof(AppraiserHistoryWidget),
            r => _items = r.Items,
            s =>
            {
                _state = s;
                StateHasChanged();
            });
    }

    private string GetAssessmentSessionUrl() => LinkBuilder.Build($"assessment-session/{TeamId:N}");
    
    private string MoveToItem(DateOnly date) => LinkBuilder.Build($"assessment-history/{TeamId:N}/{date:yyyy-MM-dd}");

    private async Task Changed(DateOnly date)
    {
        _date = date;
        await Load();
    }
}