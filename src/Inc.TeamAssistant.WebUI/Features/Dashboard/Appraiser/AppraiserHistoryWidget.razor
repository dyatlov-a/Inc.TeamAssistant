@inject IAppraiserService AppraiserService
@inject IStringLocalizer<DashboardResources> Localizer
@inject NavRouter NavRouter
@inject RequestProcessor RequestProcessor
@inject DateSelectorFactory DateSelectorFactory

@if (TeamId.HasValue)
{
    <DashboardWidget HasControls="true" Title="@Localizer["AppraiserHistoryTitle"]">
        <DateSelector Date="_date" Items="DateItems" OnSelected="Changed"/>
        <Loading State="_state" Retry="Load">
            <div class="component-container">
                @if (HistoryItems.Any())
                {
                    <QuickGrid Items="HistoryItems" class="quick-data-grid" Pagination="_pagination">
                        <TemplateColumn
                            Title="@Localizer["AssessmentDate"]"
                            Sortable="true"
                            SortBy="GridSort<AssessmentHistoryDto>.ByAscending(t => t.AssessmentDate)">
                            <RouterLink Href="@CreateMoveToHistoryLink(context.AssessmentDate)">
                                @context.AssessmentDate.ToString("dd-MM-yyyy")
                            </RouterLink>
                        </TemplateColumn>
                        <PropertyColumn
                            Title="@Localizer["TotalStories"]"
                            Property="@(t => t.StoriesCount)"
                            Sortable="true"/>
                        <PropertyColumn
                            Title="@Localizer["AssessmentSum"]"
                            Property="@(t => t.AssessmentSum)"
                            Sortable="true"/>
                    </QuickGrid>
                    <Pagination State="_pagination"/>
                }
                else
                {
                    <NoData ComponentStyle="ComponentStyle.Secondary"/>
                }
            </div>
            <div class="component-actions">
                <Button ComponentStyle="ComponentStyle.Secondary" OnClick="MoveToAssessmentSession">
                    @Localizer["GoToCurrentSessionButtonText"]
                </Button>
            </div>
        </Loading>
    </DashboardWidget>
}

@code {
    [Parameter, EditorRequired]
    public Guid BotId { get; set; }
    
    [Parameter, EditorRequired]
    public Guid? TeamId { get; set; }
    
    private DateOnly? _date;
    private readonly PaginationState _pagination = new();
    
    private LoadingState _state = LoadingState.Done();
    private IReadOnlyDictionary<string, DateOnly> DateItems => DateSelectorFactory.CreateMonths();
    private IReadOnlyCollection<AssessmentHistoryDto> _items = Array.Empty<AssessmentHistoryDto>();
    private IQueryable<AssessmentHistoryDto> HistoryItems => _items.AsQueryable();
    
    protected override async Task OnParametersSetAsync()
    {
        _date ??= DateItems.First().Value;

        await Load();
    }
    
    private async Task Load()
    {
        if (!TeamId.HasValue)
            return;

        await RequestProcessor.Process(
            () => AppraiserService.GetAssessmentHistory(TeamId.Value, from: _date!.Value),
            nameof(AppraiserHistoryWidget),
            r => _items = r.Items,
            s =>
            {
                _state = s;
                StateHasChanged();
            });
    }

    private async Task MoveToAssessmentSession()
    {
        await NavRouter.MoveToRoute($"assessment-session/{TeamId:N}");
    }

    private string CreateMoveToHistoryLink(DateOnly date)
        => NavRouter.CreateRoute($"assessment-history/{TeamId:N}/{date:yyyy-MM-dd}");

    private async Task Changed(DateOnly date)
    {
        _date = date;
        
        await Load();
    }
}