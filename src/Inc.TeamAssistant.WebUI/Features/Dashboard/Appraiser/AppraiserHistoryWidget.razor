@using Inc.TeamAssistant.Appraiser.Model.Queries.GetAssessmentHistory

@inject IAppraiserService AppraiserService
@inject ResourcesManager Resources
@inject LinkBuilder LinkBuilder
@inject RequestProcessor RequestProcessor

<Loading State="_state">
    <Content>
        <DateSelector Date="_date" Items="_dateItems" OnSelected="Changed" />
        @if (_items.Any())
        {
            <QuickGrid Items="HistoryItems" class="quick-data-grid" Pagination="_pagination">
                <TemplateColumn
                    Title="@Resources[Messages.Dashboard_AssessmentDate]"
                    Sortable="true"
                    SortBy="GridSort<AssessmentHistoryDto>.ByAscending(t => t.AssessmentDate)">
                    <a href="@MoveToItem(context.AssessmentDate)" class="link link_light">
                        @context.AssessmentDate.ToString("dd-MM-yyyy")
                    </a>
                </TemplateColumn>
                <PropertyColumn
                    Title="@Resources[Messages.Dashboard_TotalStories]"
                    Property="@(t => t.StoriesCount)"
                    Sortable="true"/>
                <PropertyColumn
                    Title="@Resources[Messages.Dashboard_AssessmentSum]"
                    Property="@(t => t.AssessmentSum)"
                    Sortable="true"/>
            </QuickGrid>
            <div class="paginator-container">
                <Paginator State="_pagination"/>
            </div>
        }
        else
        {
            <NoData/>
        }
        <div class="appraiser-actions">
            <a href="@GetAssessmentSessionUrl()" class="button button_dark">
                @Resources[Messages.Dashboard_GoToCurrentSessionButtonText]
            </a>
        </div>
    </Content>
</Loading>

@code {
    [Parameter, EditorRequired]
    public Guid TeamId { get; set; }
    
    private DateOnly? _date;
    private readonly PaginationState _pagination = new();
    
    private RequestState _state = RequestState.Done();
    private IReadOnlyCollection<DateSelectorItem> _dateItems = Array.Empty<DateSelectorItem>();
    private IReadOnlyCollection<AssessmentHistoryDto> _items = Array.Empty<AssessmentHistoryDto>();
    private IQueryable<AssessmentHistoryDto> HistoryItems => _items.AsQueryable();
    
    protected override async Task OnParametersSetAsync()
    {
        _dateItems = DateSelectorDataFactory.CreateLongPeriod(Resources);
        _date ??= _dateItems.First().Date;

        await Load(_date.Value);
    }
    
    private async Task Load(DateOnly date)
    {
        _state = await RequestProcessor.Process(
            () => AppraiserService.GetAssessmentHistory(TeamId, date),
            nameof(AppraiserHistoryWidget),
            r =>
            {
                _items = r.Items;
                _state = RequestState.Done();
                StateHasChanged();
            });
    }

    private string GetAssessmentSessionUrl() => LinkBuilder.Build($"assessment-session/{TeamId:N}");
    
    private string MoveToItem(DateOnly date) => LinkBuilder.Build($"assessment-history/{TeamId:N}/{date:yyyy-MM-dd}");

    private async Task Changed(DateOnly date)
    {
        _date = date;
        await Load(_date.Value);
    }
}