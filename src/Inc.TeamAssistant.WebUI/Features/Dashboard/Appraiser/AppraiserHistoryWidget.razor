@inject IStringLocalizer<DashboardResources> Localizer

@if (TeamId.HasValue)
{
    <DashboardWidget HasControls="true" Title="@Localizer["AppraiserHistoryTitle"]">
        <DateSelector Date="Date" Items="DateItems" OnSelected="OnSelected"/>
        <Loading State="State" Retry="Retry">
            <div class="component-container">
                @if (HistoryItems.Any())
                {
                    <QuickGrid Items="HistoryItems" class="quick-data-grid" Pagination="_pagination">
                        <TemplateColumn
                            Title="@Localizer["AssessmentDate"]"
                            Sortable="true"
                            SortBy="GridSort<AssessmentHistoryDto>.ByAscending(t => t.AssessmentDate)">
                            <RouterLink Href="@CreateMoveToHistoryLink(context.AssessmentDate)">
                                @context.AssessmentDate.ToString("dd-MM-yyyy")
                            </RouterLink>
                        </TemplateColumn>
                        <PropertyColumn
                            Title="@Localizer["TotalStories"]"
                            Property="@(t => t.StoriesCount)"
                            Sortable="true"/>
                        <PropertyColumn
                            Title="@Localizer["AssessmentSum"]"
                            Property="@(t => t.AssessmentSum)"
                            Sortable="true"/>
                    </QuickGrid>
                    <Pagination State="_pagination"/>
                }
                else
                {
                    <NoData ComponentStyle="ComponentStyle.Secondary"/>
                }
            </div>
            <div class="component-actions">
                <Button ComponentStyle="ComponentStyle.Secondary" OnClick="MovedToAssessmentSession">
                    @Localizer["GoToCurrentSessionButtonText"]
                </Button>
            </div>
        </Loading>
    </DashboardWidget>
}

@code {
    /// <summary>
    /// Selected team identifier.
    /// </summary>
    [Parameter, EditorRequired]
    public Guid? TeamId { get; set; }
    
    /// <summary>
    /// Selected date.
    /// </summary>
    [Parameter, EditorRequired]
    public DateOnly? Date { get; set; }
    
    /// <summary>
    /// Dates.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyDictionary<string, DateOnly> DateItems { get; set; } = default!;
    
    /// <summary>
    /// Component state.
    /// </summary>
    [Parameter, EditorRequired]
    public LoadingState State { get; set; } = default!;
    
    /// <summary>
    /// Items.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyCollection<AssessmentHistoryDto> Items { get; set; } = default!;
    
    /// <summary>
    /// Link factory.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<string, NavRoute> LinkFactory { get; set; } = default!;
    
    /// <summary>
    /// On click event.
    /// </summary>
    [Parameter]
    public EventCallback MovedToAssessmentSession { get; set; }
    
    /// <summary>
    /// Action for retry.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Task> Retry { get; set; } = default!;
    
    /// <summary>
    /// On selected event
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<DateOnly> OnSelected { get; set; }
    
    private readonly PaginationState _pagination = new();
    private IQueryable<AssessmentHistoryDto> HistoryItems => Items.AsQueryable();
    
    private string CreateMoveToHistoryLink(DateOnly date)
        => LinkFactory($"assessment-history/{TeamId:N}/{date:yyyy-MM-dd}");
}