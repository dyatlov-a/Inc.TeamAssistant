@using Inc.TeamAssistant.Reviewer.Model.Queries.GetLastTasks
@inherits PersistentComponent<LastTasksWidgetViewModel>

@inject IReviewService ReviewService

<QuickGrid Items="GetTasks()" class="quick-data-grid">
    <TemplateColumn Title="@ViewModel.CreatedTitle" Sortable="true">
        @context.Created.ToString("yyyy.MM.dd")
        <br/>
        @context.Created.ToString("HH:mm")
    </TemplateColumn>
    <TemplateColumn Title="@ViewModel.DescriptionTitle" Sortable="false">
        <span title="@context.Description">@Substring(context.Description, 50)</span>
    </TemplateColumn>
    <PropertyColumn Title="@ViewModel.ReviewerNameTitle" Property="@(t => t.ReviewerName)" Sortable="true"/>
    <PropertyColumn Title="@ViewModel.OwnerNameTitle" Property="@(t => t.OwnerName)" Sortable="true"/>
    <PropertyColumn Title="@ViewModel.StateTitle" Property="@(t => t.State)" Sortable="true"/>
</QuickGrid>

@code {
    [Parameter, EditorRequired]
    public Guid TeamId { get; set; }
    
    [Parameter, EditorRequired]
    public int Count { get; set; }
    
    protected override async Task<LastTasksWidgetViewModel> Initialize(Dictionary<string, string> resources)
    {
        var tasks = await ReviewService.GetLast(TeamId, Count);

        return new LastTasksWidgetViewModel(
            resources[Messages.Dashboard_ReviewCreatedTitle],
            resources[Messages.Dashboard_ReviewDescriptionTitle],
            resources[Messages.Dashboard_ReviewReviewerNameTitle],
            resources[Messages.Dashboard_ReviewOwnerNameTitle],
            resources[Messages.Dashboard_ReviewStateTitle],
            tasks.Result.Items);
    }
    
    private IQueryable<TaskForReviewDto> GetTasks() => ViewModel.Tasks.AsQueryable();

    private string Substring(string value, int count) => value.Length <= count
        ? value
        : value.Substring(0, count) + "...";
}