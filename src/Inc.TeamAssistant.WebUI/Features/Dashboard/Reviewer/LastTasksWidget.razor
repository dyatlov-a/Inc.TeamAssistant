@using System.Text
@using Inc.TeamAssistant.Reviewer.Model.Queries.GetLastTasks

@inherits PersistentComponent<LastTasksWidgetViewModel>

@inject IReviewService ReviewService

<DateSelector Date="_date" Items="ViewModel.DateItems" OnSelected="Changed" />

@if (Tasks.Any())
{
    <QuickGrid Items="Tasks" class="quick-data-grid" Pagination="_pagination">
        <TemplateColumn
            Title="@ViewModel.OwnerNameTitle"
            Sortable="true"
            SortBy="GridSort<TaskForReviewDto>.ByAscending(e => e.OwnerName).ThenAscending(e => e.OwnerUserName)">
            @context.OwnerName
            <br/>
            @context.OwnerUserName
        </TemplateColumn>
        <TemplateColumn Title="@ViewModel.DescriptionTitle" Sortable="false">
            <span title="@context.Description" class="hint">
                @context.Description.ToShort()
            </span>
        </TemplateColumn>
        <TemplateColumn
            Title="@ViewModel.ReviewerNameTitle"
            Sortable="true"
            SortBy="GridSort<TaskForReviewDto>.ByAscending(e => e.ReviewerName).ThenAscending(e => e.ReviewerUserName)">
            <span title="@GetReviewerTitle(context)" class="hint">
                @context.ReviewerName
                <br/>
                @context.ReviewerUserName
            </span>
        </TemplateColumn>
        <TemplateColumn
            Title="@ViewModel.StateTitle"
            Sortable="true"
            SortBy="GridSort<TaskForReviewDto>.ByAscending(e => ViewModel.StateLookup[e.State]).ThenAscending(e => e.Created)">
            @context.Created.ToString("yyyy.MM.dd HH:mm")
            <br/>
            @ViewModel.StateLookup[context.State]
        </TemplateColumn>
    </QuickGrid>
    <div class="paginator-container">
        <Paginator State="_pagination" />
    </div>
}
else
{
    <NoData />
}

@code {
    [Parameter, EditorRequired]
    public Guid TeamId { get; set; }
    
    private DateOnly? _date;
    private readonly PaginationState _pagination = new();
    
    private IQueryable<TaskForReviewDto> Tasks => ViewModel.Tasks.AsQueryable();

    private Dictionary<string, string> BuildStateLookup(Dictionary<string, string> resources)
    {
        return new Dictionary<string, string>
        {
            ["None"] = resources[Messages.Dashboard_ReviewStateNone],
            ["New"] = resources[Messages.Dashboard_ReviewStateNew],
            ["InProgress"] = resources[Messages.Dashboard_ReviewStateInProgress],
            ["OnCorrection"] = resources[Messages.Dashboard_ReviewStateOnCorrection],
            ["Accept"] = resources[Messages.Dashboard_ReviewStateAccept]
        };
    }
    
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _date ??= ViewModel.DateItems.First().Date;
    }
    
    protected override async Task<LastTasksWidgetViewModel> Initialize(Dictionary<string, string> resources)
    {
        var dateItems = DateSelectorDataFactory.Create(resources);
        _date ??= dateItems.First().Date;
        var tasks = await ReviewService.GetLast(TeamId, _date.Value);

        return new LastTasksWidgetViewModel(
            resources[Messages.Dashboard_ReviewDescriptionTitle],
            resources[Messages.Dashboard_ReviewReviewerNameTitle],
            resources[Messages.Dashboard_ReviewOwnerNameTitle],
            resources[Messages.Dashboard_ReviewStateTitle],
            resources[Messages.Dashboard_HasConcreteReviewer],
            resources[Messages.Dashboard_IsOriginalReviewer],
            resources[Messages.Constructor_BooleanTrueText],
            resources[Messages.Constructor_BooleanFalseText],
            BuildStateLookup(resources),
            dateItems,
            tasks.Result.Items);
    }
    
    private async Task Changed(DateOnly date)
    {
        _date = date;
        
        await Update();
    }

    private string GetReviewerTitle(TaskForReviewDto task)
    {
        var hasConcreteReviewer = task.HasConcreteReviewer ? ViewModel.BooleanTrueText : ViewModel.BooleanFalseText;
        var isOriginalReviewer = task.IsOriginalReviewer ? ViewModel.BooleanTrueText : ViewModel.BooleanFalseText;
        var builder = new StringBuilder();
        
        builder.AppendLine($"{ViewModel.HasConcreteReviewer} - {hasConcreteReviewer}");
        builder.Append($"{ViewModel.IsOriginalReviewer} - {isOriginalReviewer}");
        
        return builder.ToString();
    }
}