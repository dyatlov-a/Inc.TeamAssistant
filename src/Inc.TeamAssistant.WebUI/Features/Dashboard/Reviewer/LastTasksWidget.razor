@using Inc.TeamAssistant.Reviewer.Model.Queries.GetLastTasks

@inherits PersistentComponent<LastTasksWidgetViewModel>

@inject IReviewService ReviewService

@if (Tasks.Any())
{
    <QuickGrid Items="Tasks" class="quick-data-grid">
        <TemplateColumn
            Title="@ViewModel.OwnerNameTitle"
            Sortable="true"
            SortBy="GridSort<TaskForReviewDto>.ByAscending(e => e.OwnerName).ThenAscending(e => e.OwnerUserName)">
            @context.OwnerName
            <br/>
            @context.OwnerUserName
        </TemplateColumn>
        <TemplateColumn Title="@ViewModel.DescriptionTitle" Sortable="false">
            <span title="@context.Description">@context.Description.ToShort()</span>
        </TemplateColumn>
        <TemplateColumn
            Title="@ViewModel.ReviewerNameTitle"
            Sortable="true"
            SortBy="GridSort<TaskForReviewDto>.ByAscending(e => e.ReviewerName).ThenAscending(e => e.ReviewerUserName)">
            @context.ReviewerName
            <br/>
            @context.ReviewerUserName
        </TemplateColumn>
        <TemplateColumn
            Title="@ViewModel.StateTitle"
            Sortable="true"
            SortBy="GridSort<TaskForReviewDto>.ByAscending(e => ViewModel.StateLookup[e.State]).ThenAscending(e => e.Created)">
            @context.Created.ToString("yyyy.MM.dd HH:mm")
            <br/>
            @ViewModel.StateLookup[context.State]
        </TemplateColumn>
    </QuickGrid>
}
else
{
    <NoData />
}

@code {
    [Parameter, EditorRequired]
    public Guid TeamId { get; set; }
    
    [Parameter, EditorRequired]
    public int Count { get; set; }
    
    protected override async Task<LastTasksWidgetViewModel> Initialize(Dictionary<string, string> resources)
    {
        var tasks = await ReviewService.GetLast(TeamId, Count);

        return new LastTasksWidgetViewModel(
            resources[Messages.Dashboard_ReviewDescriptionTitle],
            resources[Messages.Dashboard_ReviewReviewerNameTitle],
            resources[Messages.Dashboard_ReviewOwnerNameTitle],
            resources[Messages.Dashboard_ReviewStateTitle],
            new Dictionary<string, string>
            {
                ["None"] = resources[Messages.Dashboard_ReviewStateNone],
                ["New"] = resources[Messages.Dashboard_ReviewStateNew],
                ["InProgress"] = resources[Messages.Dashboard_ReviewStateInProgress],
                ["OnCorrection"] = resources[Messages.Dashboard_ReviewStateOnCorrection],
                ["Accept"] = resources[Messages.Dashboard_ReviewStateAccept]
            },
            tasks.Result.Items);
    }

    private IQueryable<TaskForReviewDto> Tasks => ViewModel.Tasks.AsQueryable();
}