@inject IReviewService ReviewService
@inject ResourcesManager Resources
@inject RequestProcessor RequestProcessor
@inject DateSelectorFactory DateSelectorFactory

@if (TeamId.HasValue)
{
    <DashboardWidget
        HasControls="true"
        HasChart="true"
        Title="@Resources[Messages.Dashboard_ReviewTotalStatsWidgetTitle]">
        <Content>
            <DateSelector Date="_date" Items="DateItems" OnSelected="Changed" />
            <Loading State="_state" Retry="Load">
                <Content>
                    <div class="component-container">
                        @if (_formModel.Review.Any())
                        {
                            <div class="review-total-stats">
                                <div class="review-total-stats__item">
                                    <ApexChart
                                        TItem="HistoryByTeamItemDto"
                                        Title="@string.Format(
                                                   Resources[Messages.Dashboard_ReviewByReviewerTemplate],
                                                   _formModel.IntervalInDays)"
                                        Options="ApexChartOptionsBuilder.Build<HistoryByTeamItemDto>()">
                                        <ApexPointSeries TItem="HistoryByTeamItemDto"
                                                         Items="_formModel.Review"
                                                         SeriesType="SeriesType.Donut"
                                                         XValue="@(e => e.PersonName)"
                                                         YValue="@(e => e.Count)"
                                                         OrderByDescending="e => e.Y!"/>
                                    </ApexChart>
                                </div>
                                <div class="review-total-stats__item">
                                    <ApexChart
                                        TItem="HistoryByTeamItemDto"
                                        Title="@string.Format(
                                                   Resources[Messages.Dashboard_ReviewByOwnerTemplate],
                                                   _formModel.IntervalInDays)"
                                        Options="ApexChartOptionsBuilder.Build<HistoryByTeamItemDto>()">
                                        <ApexPointSeries TItem="HistoryByTeamItemDto"
                                                         Items="_formModel.Requests"
                                                         SeriesType="SeriesType.Donut"
                                                         XValue="@(e => e.PersonName)"
                                                         YValue="@(e => e.Count)"
                                                         OrderByDescending="e => e.Y!"/>
                                    </ApexChart>
                                </div>
                            </div>
                        }
                        else
                        {
                            <NoData IsDark="true"/>
                        }
                    </div>
                </Content>
            </Loading>
        </Content>
    </DashboardWidget>
}

@code {
    [Parameter, EditorRequired]
    public Guid BotId { get; set; }
    
    [Parameter, EditorRequired]
    public Guid? TeamId { get; set; }
    
    private DateOnly? _date;

    private LoadingState _state = LoadingState.Done();
    private IReadOnlyDictionary<string, DateOnly> DateItems => DateSelectorFactory.CreateWeeks();
    private readonly ReviewTotalStatsWidgetFormModel _formModel = new();

    protected override async Task OnParametersSetAsync()
    {
        _date ??= DateItems.First().Value;

        await Load();
    }
    
    private async Task Load()
    {
        if (!TeamId.HasValue)
            return;
        
        var date = _date!.Value;

        await RequestProcessor.Process(
            () => ReviewService.GetHistory(TeamId.Value, date),
            nameof(ReviewTotalStatsWidget),
            r =>
            {
                _formModel.Apply(r, date);
            },
            s =>
            {
                _state = s;
                StateHasChanged();
            });
    }

    private async Task Changed(DateOnly date)
    {
        _date = date;
        
        await Load();
    }
}