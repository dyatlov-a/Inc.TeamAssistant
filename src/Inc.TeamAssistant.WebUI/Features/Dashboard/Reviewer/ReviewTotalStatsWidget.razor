@using Inc.TeamAssistant.Reviewer.Model.Queries.GetHistoryByTeam

@inject IReviewService ReviewService
@inject ResourcesManager Resources
@inject RequestProcessor RequestProcessor
@inject IRenderContext RenderContext

<Loading State="_state">
    <Content>
        <DateSelector Date="_date" Items="_dateItems" OnSelected="Changed" />
        @if (_formModel.Review.Any())
        {
            <div class="review-total-stats">
                <div class="review-total-stats__item">
                    <ApexChart
                        TItem="HistoryByTeamItemDto"
                        Title="@string.Format(Resources[Messages.Dashboard_ReviewByReviewerTemplate], _formModel.IntervalInDays)"
                        Options="ApexChartOptionsBuilder.Build<HistoryByTeamItemDto>()"
                        @ref="_reviewChart">
                        <ApexPointSeries TItem="HistoryByTeamItemDto"
                                         Items="_formModel.Review"
                                         SeriesType="SeriesType.Donut"
                                         XValue="@(e => e.PersonName)"
                                         YValue="@(e => e.Count)"
                                         OrderByDescending="e => e.Y!"/>
                    </ApexChart>
                </div>
                <div class="review-total-stats__item">
                    <ApexChart
                        TItem="HistoryByTeamItemDto"
                        Title="@string.Format(Resources[Messages.Dashboard_ReviewByOwnerTemplate], _formModel.IntervalInDays)"
                        Options="ApexChartOptionsBuilder.Build<HistoryByTeamItemDto>()"
                        @ref="_requestsChart">
                        <ApexPointSeries TItem="HistoryByTeamItemDto"
                                         Items="_formModel.Requests"
                                         SeriesType="SeriesType.Donut"
                                         XValue="@(e => e.PersonName)"
                                         YValue="@(e => e.Count)"
                                         OrderByDescending="e => e.Y!"/>
                    </ApexChart>
                </div>
            </div>
        }
        else
        {
            <NoData/>
        }
    </Content>
</Loading>

@code {
    [Parameter, EditorRequired]
    public Guid TeamId { get; set; }
    
    private DateOnly? _date;
    private ApexChart<HistoryByTeamItemDto>? _reviewChart;
    private ApexChart<HistoryByTeamItemDto>? _requestsChart;

    private RequestState _state = RequestState.Done();
    private IReadOnlyCollection<DateSelectorItem> _dateItems = Array.Empty<DateSelectorItem>();
    private ReviewTotalStatsWidgetFormModel _formModel = new();

    protected override async Task OnParametersSetAsync()
    {
        _dateItems = DateSelectorDataFactory.Create(Resources);
        _date ??= _dateItems.First().Date;

        await Load(_date.Value);
    }
    
    private async Task Load(DateOnly date)
    {
        _state = await RequestProcessor.Process(
            async () =>
            {
                var interval = DateTimeOffset.UtcNow - new DateTimeOffset(date, TimeOnly.MinValue, TimeSpan.Zero);
                var getHistory = await ReviewService.GetHistory(TeamId, date);
                
                return new ReviewTotalStatsWidgetFormModel
                {
                    IntervalInDays = (int)interval.TotalDays,
                    Review = getHistory.Review,
                    Requests = getHistory.Requests
                };
            },
            nameof(ReviewTotalStatsWidget),
            r =>
            {
                _formModel = r;
                _state = RequestState.Done();
                StateHasChanged();
                RenderContext.RenderChart(_reviewChart);
                RenderContext.RenderChart(_requestsChart);
            });
    }

    private async Task Changed(DateOnly date)
    {
        _date = date;
        
        await Load(_date.Value);
    }
}