@using Inc.TeamAssistant.Reviewer.Model.Queries.GetHistoryByTeam
@using Inc.TeamAssistant.WebUI.Services.ClientCore

@inherits PersistentComponent<ReviewTotalStatsWidgetViewModel>

@inject IReviewService ReviewService

@if (ViewModel.Review.Any())
{
    <div class="review-total-stats">
        <div class="review-total-stats__item">
            <ApexChart
                TItem="HistoryByTeamItemDto"
                Title="@ViewModel.ReviewByReviewer"
                Options="ApexChartOptionsBuilder.Build<HistoryByTeamItemDto>()"
                @ref="_reviewChart">
                <ApexPointSeries TItem="HistoryByTeamItemDto"
                                 Items="ViewModel.Review"
                                 SeriesType="SeriesType.Donut"
                                 XValue="@(e => e.PersonName)"
                                 YValue="@(e => e.Count)"
                                 OrderByDescending="e => e.Y!" />
            </ApexChart>
        </div>
        <div class="review-total-stats__item">
            <ApexChart
                TItem="HistoryByTeamItemDto"
                Title="@ViewModel.ReviewByOwner"
                Options="ApexChartOptionsBuilder.Build<HistoryByTeamItemDto>()"
                @ref="_requestsChart">
                <ApexPointSeries TItem="HistoryByTeamItemDto"
                                 Items="ViewModel.Requests"
                                 SeriesType="SeriesType.Donut"
                                 XValue="@(e => e.PersonName)"
                                 YValue="@(e => e.Count)"
                                 OrderByDescending="e => e.Y!" />
            </ApexChart>
        </div>
    </div>
}
else
{
    <NoData />
}

@code {
    [Parameter, EditorRequired]
    public Guid TeamId { get; set; }
    
    [Parameter, EditorRequired]
    public int Depth { get; set; }

    private ApexChart<HistoryByTeamItemDto>? _reviewChart;
    private ApexChart<HistoryByTeamItemDto>? _requestsChart;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _reviewChart?.RenderAsync();
        _requestsChart?.RenderAsync();
    }

    protected override async Task<ReviewTotalStatsWidgetViewModel> Initialize(Dictionary<string, string> resources)
    {
        var history = await ReviewService.GetHistory(TeamId, Depth);

        return new ReviewTotalStatsWidgetViewModel(
            string.Format(resources[Messages.Dashboard_ReviewByReviewerTemplate], Depth),
            string.Format(resources[Messages.Dashboard_ReviewByOwnerTemplate], Depth),
            history.Result.Review,
            history.Result.Requests);
    }
}