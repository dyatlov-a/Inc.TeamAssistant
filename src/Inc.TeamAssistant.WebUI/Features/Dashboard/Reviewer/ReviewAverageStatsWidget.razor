@using Inc.TeamAssistant.Reviewer.Model.Queries.GetAverageByTeam

@inject IReviewService ReviewService
@inject ResourcesManager Resources
@inject RequestProcessor RequestProcessor
@inject IRenderContext RenderContext

<Loading State="_state">
    <Content>
        <div class="component-container">
            <DateSelector Date="_date" Items="_dateItems" OnSelected="Changed"/>
            @if (_items.Any())
            {
                <ApexChart
                    TItem="ReviewAverageStatsDto"
                    Title="@Resources[Messages.Dashboard_ReviewAverageStatsTitle]"
                    Options="ApexChartOptionsBuilder.Build<ReviewAverageStatsDto>(c => c.DisableToolbar())"
                    FormatYAxisLabel="@(y => y.ToString("N1"))"
                    @ref="_chart">
                    <ApexPointSeries
                        TItem="ReviewAverageStatsDto"
                        Items="_items"
                        SeriesType="@SeriesType.Area"
                        Name="@Resources[Messages.Dashboard_ReviewAverageFirstTouch]"
                        XValue="@(e => e.Created)"
                        YValue="@(e => (decimal)e.FirstTouch.TotalMinutes)"/>
                    <ApexPointSeries
                        TItem="ReviewAverageStatsDto"
                        Items="_items"
                        SeriesType="@SeriesType.Area"
                        Name="@Resources[Messages.Dashboard_ReviewAverageReview]"
                        XValue="@(e => e.Created)"
                        YValue="@(e => (decimal)e.Review.TotalMinutes)"/>
                    <ApexPointSeries
                        TItem="ReviewAverageStatsDto"
                        Items="_items"
                        SeriesType="@SeriesType.Area"
                        Name="@Resources[Messages.Dashboard_ReviewAverageCorrection]"
                        XValue="@(e => e.Created)"
                        YValue="@(e => (decimal)e.Correction.TotalMinutes)"/>
                </ApexChart>
            }
            else
            {
                <NoData/>
            }
        </div>
    </Content>
</Loading>

@code {
    [Parameter, EditorRequired]
    public Guid TeamId { get; set; }
    
    private DateOnly? _date;
    private ApexChart<ReviewAverageStatsDto>? _chart;

    private RequestState _state = RequestState.Done();
    private IReadOnlyCollection<DateSelectorItem> _dateItems = Array.Empty<DateSelectorItem>();
    private IReadOnlyCollection<ReviewAverageStatsDto> _items = Array.Empty<ReviewAverageStatsDto>();

    protected override async Task OnParametersSetAsync()
    {
        _dateItems = DateSelectorDataFactory.CreateLongPeriod(Resources);
        _date ??= _dateItems.First().Date;

        await Load(_date.Value);
    }
    
    private async Task Load(DateOnly date)
    {
        _state = await RequestProcessor.Process(
            () => ReviewService.GetAverage(TeamId, date),
            nameof(ReviewAverageStatsWidget),
            r =>
            {
                _items = r.Items;
                _state = RequestState.Done();
                StateHasChanged();
            });
    }

    private async Task Changed(DateOnly date)
    {
        _date = date;
        
        await Load(_date.Value);
    }
}