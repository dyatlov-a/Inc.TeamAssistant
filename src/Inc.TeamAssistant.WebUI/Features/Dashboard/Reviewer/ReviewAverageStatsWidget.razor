@inject IReviewService ReviewService
@inject IStringLocalizer<DashboardResources> Localizer
@inject RequestProcessor RequestProcessor
@inject DateSelectorFactory DateSelectorFactory

@if (TeamId.HasValue)
{
    <DashboardWidget
        HasControls="true"
        HasChart="true"
        Title="@Localizer["ReviewAverageStatsWidgetTitle"].Value">
        <Content>
            <DateSelector Date="_date" Items="DateItems" OnSelected="Changed"/>
            <Loading State="_state" Retry="Load">
                <Content>
                    <div class="component-container">
                        @if (_items.Any())
                        {
                            <ApexChart
                                TItem="ReviewAverageStatsDto"
                                Title="@Localizer["ReviewAverageStatsTitle"].Value"
                                Options="ApexChartOptionsBuilder.Build<ReviewAverageStatsDto>(c => c.DisableToolbar())"
                                FormatYAxisLabel="@(y => y.ToString("N1"))">
                                <ApexPointSeries
                                    TItem="ReviewAverageStatsDto"
                                    Items="_items"
                                    SeriesType="@SeriesType.Area"
                                    Name="@Localizer["ReviewAverageFirstTouch"].Value"
                                    XValue="@(e => e.Created)"
                                    YValue="@(e => (decimal)e.FirstTouch.TotalMinutes)"/>
                                <ApexPointSeries
                                    TItem="ReviewAverageStatsDto"
                                    Items="_items"
                                    SeriesType="@SeriesType.Area"
                                    Name="@Localizer["ReviewAverageReview"].Value"
                                    XValue="@(e => e.Created)"
                                    YValue="@(e => (decimal)e.Review.TotalMinutes)"/>
                                <ApexPointSeries
                                    TItem="ReviewAverageStatsDto"
                                    Items="_items"
                                    SeriesType="@SeriesType.Area"
                                    Name="@Localizer["ReviewAverageCorrection"].Value"
                                    XValue="@(e => e.Created)"
                                    YValue="@(e => (decimal)e.Correction.TotalMinutes)"/>
                            </ApexChart>
                        }
                        else
                        {
                            <NoData ComponentStyle="ComponentStyle.Secondary"/>
                        }
                    </div>
                </Content>
            </Loading>
        </Content>
    </DashboardWidget>
}

@code {
    [Parameter, EditorRequired]
    public Guid? BotId { get; set; }
    
    [Parameter, EditorRequired]
    public Guid? TeamId { get; set; }
    
    private DateOnly? _date;

    private LoadingState _state = LoadingState.Done();
    private IReadOnlyDictionary<string, DateOnly> DateItems => DateSelectorFactory.CreateWeeks();
    private IReadOnlyCollection<ReviewAverageStatsDto> _items = Array.Empty<ReviewAverageStatsDto>();

    protected override async Task OnParametersSetAsync()
    {
        _date ??= DateItems.First().Value;

        await Load();
    }
    
    private async Task Load()
    {
        if (!TeamId.HasValue)
            return;
        
        await RequestProcessor.Process(
            () => ReviewService.GetAverage(TeamId.Value, _date!.Value),
            nameof(ReviewAverageStatsWidget),
            r => _items = r.Items,
            s =>
            {
                _state = s;
                StateHasChanged();
            });
    }

    private async Task Changed(DateOnly date)
    {
        _date = date;
        
        await Load();
    }
}