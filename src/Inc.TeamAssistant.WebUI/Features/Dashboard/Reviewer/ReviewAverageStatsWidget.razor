@using Inc.TeamAssistant.Reviewer.Model.Queries.GetAverageByTeam
@using Inc.TeamAssistant.WebUI.Services.ClientCore

@inherits PersistentComponent<ReviewAverageStatsWidgetViewModel>

@inject IReviewService ReviewService

@if (ViewModel.Items.Any())
{
    <ApexChart TItem="ReviewAverageStatsDto"
               Title="@ViewModel.Title"
               Options="ApexChartOptionsBuilder.Build<ReviewAverageStatsDto>(c => c.DisableToolbar())"
               FormatYAxisLabel="@(y => y.ToString("N2"))"
               @ref="_chart">
        <ApexPointSeries TItem="ReviewAverageStatsDto"
                         Items="ViewModel.Items"
                         SeriesType="@SeriesType.Area"
                         Name="@ViewModel.FirstTouch"
                         XValue="@(e => e.Created)"
                         YValue="@(e => (decimal)e.FirstTouch.TotalMinutes)" />
        <ApexPointSeries TItem="ReviewAverageStatsDto"
                         Items="ViewModel.Items"
                         SeriesType="@SeriesType.Area"
                         Name="@ViewModel.Review"
                         XValue="@(e => e.Created)"
                         YValue="@(e => (decimal)e.Review.TotalMinutes)" />
        <ApexPointSeries TItem="ReviewAverageStatsDto"
                         Items="ViewModel.Items"
                         SeriesType="@SeriesType.Area"
                         Name="@ViewModel.Correction"
                         XValue="@(e => e.Created)"
                         YValue="@(e => (decimal)e.Correction.TotalMinutes)" />
    </ApexChart>
}
else
{
    <NoData />
}

@code {
    [Parameter, EditorRequired]
    public Guid TeamId { get; set; }
    
    [Parameter, EditorRequired]
    public int Depth { get; set; }
    
    private ApexChart<ReviewAverageStatsDto>? _chart;
    
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _chart?.RenderAsync();
    }
    
    protected override async Task<ReviewAverageStatsWidgetViewModel> Initialize(Dictionary<string, string> resources)
    {
        var averageMetrics = await ReviewService.GetAverage(TeamId, Depth);

        return new(
            resources[Messages.Dashboard_ReviewAverageStatsTitle],
            resources[Messages.Dashboard_ReviewAverageFirstTouch],
            resources[Messages.Dashboard_ReviewAverageReview],
            resources[Messages.Dashboard_ReviewAverageCorrection],
            averageMetrics.Result.Items);
    }
}