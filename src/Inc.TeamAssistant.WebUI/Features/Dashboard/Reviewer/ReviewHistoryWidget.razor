@using System.Text
@using Inc.TeamAssistant.Reviewer.Model.Queries.GetLastTasks

@inject IReviewService ReviewService
@inject ResourcesManager Resources
@inject RequestProcessor RequestProcessor
@inject DateSelectorFactory DateSelectorFactory

<DateSelector Date="_date" Items="DateItems" OnSelected="Changed"/>
<Loading State="_state" Retry="Load">
    <Content>
        <div class="component-container">
            @if (Tasks.Any())
            {
                <QuickGrid Items="Tasks" class="quick-data-grid" Pagination="_pagination">
                    <TemplateColumn
                        Title="@Resources[Messages.Dashboard_ReviewOwnerNameTitle]"
                        Sortable="true"
                        SortBy="GridSort<TaskForReviewDto>.ByAscending(e => e.OwnerName).ThenAscending(e => e.OwnerUserName)">
                        @context.OwnerName
                        <br/>
                        @context.OwnerUserName
                    </TemplateColumn>
                    <TemplateColumn Title="@Resources[Messages.Dashboard_ReviewDescriptionTitle]" Sortable="false">
                        <span title="@context.Description" class="hint">
                            @context.Description.ToShort()
                        </span>
                    </TemplateColumn>
                    <TemplateColumn
                        Title="@Resources[Messages.Dashboard_ReviewReviewerNameTitle]"
                        Sortable="true"
                        SortBy="GridSort<TaskForReviewDto>.ByAscending(e => e.ReviewerName).ThenAscending(e => e.ReviewerUserName)">
                        <span title="@GetReviewerTitle(context)" class="hint">
                            @context.ReviewerName
                            <br/>
                            @context.ReviewerUserName
                        </span>
                    </TemplateColumn>
                    <TemplateColumn
                        Title="@Resources[Messages.Dashboard_ReviewStateTitle]"
                        Sortable="true"
                        SortBy="GridSort<TaskForReviewDto>.ByAscending(e => StateLookup[e.State]).ThenAscending(e => e.Created)">
                        @context.Created.ToString("yyyy.MM.dd HH:mm")
                        <br/>
                        @StateLookup[context.State]
                    </TemplateColumn>
                    <TemplateColumn
                        Title="@Resources[Messages.Dashboard_ReviewStats]"
                        Sortable="true"
                        SortBy="GridSort<TaskForReviewDto>.ByAscending(e => e.FirstTouch + e.Correction + e.Review)">
                        <span class="task__time hint" title="@Resources[Messages.Dashboard_FirstTouch]">
                            @ConvertToString(context.FirstTouch)FT
                        </span>
                        <br/>
                        <span class="task__time hint" title="@CorrectionTitle(context)">
                            @ConvertToString(context.Correction)C
                        </span>
                        <br/>
                        <span class="task__time hint" title="@Resources[Messages.Dashboard_Review]">
                            @ConvertToString(context.Review)R
                        </span>
                    </TemplateColumn>
                </QuickGrid>
                <Pagination State="_pagination"/>
            }
            else
            {
                <NoData IsDark="true"/>
            }
        </div>
    </Content>
</Loading>

@code {
    [Parameter, EditorRequired]
    public Guid TeamId { get; set; }
    
    private IReadOnlyDictionary<string, string> StateLookup => new Dictionary<string, string>
    {
        ["None"] = Resources[Messages.Dashboard_ReviewStateNone],
        ["New"] = Resources[Messages.Dashboard_ReviewStateNew],
        ["InProgress"] = Resources[Messages.Dashboard_ReviewStateInProgress],
        ["OnCorrection"] = Resources[Messages.Dashboard_ReviewStateOnCorrection],
        ["Accept"] = Resources[Messages.Dashboard_ReviewStateAccept]
    };

    private DateOnly? _date;
    private readonly PaginationState _pagination = new();
    private LoadingState _state = LoadingState.Done();
    private IReadOnlyCollection<SelectItem<DateOnly>> DateItems => DateSelectorFactory.CreateShortPeriods();
    private IReadOnlyCollection<TaskForReviewDto> _tasks = Array.Empty<TaskForReviewDto>();
    private IQueryable<TaskForReviewDto> Tasks => _tasks.AsQueryable();
    
    protected override async Task OnParametersSetAsync()
    {
        _date ??= DateItems.First().Value;

        await Load();
    }
    
    private async Task Load()
    {
        await RequestProcessor.Process(
            () => ReviewService.GetLast(TeamId, _date!.Value),
            nameof(ReviewHistoryWidget),
            r => _tasks = r.Items,
            s =>
            {
                _state = s;
                StateHasChanged();
            });
    }
    
    private async Task Changed(DateOnly date)
    {
        _date = date;
        
        await Load();
    }

    private string GetReviewerTitle(TaskForReviewDto task)
    {
        var hasConcreteReviewer = task.HasConcreteReviewer
            ? Resources[Messages.Constructor_BooleanTrueText]
            : Resources[Messages.Constructor_BooleanFalseText];
        var isOriginalReviewer = task.IsOriginalReviewer
            ? Resources[Messages.Constructor_BooleanFalseText]
            : Resources[Messages.Constructor_BooleanTrueText];
        var builder = new StringBuilder();
        
        builder.AppendLine($"{Resources[Messages.Dashboard_HasConcreteReviewer]} - {hasConcreteReviewer}");
        builder.Append($"{Resources[Messages.Dashboard_IsOriginalReviewer]} - {isOriginalReviewer}");
        
        return builder.ToString();
    }

    private string ConvertToString(TimeSpan value)
    { 
        const string timeFormat = @"d\.hh\:mm\:ss";

        return value.ToString(timeFormat);
    }

    private string CorrectionTitle(TaskForReviewDto task)
    {
        return task.Iterations == 0
            ? Resources[Messages.Dashboard_Correction]
            : $"{Resources[Messages.Dashboard_Correction]} ({task.Iterations})";
    }
}