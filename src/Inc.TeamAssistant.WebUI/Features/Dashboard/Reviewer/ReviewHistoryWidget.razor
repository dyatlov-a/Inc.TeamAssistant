@inject IStringLocalizer<DashboardResources> Localizer

@if (TeamId.HasValue)
{
    <DashboardWidget
        HasControls="true"
        Title="@Localizer["LastTasksWidgetTitle"]">
        <DateSelector Date="Date" Items="DateItems" OnSelected="OnSelected"/>
        <Loading State="State" Retry="Retry">
            <div class="component-container">
                @if (Tasks.Any())
                {
                    <QuickGrid Items="Tasks" class="quick-data-grid" Pagination="_pagination">
                        <TemplateColumn
                            Title="@Localizer["ReviewOwnerNameTitle"]"
                            Sortable="true"
                            SortBy="GridSort<TaskForReviewDto>.ByAscending(e => e.OwnerName).ThenAscending(e => e.OwnerUserName)">
                            @context.OwnerName
                            <br/>
                            @context.OwnerUserName
                        </TemplateColumn>
                        <TemplateColumn Title="@Localizer["ReviewDescriptionTitle"]" Sortable="false">
                            <span title="@ToDescription(context)" class="hint">
                                @context.Description.ToShort()
                            </span>
                        </TemplateColumn>
                        <TemplateColumn
                            Title="@Localizer["ReviewReviewerNameTitle"]"
                            Sortable="true"
                            SortBy="GridSort<TaskForReviewDto>.ByAscending(e => e.ReviewerName).ThenAscending(e => e.ReviewerUserName)">
                            <span title="@ToReviewerTitle(context)" class="hint">
                                @context.ReviewerName
                                <br/>
                                @context.ReviewerUserName
                            </span>
                        </TemplateColumn>
                        <TemplateColumn
                            Title="@Localizer["ReviewStateTitle"]"
                            Sortable="true"
                            SortBy="GridSort<TaskForReviewDto>.ByAscending(e => StateLookup[e.State]).ThenAscending(e => e.Created)">
                            @context.Created.ToString("yyyy.MM.dd HH:mm")
                            <br/>
                            @StateLookup[context.State]
                        </TemplateColumn>
                        <TemplateColumn
                            Title="@Localizer["ReviewStats"]"
                            Sortable="true"
                            SortBy="GridSort<TaskForReviewDto>.ByAscending(e => e.TotalTime)">
                            <span class="task__time hint" title="@FirstTouchTitle()">
                                @ConvertToString(context.FirstTouch)FT
                            </span>
                            <br/>
                            <span class="task__time hint" title="@CorrectionTitle(context)">
                                @ConvertToString(context.Correction)C
                            </span>
                            <br/>
                            <span class="task__time hint" title="@ReviewTitle()">
                                @ConvertToString(context.Review)R
                            </span>
                        </TemplateColumn>
                    </QuickGrid>
                    <Pagination State="_pagination"/>
                }
                else
                {
                    <NoData ComponentStyle="ComponentStyle.Secondary"/>
                }
            </div>
        </Loading>
    </DashboardWidget>
}

@code {
    /// <summary>
    /// Selected team identifier.
    /// </summary>
    [Parameter, EditorRequired]
    public Guid? TeamId { get; set; }
    
    /// <summary>
    /// Selected date.
    /// </summary>
    [Parameter, EditorRequired]
    public DateOnly? Date { get; set; }
    
    /// <summary>
    /// Dates.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyDictionary<string, DateOnly> DateItems { get; set; } = default!;
    
    /// <summary>
    /// Component state.
    /// </summary>
    [Parameter, EditorRequired]
    public LoadingState State { get; set; } = default!;
    
    /// <summary>
    /// Items.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyCollection<TaskForReviewDto> Items { get; set; } = default!;
    
    /// <summary>
    /// Action for retry.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Task> Retry { get; set; } = default!;
    
    /// <summary>
    /// On selected event
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<DateOnly> OnSelected { get; set; }
    
    private readonly PaginationState _pagination = new() { ItemsPerPage = 8 };
    private IReadOnlyDictionary<string, string> StateLookup => new Dictionary<string, string>
    {
        ["New"] = Localizer["TaskForReviewStateNew"],
        ["InProgress"] = Localizer["TaskForReviewStateInProgress"],
        ["OnCorrection"] = Localizer["TaskForReviewStateOnCorrection"],
        ["FirstAccept"] = Localizer["TaskForReviewStateFirstAccept"],
        ["Accept"] = Localizer["TaskForReviewStateAccept"],
        ["AcceptWithComments"] = Localizer["TaskForReviewStateAcceptWithComments"]
    };
    private IQueryable<TaskForReviewDto> Tasks => Items.AsQueryable();

    private string ToReviewerTitle(TaskForReviewDto task)
    {
        var hasConcreteReviewer = task.HasConcreteReviewer
            ? Localizer["BooleanTrueText"]
            : Localizer["BooleanFalseText"];
        var hasReassign = task.HasReassign
            ? Localizer["BooleanTrueText"]
            : Localizer["BooleanFalseText"];
        var builder = new StringBuilder();
        
        builder.AppendLine($"{Localizer["HasConcreteReviewer"]} - {hasConcreteReviewer}");
        builder.Append($"{Localizer["HasReassign"]} - {hasReassign}");
        
        return builder.ToString();
    }
    
    private string ToDescription(TaskForReviewDto task)
    {
        var builder = new StringBuilder();

        builder.Append(task.Description);
        if (task.Comments.Any())
        {
            builder.AppendLine();
            builder.Append(Localizer["ReviewComments"]);
            foreach (var comment in task.Comments)
            {
                builder.AppendLine();
                builder.Append(comment);
            }
        }
        
        return builder.ToString();
    }

    private string ConvertToString(TimeSpan value) => value.ToLongTime();
    
    private string FirstTouchTitle()
    {
        var builder = new StringBuilder();

        builder.AppendLine(Localizer["FirstTouch"]);
        builder.Append(Localizer["FirstTouchHelp"]);
        
        return builder.ToString();
    }

    private string CorrectionTitle(TaskForReviewDto task)
    {
        var builder = new StringBuilder();

        builder.AppendLine(task.Iterations == 0
            ? Localizer["Correction"]
            : $"{Localizer["Correction"]} ({task.Iterations})");
        builder.Append(Localizer["CorrectionHelp"]);
        
        return builder.ToString();
    }
    
    private string ReviewTitle()
    {
        var builder = new StringBuilder();

        builder.AppendLine(Localizer["Review"]);
        builder.Append(Localizer["ReviewHelp"]);
        
        return builder.ToString();
    }
}