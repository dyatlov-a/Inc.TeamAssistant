@inject IReviewService ReviewService
@inject IStringLocalizer<DashboardResources> Localizer
@inject RequestProcessor RequestProcessor
@inject DateSelectorFactory DateSelectorFactory

@if (TeamId.HasValue)
{
    <DashboardWidget
        HasControls="true"
        Title="@Localizer["LastTasksWidgetTitle"].Value">
        <Content>
            <DateSelector Date="_date" Items="DateItems" OnSelected="Changed"/>
            <Loading State="_state" Retry="Load">
                <Content>
                    <div class="component-container">
                        @if (Tasks.Any())
                        {
                            <QuickGrid Items="Tasks" class="quick-data-grid" Pagination="_pagination">
                                <TemplateColumn
                                    Title="@Localizer["ReviewOwnerNameTitle"].Value"
                                    Sortable="true"
                                    SortBy="GridSort<TaskForReviewDto>.ByAscending(e => e.OwnerName).ThenAscending(e => e.OwnerUserName)">
                                    @context.OwnerName
                                    <br/>
                                    @context.OwnerUserName
                                </TemplateColumn>
                                <TemplateColumn Title="@Localizer["ReviewDescriptionTitle"].Value" Sortable="false">
                                    <span title="@context.Description" class="hint">
                                        @context.Description.ToShort()
                                    </span>
                                </TemplateColumn>
                                <TemplateColumn
                                    Title="@Localizer["ReviewReviewerNameTitle"].Value"
                                    Sortable="true"
                                    SortBy="GridSort<TaskForReviewDto>.ByAscending(e => e.ReviewerName).ThenAscending(e => e.ReviewerUserName)">
                                    <span title="@GetReviewerTitle(context)" class="hint">
                                        @context.ReviewerName
                                        <br/>
                                        @context.ReviewerUserName
                                    </span>
                                </TemplateColumn>
                                <TemplateColumn
                                    Title="@Localizer["ReviewStateTitle"].Value"
                                    Sortable="true"
                                    SortBy="GridSort<TaskForReviewDto>.ByAscending(e => StateLookup[e.State]).ThenAscending(e => e.Created)">
                                    @context.Created.ToString("yyyy.MM.dd HH:mm")
                                    <br/>
                                    @StateLookup[context.State]
                                </TemplateColumn>
                                <TemplateColumn
                                    Title="@Localizer["ReviewStats"].Value"
                                    Sortable="true"
                                    SortBy="GridSort<TaskForReviewDto>.ByAscending(e => e.TotalTime)">
                                    <span class="task__time hint" title="@FirstTouchTitle()">
                                        @ConvertToString(context.FirstTouch)FT
                                    </span>
                                    <br/>
                                    <span class="task__time hint" title="@CorrectionTitle(context)">
                                        @ConvertToString(context.Correction)C
                                    </span>
                                    <br/>
                                    <span class="task__time hint" title="@ReviewTitle()">
                                        @ConvertToString(context.Review)R
                                    </span>
                                </TemplateColumn>
                            </QuickGrid>
                            <Pagination State="_pagination"/>
                        }
                        else
                        {
                            <NoData ComponentStyle="ComponentStyle.Secondary"/>
                        }
                    </div>
                </Content>
            </Loading>
        </Content>
    </DashboardWidget>
}

@code {
    [Parameter, EditorRequired]
    public Guid BotId { get; set; }
    
    [Parameter, EditorRequired]
    public Guid? TeamId { get; set; }
    
    private IReadOnlyDictionary<string, string> StateLookup => new Dictionary<string, string>
    {
        ["None"] = Localizer["ReviewStateNone"].Value,
        ["New"] = Localizer["ReviewStateNew"].Value,
        ["InProgress"] = Localizer["ReviewStateInProgress"].Value,
        ["OnCorrection"] = Localizer["ReviewStateOnCorrection"].Value,
        ["Accept"] = Localizer["ReviewStateAccept"].Value
    };

    private DateOnly? _date;
    private readonly PaginationState _pagination = new() { ItemsPerPage = 8 };
    private LoadingState _state = LoadingState.Done();
    private IReadOnlyDictionary<string, DateOnly> DateItems => DateSelectorFactory.CreateWeeks();
    private IReadOnlyCollection<TaskForReviewDto> _tasks = Array.Empty<TaskForReviewDto>();
    private IQueryable<TaskForReviewDto> Tasks => _tasks.AsQueryable();
    
    protected override async Task OnParametersSetAsync()
    {
        _date ??= DateItems.First().Value;

        await Load();
    }
    
    private async Task Load()
    {
        if (!TeamId.HasValue)
            return;
        
        await RequestProcessor.Process(
            () => ReviewService.GetLast(TeamId.Value, _date!.Value),
            nameof(ReviewHistoryWidget),
            r => _tasks = r.Items,
            s =>
            {
                _state = s;
                StateHasChanged();
            });
    }
    
    private async Task Changed(DateOnly date)
    {
        _date = date;
        
        await Load();
    }

    private string GetReviewerTitle(TaskForReviewDto task)
    {
        var hasConcreteReviewer = task.HasConcreteReviewer
            ? Localizer["BooleanTrueText"].Value
            : Localizer["BooleanFalseText"].Value;
        var isOriginalReviewer = task.IsOriginalReviewer
            ? Localizer["BooleanFalseText"].Value
            : Localizer["BooleanTrueText"].Value;
        var builder = new StringBuilder();
        
        builder.AppendLine($"{Localizer["HasConcreteReviewer"].Value} - {hasConcreteReviewer}");
        builder.Append($"{Localizer["IsOriginalReviewer"].Value} - {isOriginalReviewer}");
        
        return builder.ToString();
    }

    private string ConvertToString(TimeSpan value) => value.ToString(GlobalSettings.TimeFormat);
    
    private string FirstTouchTitle()
    {
        var builder = new StringBuilder();

        builder.AppendLine(Localizer["FirstTouch"].Value);
        builder.Append(Localizer["FirstTouchHelp"].Value);
        
        return builder.ToString();
    }

    private string CorrectionTitle(TaskForReviewDto task)
    {
        var builder = new StringBuilder();

        builder.AppendLine(task.Iterations == 0
            ? Localizer["Correction"].Value
            : $"{Localizer["Correction"].Value} ({task.Iterations})");
        builder.Append(Localizer["CorrectionHelp"].Value);
        
        return builder.ToString();
    }
    
    private string ReviewTitle()
    {
        var builder = new StringBuilder();

        builder.AppendLine(Localizer["Review"].Value);
        builder.Append(Localizer["ReviewHelp"].Value);
        
        return builder.ToString();
    }
}