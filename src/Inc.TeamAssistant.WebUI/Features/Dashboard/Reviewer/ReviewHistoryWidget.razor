@using System.Text
@using Inc.TeamAssistant.Reviewer.Model.Queries.GetLastTasks

@inject IReviewService ReviewService
@inject ResourcesManager Resources
@inject RequestProcessor RequestProcessor

<Loading State="_state">
    <Content>
        <DateSelector Date="_date" Items="_dateItems" OnSelected="Changed" />
        @if (Tasks.Any())
        {
            <QuickGrid Items="Tasks" class="quick-data-grid" Pagination="_pagination">
                <TemplateColumn
                    Title="@Resources[Messages.Dashboard_ReviewOwnerNameTitle]"
                    Sortable="true"
                    SortBy="GridSort<TaskForReviewDto>.ByAscending(e => e.OwnerName).ThenAscending(e => e.OwnerUserName)">
                    @context.OwnerName
                    <br/>
                    @context.OwnerUserName
                </TemplateColumn>
                <TemplateColumn Title="@Resources[Messages.Dashboard_ReviewDescriptionTitle]" Sortable="false">
                    <span title="@context.Description" class="hint">
                        @context.Description.ToShort()
                    </span>
                </TemplateColumn>
                <TemplateColumn
                    Title="@Resources[Messages.Dashboard_ReviewReviewerNameTitle]"
                    Sortable="true"
                    SortBy="GridSort<TaskForReviewDto>.ByAscending(e => e.ReviewerName).ThenAscending(e => e.ReviewerUserName)">
                    <span title="@GetReviewerTitle(context)" class="hint">
                        @context.ReviewerName
                        <br/>
                        @context.ReviewerUserName
                    </span>
                </TemplateColumn>
                <TemplateColumn
                    Title="@Resources[Messages.Dashboard_ReviewStateTitle]"
                    Sortable="true"
                    SortBy="GridSort<TaskForReviewDto>.ByAscending(e => StateLookup[e.State]).ThenAscending(e => e.Created)">
                    @context.Created.ToString("yyyy.MM.dd HH:mm")
                    <br/>
                    @StateLookup[context.State]
                </TemplateColumn>
            </QuickGrid>
            <div class="paginator-container">
                <Paginator State="_pagination"/>
            </div>
        }
        else
        {
            <NoData/>
        }
    </Content>
</Loading>

@code {
    [Parameter, EditorRequired]
    public Guid TeamId { get; set; }
    
    private IReadOnlyDictionary<string, string> StateLookup => new Dictionary<string, string>
    {
        ["None"] = Resources[Messages.Dashboard_ReviewStateNone],
        ["New"] = Resources[Messages.Dashboard_ReviewStateNew],
        ["InProgress"] = Resources[Messages.Dashboard_ReviewStateInProgress],
        ["OnCorrection"] = Resources[Messages.Dashboard_ReviewStateOnCorrection],
        ["Accept"] = Resources[Messages.Dashboard_ReviewStateAccept]
    };

    private DateOnly? _date;
    private readonly PaginationState _pagination = new();
    private RequestState _state = RequestState.Done();
    private IReadOnlyCollection<DateSelectorItem> _dateItems = Array.Empty<DateSelectorItem>();
    private IReadOnlyCollection<TaskForReviewDto> _tasks = Array.Empty<TaskForReviewDto>();
    private IQueryable<TaskForReviewDto> Tasks => _tasks.AsQueryable();
    
    protected override async Task OnParametersSetAsync()
    {
        _dateItems = DateSelectorDataFactory.Create(Resources);
        _date ??= _dateItems.First().Date;

        await Load(_date.Value);
    }
    
    private async Task Load(DateOnly date)
    {
        _state = await RequestProcessor.Process(
            () => ReviewService.GetLast(TeamId, date),
            nameof(ReviewHistoryWidget),
            r =>
            {
                _tasks = r.Items;
                _state = RequestState.Done();
                StateHasChanged();
            });
    }
    
    private async Task Changed(DateOnly date)
    {
        _date = date;
        
        await Load(_date.Value);
    }

    private string GetReviewerTitle(TaskForReviewDto task)
    {
        var hasConcreteReviewer = task.HasConcreteReviewer
            ? Resources[Messages.Constructor_BooleanTrueText]
            : Resources[Messages.Constructor_BooleanFalseText];
        var isOriginalReviewer = task.IsOriginalReviewer
            ? Resources[Messages.Constructor_BooleanFalseText]
            : Resources[Messages.Constructor_BooleanTrueText];
        var builder = new StringBuilder();
        
        builder.AppendLine($"{Resources[Messages.Dashboard_HasConcreteReviewer]} - {hasConcreteReviewer}");
        builder.Append($"{Resources[Messages.Dashboard_IsOriginalReviewer]} - {isOriginalReviewer}");
        
        return builder.ToString();
    }
}