@inject IStringLocalizer<DashboardResources> Localizer

<FormSection
    Title="@Localizer["SelectTeamTitle"]"
    HelpText="@Localizer["SelectTeam"]"
    AsRows="true">
    <Loading State="State" Retry="Retry">
        <FormFieldSet Label="@Localizer["BotField"]" FieldId="bot-selector">
            <InputSelectList 
                FieldId="bot-selector"
                Value="BotId"
                ValueExpression="@(() => BotId)"
                ValueChanged="@((Guid? v) => BotChanged.InvokeAsync(v))"
                Items="Bots"
                TitleSelector="i => i.Name"
                ValueSelector="i => i.Id"
                HasEmptyValue="true"/>
        </FormFieldSet>
        <FormFieldSet Label="@Localizer["TeamField"]" FieldId="team-selector">
            <InputSelectList
                FieldId="team-selector"
                Value="TeamId"
                ValueExpression="@(() => TeamId)"
                ValueChanged="@((Guid? v) => TeamChanged.InvokeAsync(v))"
                Items="TeamsByBot"
                TitleSelector="i => i.Name"
                ValueSelector="i => i.Id"
                HasEmptyValue="true"/>
        </FormFieldSet>
    </Loading>
</FormSection>

@code {
    /// <summary>
    /// Bot identifier.
    /// </summary>
    [Parameter, EditorRequired]
    public Guid? BotId { get; set; }
    
    /// <summary>
    /// Team identifier.
    /// </summary>
    [Parameter, EditorRequired]
    public Guid? TeamId { get; set; }
    
    /// <summary>
    /// Component state.
    /// </summary>
    [Parameter, EditorRequired]
    public LoadingState State { get; set; } = default!;
    
    /// <summary>
    /// Bot list.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyCollection<BotDto> Bots { get; set; } = default!;
    
    /// <summary>
    /// Action for retry.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Task> Retry { get; set; } = default!;

    /// <summary>
    /// Bot changed action.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<Guid?> BotChanged { get; set; }
    
    /// <summary>
    /// Team changed action.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<Guid?> TeamChanged { get; set; }

    private IEnumerable<TeamDto> TeamsByBot
    {
        get
        {
            var bot = Bots.SingleOrDefault(b => b.Id == BotId);

            return bot is not null
                ? bot.Teams
                : Array.Empty<TeamDto>();
        }
    }
}