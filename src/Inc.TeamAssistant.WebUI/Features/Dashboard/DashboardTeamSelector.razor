@using Inc.TeamAssistant.Connector.Model.Queries.GetBots

@inject NavigationManager NavigationManager
@inject ResourcesManager Resources
@inject LinkBuilder LinkBuilder

<div class="component-container">
    <FormSection
        Title="@Resources[Messages.Dashboard_SelectTeamTitle]"
        HelpText="@Resources[Messages.Dashboard_SelectTeam]"
        AsRows="true">
        <Content>
            <Loading State="State">
                <Content>
                    <FormFieldSet Label="@Resources[Messages.Dashboard_BotField]" FieldId="bot-selector">
                        <Content>
                            <SelectList 
                                FieldId="bot-selector"
                                Value="_currentBotId"
                                ValueChanged="@((Guid? v) => ChangeBot(v))"
                                Items="Bots"
                                TitleSelector="i => i.Name"
                                ValueSelector="i => i.Id"
                                HasEmptyValue="true"/>
                        </Content>
                    </FormFieldSet>
                    <FormFieldSet Label="@Resources[Messages.Dashboard_TeamField]" FieldId="team-selector">
                        <Content>
                            <SelectList
                                FieldId="team-selector"
                                Value="_currentTeamId"
                                ValueChanged="@((Guid? v) => ChangeTeam(v))"
                                Items="TeamsByBot"
                                TitleSelector="i => i.Name"
                                ValueSelector="i => i.Id"
                                HasEmptyValue="true"/>
                        </Content>
                    </FormFieldSet>
                </Content>
            </Loading>
        </Content>
    </FormSection>
</div>

@code {
    [Parameter, EditorRequired]
    public Guid? BotId { get; set; }
    
    [Parameter, EditorRequired]
    public Guid? TeamId { get; set; }
    
    [Parameter, EditorRequired]
    public RequestState State { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public IReadOnlyCollection<BotDto> Bots { get; set; } = default!;
    
    private Guid? _currentBotId;
    private Guid? _currentTeamId;

    private IEnumerable<TeamDto> TeamsByBot
    {
        get
        {
            var bot = Bots.SingleOrDefault(b => b.Id == _currentBotId);

            return bot is not null
                ? bot.Teams
                : Array.Empty<TeamDto>();
        }
    }

    protected override void OnParametersSet()
    {
        _currentBotId = BotId;
        _currentTeamId = TeamId;
    }

    private void ChangeTeam(Guid? value)
    {
        _currentTeamId = value;
        
        ChangeTeamContext(_currentBotId, _currentTeamId);
    }
    
    private void ChangeBot(Guid? value)
    {
        _currentBotId = value;

        if (_currentBotId.HasValue)
        {
            var bot = Bots.SingleOrDefault(b => b.Id == _currentBotId);
            var team = bot?.Teams.FirstOrDefault();

            ChangeTeamContext(_currentBotId.Value, team?.Id);
        }
        else
            ChangeTeamContext(_currentBotId, null);
    }

    private void ChangeTeamContext(Guid? botId, Guid? teamId)
    {
        if (BotId == botId && TeamId == teamId)
            return;
        
        var url = (botId.HasValue, teamId.HasValue) switch
        {
            (true, true) => $"dashboard/{botId:N}/{teamId:N}",
            (true, false) => $"dashboard/{botId:N}",
            _ => "dashboard"
        };

        NavigationManager.NavigateTo(LinkBuilder.Build(url));
    }

}