@using Inc.TeamAssistant.Connector.Model.Queries.GetBotsByCurrentUser

@inject NavigationManager NavigationManager
@inject ResourcesManager Resources
@inject LinkBuilder LinkBuilder

<div class="component-container">
    <FormSection
        Title="@Resources[Messages.Dashboard_SelectTeamTitle]"
        HelpText="@Resources[Messages.Dashboard_SelectTeam]"
        AsRows="true">
        <Content>
            <Loading State="State" Retry="Retry">
                <Content>
                    <FormFieldSet Label="@Resources[Messages.Dashboard_BotField]" FieldId="bot-selector">
                        <Content>
                            <InputSelectList 
                                FieldId="bot-selector"
                                Value="BotId"
                                ValueExpression="@(() => BotId)"
                                ValueChanged="@((Guid? v) => ChangeBot(v))"
                                Items="Bots"
                                TitleSelector="i => i.Name"
                                ValueSelector="i => i.Id"
                                HasEmptyValue="true"/>
                        </Content>
                    </FormFieldSet>
                    <FormFieldSet Label="@Resources[Messages.Dashboard_TeamField]" FieldId="team-selector">
                        <Content>
                            <InputSelectList
                                FieldId="team-selector"
                                Value="TeamId"
                                ValueExpression="@(() => TeamId)"
                                ValueChanged="@((Guid? v) => ChangeTeam(v))"
                                Items="TeamsByBot"
                                TitleSelector="i => i.Name"
                                ValueSelector="i => i.Id"
                                HasEmptyValue="true"/>
                        </Content>
                    </FormFieldSet>
                </Content>
            </Loading>
        </Content>
    </FormSection>
</div>

@code {
    [Parameter, EditorRequired]
    public Guid? BotId { get; set; }
    
    [Parameter, EditorRequired]
    public Guid? TeamId { get; set; }
    
    [Parameter, EditorRequired]
    public LoadingState State { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public IReadOnlyCollection<BotDto> Bots { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Task> Retry { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public EventCallback<(Guid? BotId, Guid? TeamId)> TeamContextChanged { get; set; }

    private IEnumerable<TeamDto> TeamsByBot
    {
        get
        {
            var bot = Bots.SingleOrDefault(b => b.Id == BotId);

            return bot is not null
                ? bot.Teams
                : Array.Empty<TeamDto>();
        }
    }

    private async Task ChangeTeam(Guid? value)
    {
        TeamId = value;
        
        await ChangeTeamContext(BotId, TeamId);
    }
    
    private async Task ChangeBot(Guid? value)
    {
        BotId = value;

        if (BotId.HasValue)
        {
            var bot = Bots.SingleOrDefault(b => b.Id == BotId);
            var team = bot?.Teams.FirstOrDefault();

            await ChangeTeamContext(BotId.Value, team?.Id);
        }
        else
            await ChangeTeamContext(BotId, null);
    }

    private Task ChangeTeamContext(Guid? botId, Guid? teamId) => TeamContextChanged.InvokeAsync((botId, teamId));
}