@using Inc.TeamAssistant.Connector.Model.Queries.GetBots

@inject NavigationManager NavigationManager
@inject ResourcesManager Resources
@inject LinkBuilder LinkBuilder

<div class="component-container">
    <FormSection
        Title="@Resources[Messages.Dashboard_SelectTeamTitle]"
        HelpText="@Resources[Messages.Dashboard_SelectTeam]"
        AsRows="true">
        <Content>
            <Loading State="State">
                <Content>
                    <FormFieldSet Label="@Resources[Messages.Dashboard_BotField]" FieldId="bot-selector">
                        <Content>
                            <InputSelect
                                id="bot-selector"
                                Value="_currentBotId"
                                ValueExpression="@(() => _currentBotId)"
                                ValueChanged="@((Guid? v) => ChangeBot(v))"
                                class="form-control">
                                <option value=""></option>
                                @foreach (var bot in Bots)
                                {
                                    <option value="@bot.Id">@bot.Name</option>
                                }
                            </InputSelect>
                        </Content>
                    </FormFieldSet>
                    <FormFieldSet Label="@Resources[Messages.Dashboard_TeamField]" FieldId="team-selector">
                        <Content>
                            <InputSelect
                                id="team-selector"
                                Value="_currentTeamId"
                                ValueExpression="@(() => _currentTeamId)"
                                ValueChanged="@((Guid? v) => ChangeTeam(v))"
                                class="form-control">
                                <option value=""></option>
                                @foreach (var team in TeamsByBot)
                                {
                                    <option value="@team.Id">@team.Name</option>
                                }
                            </InputSelect>
                        </Content>
                    </FormFieldSet>
                </Content>
            </Loading>
        </Content>
    </FormSection>
</div>

@code {
    [Parameter, EditorRequired]
    public Guid? BotId { get; set; }
    
    [Parameter, EditorRequired]
    public Guid? TeamId { get; set; }
    
    [Parameter, EditorRequired]
    public RequestState State { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public IReadOnlyCollection<BotDto> Bots { get; set; } = default!;
    
    private Guid? _currentBotId;
    private Guid? _currentTeamId;

    private IEnumerable<TeamDto> TeamsByBot
    {
        get
        {
            var bot = Bots.SingleOrDefault(b => b.Id == _currentBotId);

            return bot is not null
                ? bot.Teams
                : Array.Empty<TeamDto>();
        }
    }

    protected override void OnParametersSet()
    {
        _currentBotId = BotId;
        _currentTeamId = TeamId;
    }

    private void ChangeTeam(Guid? value)
    {
        _currentTeamId = value;
        
        if (_currentBotId.HasValue && _currentTeamId.HasValue)
            ChangeTeamContext((_currentBotId.Value, _currentTeamId.Value));
    }
    
    private void ChangeBot(Guid? value)
    {
        _currentBotId = value;
        
        if (!_currentBotId.HasValue)
            return;
        
        var bot = Bots.SingleOrDefault(b => b.Id == _currentBotId);
        var team = bot?.Teams.FirstOrDefault();
            
        ChangeTeamContext((_currentBotId.Value, team?.Id));
    }

    private void ChangeTeamContext((Guid BotId, Guid? TeamId) teamContext)
    {
        if ((BotId, TeamId) != teamContext)
            NavigationManager.NavigateTo(LinkBuilder.Build($"dashboard/{teamContext.BotId:N}/{teamContext.TeamId:N}"));
    }
}