@inject IRandomCoffeeService RandomCoffeeService
@inject ResourcesManager Resources
@inject RequestProcessor RequestProcessor

<DashboardWidget Title="@Resources[Messages.Dashboard_RandomCoffeeHistoryWidgetTitle]">
    <Content>
        <Loading State="_state" Retry="Load">
            <Content>
                <div class="component-container">
                    <div class="chat-selector">
                        <InputSelectList
                            FieldId="chat-selector"
                            Value="_formModel.ChatId"
                            ValueExpression="@(() => _formModel.ChatId)"
                            ValueChanged="@((long? v) => Load(v))"
                            Items="_formModel.Chats"
                            TitleSelector="i => i.Name"
                            ValueSelector="i => i.Id"/>
                    </div>
                    <DateSelector Date="_formModel.Date" Items="DateItems" OnSelected="d => _formModel.Date = d"/>
                    @if (Pairs.Any())
                    {
                        <QuickGrid Items="@Pairs" class="quick-data-grid">
                            <TemplateColumn
                                Title="@Resources[Messages.Dashboard_RandomCoffeeFirstTitle]"
                                Sortable="true"
                                SortBy="GridSort<PairDto>.ByAscending(e => e.FirstName).ThenAscending(e => e.FirstUserName)">
                                @context.FirstName
                                <br/>
                                @context.FirstUserName
                            </TemplateColumn>
                            <TemplateColumn
                                Title="@Resources[Messages.Dashboard_RandomCoffeeSecondTitle]"
                                Sortable="true"
                                SortBy="GridSort<PairDto>.ByAscending(e => e.SecondName).ThenAscending(e => e.SecondUserName)">
                                @context.SecondName
                                <br/>
                                @context.SecondUserName
                            </TemplateColumn>
                        </QuickGrid>
                    }
                    else
                    {
                        <NoData IsDark="true"/>
                    }
                </div>
            </Content>
        </Loading>
    </Content>
</DashboardWidget>

@code {
    [Parameter, EditorRequired] 
    public Guid BotId { get; set; }
    
    [Parameter, EditorRequired] 
    public Guid? TeamId { get; set; }
    
    private LoadingState _state = LoadingState.Done();
    private readonly RandomCoffeeHistoryWidgetFormModel _formModel = new();
    private IReadOnlyCollection<SelectItem<DateOnly>> DateItems => _formModel.HistoryItems
        .Select(i => new SelectItem<DateOnly>(i.Created.ToString("yy-MM-dd"), i.Created))
        .ToArray();

    protected override Task OnParametersSetAsync() => Load();

    private Task Load() => Load(chatId: null);
    
    private async Task Load(long? chatId)
    {
        await RequestProcessor.Process(
            async () =>
            {
                var chats = await RandomCoffeeService.GetChatsByBot(BotId);
                var targetChatId = chatId ?? chats.Items.FirstOrDefault()?.Id;
                var getHistoryResult = targetChatId.HasValue
                    ? await RandomCoffeeService.GetHistory(BotId, targetChatId.Value, depth: 3)
                    : null;

                return new RandomCoffeeHistoryWidgetFormModel.Parameters(chats, targetChatId, getHistoryResult);
            },
            nameof(RandomCoffeeHistoryWidget),
            r => _formModel.Apply(r),
            s =>
            {
                _state = s;
                StateHasChanged();
            });
    }

    private IQueryable<PairDto> Pairs
    {
        get
        {
            var historyItems = _formModel.HistoryItems
                .FirstOrDefault(i => !_formModel.Date.HasValue || i.Created == _formModel.Date.Value);

            var pairs = new List<PairDto>();
            if (historyItems?.Pairs is not null)
                pairs.AddRange(historyItems.Pairs);
            if (!string.IsNullOrWhiteSpace(historyItems?.ExcludedPersonName))
                pairs.Add(new PairDto(
                    historyItems.ExcludedPersonName,
                    historyItems.ExcludedPersonUserName,
                    Resources[Messages.Dashboard_RandomCoffeeNoPair],
                    SecondUserName: null));

            return pairs.AsQueryable();
        }
    }
}