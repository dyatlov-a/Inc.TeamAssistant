@using Inc.TeamAssistant.RandomCoffee.Model.Queries.GetHistory

@inject IRandomCoffeeService RandomCoffeeService
@inject ResourcesManager Resources
@inject RequestProcessor RequestProcessor

<Loading State="_state">
    <Content>
        <div class="chat-selector">
            <SelectList
                FieldId="chat-selector"
                Value="_formModel.ChatId"
                ValueExpression="@(() => _formModel.ChatId)"
                ValueChanged="@((long? v) => Load(v))"
                Items="_formModel.Chats"
                TitleSelector="i => i.Name"
                ValueSelector="i => i.Id" />
        </div>
        <DateSelector Date="_formModel.Date" Items="DateItems" OnSelected="d => _formModel.Date = d"/>
        <QuickGrid Items="@Pairs" class="quick-data-grid">
            <TemplateColumn
                Title="@Resources[Messages.Dashboard_RandomCoffeeFirstTitle]"
                Sortable="true"
                SortBy="GridSort<PairDto>.ByAscending(e => e.FirstName).ThenAscending(e => e.FirstUserName)">
                @context.FirstName
                <br/>
                @context.FirstUserName
            </TemplateColumn>
            <TemplateColumn
                Title="@Resources[Messages.Dashboard_RandomCoffeeSecondTitle]"
                Sortable="true"
                SortBy="GridSort<PairDto>.ByAscending(e => e.SecondName).ThenAscending(e => e.SecondUserName)">
                @context.SecondName
                <br/>
                @context.SecondUserName
            </TemplateColumn>
        </QuickGrid>
    </Content>
</Loading>

@code {
    [Parameter, EditorRequired] 
    public Guid BotId { get; set; }

    [Parameter, EditorRequired] 
    public int Depth { get; set; }

    private RequestState _state = RequestState.Done();
    private RandomCoffeeHistoryWidgetFormModel _formModel = new();
    private IReadOnlyCollection<SelectItem<DateOnly>> DateItems => _formModel.HistoryItems
        .Select(i => new SelectItem<DateOnly>(i.Created.ToString("yyyy-MM-dd"), i.Created))
        .ToArray();

    protected override Task OnParametersSetAsync() => Load();
    
    private async Task Load(long? chatId = null)
    {
        _state = await RequestProcessor.Process(
            async () =>
            {
                var chats = await RandomCoffeeService.GetChatsByBot(BotId);
                var targetChatId = chatId ?? chats.Items.FirstOrDefault()?.Id;
                var getHistoryResult = targetChatId.HasValue
                    ? await RandomCoffeeService.GetHistory(BotId, targetChatId.Value, Depth)
                    : null;

                return new RandomCoffeeHistoryWidgetFormModel.Parameters(chats, targetChatId, getHistoryResult);
            },
            nameof(RandomCoffeeHistoryWidget),
            r =>
            {
                _formModel.Apply(r);
                _state = RequestState.Done();
                StateHasChanged();
            });
    }

    private IQueryable<PairDto> Pairs
    {
        get
        {
            var historyItems = _formModel.HistoryItems
                .FirstOrDefault(i => !_formModel.Date.HasValue || i.Created == _formModel.Date.Value);

            var pairs = new List<PairDto>();
            if (historyItems?.Pairs is not null)
                pairs.AddRange(historyItems.Pairs);
            if (!string.IsNullOrWhiteSpace(historyItems?.ExcludedPersonName))
                pairs.Add(new PairDto(
                    historyItems.ExcludedPersonName,
                    historyItems.ExcludedPersonUserName,
                    Resources[Messages.Dashboard_RandomCoffeeNoPair],
                    SecondUserName: null));

            return pairs.AsQueryable();
        }
    }
}