@using Inc.TeamAssistant.RandomCoffee.Model.Queries.GetHistory

@inherits PersistentComponent<RandomCoffeeHistoryWidgetViewModel>

@inject IRandomCoffeeService RandomCoffeeService

<div class="chat-selector">
    <InputSelect
        id="chat-selector"
        Value="_chatId"
        ValueExpression="@(() => _chatId)"
        ValueChanged="@((long? v) => SelectChat(v))"
        class="form-control">
        @foreach (var chat in ViewModel.Chats)
        {
            <option value="@chat.Id">@chat.Name</option>
        }
    </InputSelect>
</div>

@if (ViewModel.HistoryItems.Any())
{
    <DateSelector Date="_date" Items="DateItems" OnSelected="d => _date = d" />
    <QuickGrid Items="@Pairs" class="quick-data-grid">
        <TemplateColumn
            Title="@ViewModel.FirstTitle"
            Sortable="true"
            SortBy="GridSort<PairDto>.ByAscending(e => e.FirstName).ThenAscending(e => e.FirstUserName)">
            @context.FirstName
            <br/>
            @context.FirstUserName
        </TemplateColumn>
        <TemplateColumn
            Title="@ViewModel.SecondTitle"
            Sortable="true"
            SortBy="GridSort<PairDto>.ByAscending(e => e.SecondName).ThenAscending(e => e.SecondUserName)">
            @context.SecondName
            <br/>
            @context.SecondUserName
        </TemplateColumn>
    </QuickGrid>
}
else
{
    <NoData />
}

@code {
    [Parameter, EditorRequired] 
    public Guid BotId { get; set; }

    [Parameter, EditorRequired] 
    public int Depth { get; set; }

    private long? _chatId;
    private DateOnly? _date;

    private IReadOnlyCollection<DateSelectorItem> DateItems => ViewModel.HistoryItems
        .Select(i => new DateSelectorItem(i.Created.ToString("yyyy-MM-dd"), i.Created))
        .ToArray();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _chatId = ViewModel.Chats.FirstOrDefault()?.Id;
        _date = ViewModel.HistoryItems.FirstOrDefault()?.Created;
    }

    protected override async Task<RandomCoffeeHistoryWidgetViewModel> Initialize(ResourcesManager resources)
    {
        var getChatsResult = await RandomCoffeeService.GetChatsByBot(BotId);
        IReadOnlyCollection<RandomCoffeeHistoryDto>? historyItems = null;

        if (getChatsResult.Items.Any())
        {
            var chatId = _chatId ?? getChatsResult.Items.First().Id;
            var getHistoryResult = await RandomCoffeeService.GetHistory(BotId, chatId, Depth);

            historyItems = getHistoryResult.Items;
        }

        return new RandomCoffeeHistoryWidgetViewModel(
            resources[Messages.Dashboard_RandomCoffeeFirstTitle],
            resources[Messages.Dashboard_RandomCoffeeSecondTitle],
            resources[Messages.Dashboard_RandomCoffeeNoPair],
            getChatsResult.Items,
            historyItems ?? Array.Empty<RandomCoffeeHistoryDto>());
    }

    private async Task SelectChat(long? chatId)
    {
        _chatId = chatId;

        await Update();

        _date = ViewModel.HistoryItems.FirstOrDefault()?.Created;
    }

    private IQueryable<PairDto> Pairs
    {
        get
        {
            var historyItems = ViewModel.HistoryItems.FirstOrDefault(i => !_date.HasValue || i.Created == _date.Value);

            var pairs = new List<PairDto>();
            if (historyItems?.Pairs is not null)
                pairs.AddRange(historyItems.Pairs);
            if (!string.IsNullOrWhiteSpace(historyItems?.ExcludedPersonName))
                pairs.Add(new PairDto(
                    historyItems.ExcludedPersonName,
                    historyItems.ExcludedPersonUserName,
                    ViewModel.NoPair,
                    SecondUserName: null));

            return pairs.AsQueryable();
        }
    }
}