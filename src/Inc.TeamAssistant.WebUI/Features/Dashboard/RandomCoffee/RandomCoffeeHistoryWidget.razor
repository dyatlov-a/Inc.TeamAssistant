@inject IStringLocalizer<DashboardResources> Localizer

<DashboardWidget Title="@Localizer["RandomCoffeeHistoryWidgetTitle"]">
    <Loading State="State" Retry="() => OnLoad.InvokeAsync((long?)null)">
        <div class="component-container">
            <div class="chat-selector">
                <InputSelectList
                    FieldId="chat-selector"
                    Value="FormModel.ChatId"
                    ValueExpression="@(() => FormModel.ChatId)"
                    ValueChanged="@((long? v) => OnLoad.InvokeAsync(v))"
                    Items="FormModel.Chats"
                    TitleSelector="i => i.Name"
                    ValueSelector="i => i.Id"/>
            </div>
            <DateSelector Date="FormModel.Date" Items="DateItems" OnSelected="d => FormModel.Date = d"/>
            @if (Pairs.Any())
            {
                <QuickGrid Items="@Pairs" class="quick-data-grid">
                    <TemplateColumn
                        Title="@Localizer["RandomCoffeeFirstTitle"]"
                        Sortable="true"
                        SortBy="GridSort<PairDto>.ByAscending(e => e.FirstName).ThenAscending(e => e.FirstUserName)">
                        @context.FirstName
                        <br/>
                        @context.FirstUserName
                    </TemplateColumn>
                    <TemplateColumn
                        Title="@Localizer["RandomCoffeeSecondTitle"]"
                        Sortable="true"
                        SortBy="GridSort<PairDto>.ByAscending(e => e.SecondName).ThenAscending(e => e.SecondUserName)">
                        @context.SecondName
                        <br/>
                        @context.SecondUserName
                    </TemplateColumn>
                </QuickGrid>
            }
            else
            {
                <NoData ComponentStyle="ComponentStyle.Secondary"/>
            }
        </div>
    </Loading>
</DashboardWidget>

@code {
    [Parameter, EditorRequired] 
    public LoadingState State { get; set; } = default!;
    
    [Parameter, EditorRequired] 
    public RandomCoffeeHistoryWidgetFormModel FormModel { get; set; } = default!;
    
    [Parameter, EditorRequired] 
    public EventCallback<long?> OnLoad { get; set; }

    private IReadOnlyDictionary<string, DateOnly> DateItems
        => FormModel.HistoryItems.ToDictionary(i => i.Created.ToString("yy-MM-dd"), i => i.Created);

    private IQueryable<PairDto> Pairs
    {
        get
        {
            var historyItems = FormModel.HistoryItems
                .FirstOrDefault(i => !FormModel.Date.HasValue || i.Created == FormModel.Date.Value);

            var pairs = new List<PairDto>();
            if (historyItems?.Pairs is not null)
                pairs.AddRange(historyItems.Pairs);
            if (!string.IsNullOrWhiteSpace(historyItems?.ExcludedPersonName))
                pairs.Add(new PairDto(
                    historyItems.ExcludedPersonName,
                    historyItems.ExcludedPersonUserName,
                    Localizer["RandomCoffeeNoPair"],
                    SecondUserName: null));

            return pairs.AsQueryable();
        }
    }
}