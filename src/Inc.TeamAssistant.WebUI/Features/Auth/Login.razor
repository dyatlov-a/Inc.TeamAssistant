@inject IStringLocalizer<AuthResources> Localizer

<div class="login">
    <div class="login-action">
        <div class="login-action-container">
            <h1 class="telegram-login__header">@Localizer["LoginTitle"]</h1>
            <p class="telegram-login__text">@Localizer["LoginHelp"]</p>
            <div class="telegram-login__actions">
                <Loading State="State" Retry="Retry">
                    @if (AuthBotContext.SystemUsers.Any())
                    {
                        foreach (var systemUser in AuthBotContext.SystemUsers)
                        {
                            <button
                                type="button"
                                @onclick="() => LoginAsSystemUser(systemUser.Id)"
                                class="button_telegram">
                                @Localizer["LoginAsSystemUser"] @systemUser.Name
                            </button>
                            <br />
                        }
                    }
                    else if (!string.IsNullOrWhiteSpace(AuthBotContext.UserName))
                    {
                        <script
                            async
                            src="https://telegram.org/js/telegram-widget.js?22"
                            data-telegram-login="@AuthBotContext.UserName"
                            data-size="large"
                            data-userpic="false"
                            data-lang="@Lang"
                            data-auth-url="accounts/login-tg?return_url=@ReturnUrl"
                            data-request-access="write">
                        </script>
                    }
                </Loading>
            </div>
        </div>
    </div>
    <div class="login-motivation">
        <div class="login-motivation-container">
            <h2 class="login-motivation__header">@Localizer["CreateBot"]</h2>
        </div>
    </div>
</div>

@code {
    /// <summary>
    /// Component state.
    /// </summary>
    [Parameter, EditorRequired]
    public LoadingState State { get; set; } = default!;
    
    /// <summary>
    /// Auth bot context.
    /// </summary>
    [Parameter, EditorRequired]
    public AuthBotContext AuthBotContext { get; set; } = default!;
    
    /// <summary>
    /// Action for retry.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Task> Retry { get; set; } = default!;
    
    /// <summary>
    /// LoggedIn as system user event.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<long> LoggedInAsSystemUser { get; set; }
    
    /// <summary>
    /// Current language.
    /// </summary>
    [Parameter, EditorRequired]
    public string Lang { get; set; } = default!;

    /// <summary>
    /// Return to page url.
    /// </summary>
    [Parameter]
    public string? ReturnUrl { get; set; }

    private async Task LoginAsSystemUser(long personId) => await LoggedInAsSystemUser.InvokeAsync(personId);
}