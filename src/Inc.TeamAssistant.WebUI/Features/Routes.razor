@using FluentValidation
@using Inc.TeamAssistant.WebUI.Services

@implements IDisposable

@inject IRenderContext RenderContext
@inject NavigationManager NavigationManager
@inject ResourcesManager ResourcesManager

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <Authorizing>
                    <Authorizing />
                </Authorizing>
                <NotAuthorized>
                    <RedirectToLogin />
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <Error404 />
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    protected override async Task OnInitializedAsync()
    {
        SetCurrentLanguage();
        
        NavigationManager.LocationChanged += OnLocationChanged;

        await ResourcesManager.Load();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        SetCurrentLanguage();
    }
    
    private void SetCurrentLanguage()
    {
        var currentLanguage = RenderContext.GetCurrentLanguageId();
        ValidatorOptions.Global.Configure(currentLanguage.Language);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}