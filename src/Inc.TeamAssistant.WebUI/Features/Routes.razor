@implements IAsyncDisposable

@inject IServiceProvider ServiceProvider

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly">
        <Found Context="routeData">
            <NotificationBar />
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <Authorizing>
                    <Authorizing/>
                </Authorizing>
                <NotAuthorized>
                    <RedirectToLogin/>
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <Error404 />
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    private EventsProvider? _eventsProvider;
    
    protected override async Task OnInitializedAsync()
    {
        _eventsProvider = ServiceProvider.GetService<EventsProvider>();
        if (_eventsProvider is not null)
            await _eventsProvider.Start();
    }

    public async ValueTask DisposeAsync()
    {
        if (_eventsProvider is not null)
            await _eventsProvider.DisposeAsync();
    }
}