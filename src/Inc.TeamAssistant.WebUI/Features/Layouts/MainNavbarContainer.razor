@implements IDisposable

@inject NavRouter NavRouter
@inject TenantStore TenantStore
@inject IRenderContext RenderContext

<AuthorizeView>
    <Authorized>
        <MainNavbar
            HasPath="HasPath"
            Languages="_languages"
            MainUrl="@MainUrl"
            LoginUrl="@LoginUrl"
            LogoutUrl="@LogoutUrl"
            LanguageChanged="p => MoveTo(p)"
            CurrentPerson="context.User.ToPerson()"
            Rooms="TenantStore.Rooms"
            MoveToLinkFactory="CreateMoveToLink" />
    </Authorized>
    <NotAuthorized>
        <MainNavbar
            HasPath="HasPath"
            Languages="_languages"
            LoginUrl="@LoginUrl"
            LogoutUrl="@LogoutUrl"
            MainUrl="@MainUrl"
            LanguageChanged="p => MoveTo(p)"
            MoveToLinkFactory="CreateMoveToLink" />
    </NotAuthorized>
</AuthorizeView>

@code {
    private IDisposable? _routerScope;
    private IReadOnlyCollection<MainLinkViewModel> _languages = [];
    private string LogoutUrl => RenderContext.SelectedLanguage is null
        ? "accounts/logout"
        : $"accounts/logout?languageCode={RenderContext.SelectedLanguage.Value}";
    
    private bool HasPath(string value) => NavRouter.CurrentUrl.Contains(value, StringComparison.InvariantCultureIgnoreCase);
    private string MainUrl => NavRouter.CreateRoute(null);
    private string LoginUrl => NavRouter.CreateRoute($"login?returnUrl={NavRouter.CurrentUrl}");

    protected override void OnInitialized()
    {
        _routerScope = NavRouter.OnRouteChanged(SetLanguages);
        
        SetLanguages();
        
        TenantStore.OnChange += StateHasChanged;
    }
    
    private void SetLanguages()
    {
        var routeWithoutLanguage = NavRouter.GetRouteSegment();

        _languages = LanguageSettings.LanguageIds
            .Select(l => new MainLinkViewModel(l.Value, $"/{l.Value}/{routeWithoutLanguage}"))
            .ToArray();
        
        StateHasChanged();
    }

    private Task MoveTo(string path) => NavRouter.MoveToRoute(path, RoutingType.Server);
    
    private string CreateMoveToLink(string routeSegment) => NavRouter.CreateRoute(routeSegment);

    public void Dispose()
    {
        TenantStore.OnChange -= StateHasChanged;
        
        _routerScope?.Dispose();
    }
}