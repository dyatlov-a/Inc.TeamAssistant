@inject IStringLocalizer<LayoutResources> Localizer

<div class="navbar">
    <div class="navbar-container">
        <div class="navbar__item navbar__item_logo">
            <RouterLink Href="@MainUrl"><HomeIcon Size="40px"/></RouterLink>
        </div>
        @foreach (var language in Languages)
        {
            <div class="navbar__item">
                <RouterLink OnClick="() => Moved.InvokeAsync(language.Url)">@language.Title</RouterLink>
            </div>
        }
        <div class="navbar__divider"></div>
        @foreach(var team in Teams)
        {
            <div class="navbar__item navbar__item_team">
                <RouterLink Href="@MoveToTeamFactory(team.Id)">@team.Name</RouterLink>
            </div>
        }
        @if (CurrentPerson is not null)
        {
            <span class="navbar__item navbar__item_avatar">
                <img src="@CurrentPerson.AvatarUrl" alt="user avatar" class="user-avatar"/>
                @CurrentPerson.Name
                <br/>
                @CurrentPerson.Username
            </span>
            <div class="navbar__item">
                <RouterLink Href="@LogoutUrl">@Localizer["Logout"]</RouterLink>
            </div>
        }
        else if (HasLogin)
        {
            <div class="navbar__item">
                <RouterLink Href="@LoginUrl">
                    @Localizer["Login"]
                </RouterLink>
            </div>
        }
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public bool HasLogin { get; set; }
    
    [Parameter, EditorRequired]
    public IReadOnlyCollection<LinkModel> Languages { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public string MainUrl { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public string LoginUrl { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public string LogoutUrl { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Guid, string> MoveToTeamFactory { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public EventCallback<string> Moved { get; set; }
    
    [Parameter]
    public IEnumerable<TenantTeamDto> Teams { get; set; } = [];
    
    [Parameter]
    public Person? CurrentPerson { get; set; }
}