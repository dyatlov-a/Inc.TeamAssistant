@implements IAsyncDisposable

@inject IRenderContext RenderContext
@inject IJSRuntime JsRuntime
@inject IStringLocalizer<LayoutResources> Localizer

<InlineDialog
    IsOpen="_isOpen"
    Text="@Localizer["AcceptCookieText"]"
    ButtonText="@Localizer["AcceptCookieButton"]"
    OnAction="Accepted" />

@code {
    private IJSObjectReference? _cookieModule;
    
    private readonly string _rightsCookieName = "rights";
    private readonly string _rightsCookieValue = "accept";
    private readonly int _rightsCookieLifetime = 365;
    private bool _isOpen;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && RenderContext.IsBrowser)
        {
            _cookieModule = await JsRuntime.InvokeAsync<IJSObjectReference>(
                "import",
                "./Features/Layouts/AcceptCookieDialogContainer.razor.js");
            var rightsValue = await _cookieModule.InvokeAsync<string>("readCookie", _rightsCookieName);

            if (!_rightsCookieValue.Equals(rightsValue, StringComparison.InvariantCultureIgnoreCase))
            {
                _isOpen = true;
                
                StateHasChanged();
            }
        }
    }

    private async Task Accepted()
    {
        if (_cookieModule is null)
            return;
        
        await _cookieModule.InvokeVoidAsync(
            "writeCookie",
            _rightsCookieName,
            _rightsCookieValue,
            _rightsCookieLifetime);

        _isOpen = false;
    }

    public async ValueTask DisposeAsync()
    {
        if (_cookieModule is not null)
            await _cookieModule.DisposeAsync();
    }
}