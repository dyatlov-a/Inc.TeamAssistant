@page "/rooms"
@page "/ru/rooms"
@page "/en/rooms"

@attribute [Authorize]

@inject TenantStore TenantStore
@inject NavRouter NavRouter
@inject IStringLocalizer<TenantResources> Localizer
@inject ITenantService TenantService
@inject RequestProcessor RequestProcessor

<MetaDataModule />

<RoomGrid
    AvailableRooms="TenantStore.Rooms"
    State="_state"
    Retry="() => Load(_state)"
    EditEmitted="tId => StartEdit(tId)"
    CreateEmitted="() => StartEdit(roomId: null)"
    RemoveEmitted="RemoveRoom"
    MoveToRetroFactory="CreateMoveToRetroLink"
    MoveToBacklogFactory="CreateMoveToBacklogLink" />

<ContentDialog Title="@Localizer["RoomManagement"]" @ref="_contentDialog">
    <RoomEditorContainer RoomId="_selectedRoomId" OnEdited="EndEdit" />
</ContentDialog>

<ConfirmDialog @ref="_confirmDialog">
    <p>@string.Format(Localizer["RemoveRoomConfirm"], _selectedRoomName)</p>
</ConfirmDialog>

@code {
    private readonly LoadingState _state = LoadingState.Done();
    private ContentDialog? _contentDialog;
    private ConfirmDialog? _confirmDialog;
    private string? _selectedRoomName;
    private Guid? _selectedRoomId;

    protected override async Task OnInitializedAsync() => await Load(_state);

    private async Task Load(IProgress<LoadingState.State> state) => await TenantStore.Initialize(roomId: null, state);

    private void StartEdit(Guid? roomId)
    {
        _selectedRoomId = roomId;
        
        _contentDialog?.Open();
    }

    private async Task EndEdit()
    {
        _contentDialog?.Close();

        await Load(_state);

        _selectedRoomId = null;
    }
    
    private async Task RemoveRoom(RoomDto room)
    {
        _selectedRoomName = room.Name;

        if (_confirmDialog is not null && await _confirmDialog.IsConfirmed())
        {
            var state = LoadingState.Wrap(_state, StateHasChanged);
            
            await RequestProcessor.Process(
                async () => await TenantService.RemoveRoom(room.Id),
                state);
        
            await Load(state);
        }

        _selectedRoomName = null;
    }
    
    private string CreateMoveToRetroLink(Guid roomId) => NavRouter.CreateRoute($"retro/{roomId:N}");
    private string CreateMoveToBacklogLink(Guid roomId) => NavRouter.CreateRoute($"backlog/{roomId:N}");
}