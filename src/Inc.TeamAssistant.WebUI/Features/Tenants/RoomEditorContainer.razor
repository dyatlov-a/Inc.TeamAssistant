@inject ITenantService TenantService
@inject RequestProcessor RequestProcessor

<RoomEditor
    FormModel="_formModel"
    State="_state"
    Retry="Load"
    OnValidSubmit="Save" />

@code {
    /// <summary>
    /// RoomId for edit.
    /// </summary>
    [Parameter, EditorRequired]
    public Guid? RoomId { get; set; }
    
    /// <summary>
    /// Room edited event.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback OnEdited { get; set; }
    
    private readonly RoomFormModel _formModel = new();
    private readonly LoadingState _state = LoadingState.Done();
    
    protected override async Task OnParametersSetAsync() => await Load();
    
    private async Task Load()
    {
        if (RoomId.HasValue)
        {
            var result = await RequestProcessor.Process(
                async () => await TenantService.GetRoom(RoomId.Value),
                nameof(RoomEditorContainer),
                _state);
            
            _formModel.Apply(result.Room);
        }
        else
            _formModel.Clear();
    }

    private async Task Save()
    {
        if (RoomId.HasValue)
            await RequestProcessor.Process(
                async () => await TenantService.UpdateRoom(_formModel.ToCommand(RoomId.Value)),
                _state);
        else
            await RequestProcessor.Process(
                async () => await TenantService.CreateRoom(_formModel.ToCommand()),
                _state);
        
        await OnEdited.InvokeAsync();
    }
}