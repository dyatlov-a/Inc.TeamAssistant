@inject IStringLocalizer<TenantResources> Localizer

<div class="main-content">
    <div class="main-content__container">
        <h1 class="main-content__header">@Localizer["RoomManagement"]</h1>
        <p class="main-content__text">@Localizer["RoomManagementText"]</p>
        <Panel Header="@Localizer["Rooms"]" IsOpen="true">
            <Actions>
                <Button OnClick="CreateEmit">@Localizer["Create"]</Button>
            </Actions>
            <Content>
                <Loading State="State" Retry="Retry">
                    <QuickGrid Items="Rooms" class="quick-data-grid">
                        <TemplateColumn
                            Title="@Localizer["RoomNameField"]"
                            Sortable="true"
                            SortBy="GridSort<RoomDto>.ByAscending(e => e.Name)">
                            @context.Name
                        </TemplateColumn>
                        <TemplateColumn Sortable="false">
                            <RouterLink Href="@MoveToTeamHealthCheckFactory(context.Id)">
                                @Localizer["MoveToTeamHealthCheck"]
                            </RouterLink>
                        </TemplateColumn>
                        <TemplateColumn Sortable="false">
                            <RouterLink Href="@MoveToRetroFactory(context.Id)">
                                @Localizer["MoveToRetro"]
                            </RouterLink>
                        </TemplateColumn>
                        <TemplateColumn Sortable="false">
                            <RouterLink Href="@MoveToBacklogFactory(context.Id)">
                                @Localizer["MoveToBacklog"]
                            </RouterLink>
                        </TemplateColumn>
                        <TemplateColumn Sortable="false">
                            <RouterLink OnClick="() => EditEmit(context.Id)">@Localizer["Edit"]</RouterLink>
                        </TemplateColumn>
                        <TemplateColumn Sortable="false">
                            <RouterLink OnClick="() => RemoveEmit(context)">@Localizer["Remove"]</RouterLink>
                        </TemplateColumn>
                    </QuickGrid>
                </Loading>
            </Content>
        </Panel>
    </div>
</div>

@code {
    /// <summary>
    /// Available teams.
    /// </summary>
    [Parameter, EditorRequired]
    public IEnumerable<RoomDto> AvailableRooms { get; set; } = default!;
    
    /// <summary>
    /// Component state.
    /// </summary>
    [Parameter, EditorRequired]
    public LoadingState State { get; set; } = default!;
    
    /// <summary>
    /// Action for retry.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Task> Retry { get; set; } = default!;
    
    /// <summary>
    /// Create team callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback CreateEmitted { get; set; }
    
    /// <summary>
    /// Edit team callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<Guid> EditEmitted { get; set; }
    
    /// <summary>
    /// Remove team callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<RoomDto> RemoveEmitted { get; set; }
    
    /// <summary>
    /// Factory for create link to team health check.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Guid, string> MoveToTeamHealthCheckFactory { get; set; } = default!;

    /// <summary>
    /// Factory for create link to retro.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Guid, string> MoveToRetroFactory { get; set; } = default!;
    
    /// <summary>
    /// Factory for create link to backlog.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Guid, string> MoveToBacklogFactory { get; set; } = default!;
    
    private IQueryable<RoomDto> Rooms => AvailableRooms.AsQueryable();

    private async Task CreateEmit() => await CreateEmitted.InvokeAsync();
    
    private async Task EditEmit(Guid teamId) => await EditEmitted.InvokeAsync(teamId);
    
    private async Task RemoveEmit(RoomDto team) => await RemoveEmitted.InvokeAsync(team);
}