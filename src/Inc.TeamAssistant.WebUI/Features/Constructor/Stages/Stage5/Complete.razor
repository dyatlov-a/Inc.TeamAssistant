@using Inc.TeamAssistant.Constructor.Model.Commands.CreateBot
@using Inc.TeamAssistant.Constructor.Model.Commands.CreateCalendar
@using Inc.TeamAssistant.Constructor.Model.Commands.UpdateBot
@using Inc.TeamAssistant.Constructor.Model.Commands.UpdateCalendar
@using Inc.TeamAssistant.Primitives.Bots
@using Inc.TeamAssistant.Primitives.FeatureProperties

@inject NavigationManager NavigationManager
@inject IBotService BotService
@inject IServiceProvider ServiceProvider
@inject ICalendarService CalendarService
@inject ResourcesManager Resources
@inject RequestProcessor RequestProcessor

<Loading State="_state" IsFullscreen="true">
    <Content>
        <EditForm EditContext="_editContext" OnSubmit="SubmitForm">
            <FluentValidationValidator @ref="_fluentValidationValidator" />
            <div class="constructor__form">
                <ValidationSummary />
                <FormSection Title="@Resources[Messages.GetStageTitle(Stage.CheckBot)]" HelpText="@Resources[Messages.Constructor_FormSectionTokenCheckHelp]">
                    <Content>
                        <a href="@LinkFactory(Stage.CheckBot)" class="link link_dark constructor__edit-link">
                            @Resources[Messages.Constructor_Edit]
                        </a>
                        <FormFieldSet FieldId="bot-username" Label="@Resources[Messages.Constructor_FormSectionTokenFieldUserNameLabel]">
                            <Content>
                                <InputText
                                    @bind-Value="_formModel.UserName"
                                    class="form-control"
                                    id="bot-username"
                                    disabled="disabled"/>
                            </Content>
                        </FormFieldSet>
                    </Content>
                </FormSection>
                <FormSection Title="@Resources[Messages.GetStageTitle(Stage.SelectFeatures)]" HelpText="@Resources[Messages.Constructor_FormSectionFeaturesCheckHelp]">
                    <Content>
                        <a href="@LinkFactory(Stage.SelectFeatures)" class="link link_dark constructor__edit-link">
                            @Resources[Messages.Constructor_Edit]
                        </a>
                        @foreach (var feature in StagesState.Features)
                        {
                            var fieldId = feature.Id.ToString();
                            var selected = StagesState.FeatureIds.Contains(feature.Id)
                                ? Resources[Messages.Constructor_BooleanTrueText]
                                : Resources[Messages.Constructor_BooleanFalseText];

                            <FormFieldSet
                                FieldId="@fieldId"
                                Label="@Features.GetValueOrDefault(feature.Name, feature.Name)">
                                <Content>
                                    <input
                                        type="text"
                                        id="@fieldId"
                                        value="@selected"
                                        class="form-control"
                                        disabled="disabled" />
                                </Content>
                            </FormFieldSet>
                        }
                    </Content>
                </FormSection>
                @foreach (var feature in StagesState.SelectedFeatures)
                {
                    if (!_properties.TryGetValue(feature.Name, out var settingSections))
                        continue;

                    foreach (var settingSection in settingSections)
                    {
                        <FormSection
                            Title="@Resources[settingSection.HeaderMessageId]"
                            HelpText="@Resources[settingSection.HelpMessageId]">
                            <Content>
                                <a href="@LinkFactory(Stage.SetSettings)" class="link link_dark constructor__edit-link">
                                    @Resources[Messages.Constructor_Edit]
                                </a>
                                @foreach (var settingItem in settingSection.SettingItems)
                                {
                                    var property = _formModel.Properties.SingleOrDefault(p => p.Key.Equals(
                                        settingItem.PropertyName,
                                        StringComparison.InvariantCultureIgnoreCase));

                                    <FormFieldSet
                                        FieldId="@settingItem.PropertyName"
                                        Label="@Resources[settingItem.LabelMessageId]">
                                        <Content>
                                            <input
                                                type="text"
                                                id="@settingItem.PropertyName"
                                                value="@GetValueAsText(settingItem, property.Value)"
                                                class="form-control"
                                                disabled="disabled"/>
                                        </Content>
                                    </FormFieldSet>
                                }
                            </Content>
                        </FormSection>
                    }
                }
                <FormSection
                    Title="@Resources[Messages.Constructor_BotInformation]"
                    HelpText="@Resources[Messages.Constructor_BotInformationHelp]">
                    <Content>
                        <a href="@LinkFactory(Stage.SetSettings)" class="link link_dark constructor__edit-link">
                            @Resources[Messages.Constructor_Edit]
                        </a>
                        @foreach (var item in _formModel.BotDetails.Where(b => _formModel.SupportedLanguages.Contains(b.LanguageId)))
                        {
                            <BotDetailsEditor BotDetails="item" IsDisabled="true"/>
                        }
                    </Content>
                </FormSection>
                <FormSection
                    Title="@Resources[Messages.GetStageTitle(Stage.Calendar)]"
                    HelpText="@Resources[Messages.Constructor_CheckWorkTimeHelp]">
                    <Content>
                        <a href="@LinkFactory(Stage.Calendar)" class="link link_dark constructor__edit-link">
                            @Resources[Messages.Constructor_Edit]
                        </a>
                        <FormFieldSet
                            FieldId="work-time"
                            Label="@Resources[Messages.Constructor_WorkTimeTitle]">
                            <Content>
                                <input
                                    type="text"
                                    id="work-time"
                                    value="@_formModel.GetWorkScheduleAsText(Resources[Messages.Constructor_WorkAllDayLabel])"
                                    class="form-control"
                                    disabled="disabled"/>
                            </Content>
                        </FormFieldSet>
                        @if (_formModel.Weekends.Any())
                        {
                            <FormFieldSet
                                FieldId="weekends"
                                Label="@Resources[Messages.Constructor_WeekendsTitle]">
                                <Content>
                                    <div id="weekends" class="form-control disabled">
                                        @foreach (var day in Enum.GetValues<DayOfWeek>())
                                        {
                                            <span
                                                class="multiselect__item @CssClass(day)">
                                                @Resources[Messages.GetDayOfWeekTitle(day)]
                                            </span>
                                        }
                                    </div>
                                </Content>
                            </FormFieldSet>
                        }
                        <FormFieldSet
                            FieldId="holidays"
                            Label="@Resources[Messages.Constructor_HolidaysTitle]">
                            <Content>
                                <InputTextArea
                                    @bind-Value="@_formModel.HolidaysAsText"
                                    class="form-control form-control_textarea"
                                    id="holidays"
                                    disabled="disabled" />
                            </Content>
                        </FormFieldSet>
                    </Content>
                </FormSection>
            </div>
            <div class="constructor__actions">
                <button type="submit" class="button button_light">
                    @Resources[StagesState.Id.HasValue ? Messages.Constructor_ButtonUpdateText : Messages.Constructor_ButtonCreateText]
                </button>
            </div>
        </EditForm>
    </Content>
</Loading>

@code {
    [Parameter, EditorRequired]
    public StagesState StagesState { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Stage?, string> LinkFactory { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public string BotStorageKey { get; set; } = default!;

    private readonly CompleteFormModel _formModel = new();
    private FluentValidationValidator? _fluentValidationValidator;
    private EditContext? _editContext;
    private RequestState _state = RequestState.Done();
    private IReadOnlyDictionary<string, IReadOnlyCollection<SettingSection>> _properties = new Dictionary<string, IReadOnlyCollection<SettingSection>>();
    private IReadOnlyDictionary<string, string> Features => new[]
    {
        "Appraiser",
        "CheckIn",
        "RandomCoffee",
        "Reviewer"
    }.ToDictionary(i => i, i => Resources[Messages.GetFeatureProperty(i, "Name")]);
    
    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(_formModel.Apply(StagesState));
    }
    
    protected override Task OnParametersSetAsync() => Load();
    
    private async Task Load()
    {
        _state = await RequestProcessor.Process(
            () => BotService.GetProperties(),
            nameof(Complete),
            r =>
            {
                _properties = r.Properties;
                _state = RequestState.Done();
                StateHasChanged();
            });
    }
    
    private string CssClass(DayOfWeek item) => _formModel.Weekends.Contains(item)
        ? "multiselect__item_selected"
        : string.Empty;

    private string GetValueAsText(SettingItem settingItem, string value)
    {
        var item = settingItem.Values.SingleOrDefault(s => s.Value.Equals(value, StringComparison.InvariantCultureIgnoreCase));
        
        return item is null ? string.Empty : Resources[item.MessageId];
    }
    
    private async Task SubmitForm()
    {
        if (_fluentValidationValidator is null || !await _fluentValidationValidator!.ValidateAsync())
            return;

        var botDetails = _formModel.BotDetails
            .Select(i => new BotDetails(
                i.LanguageId,
                i.Name,
                i.ShortDescription,
                i.Description))
            .ToArray();

        var calendarId = StagesState.CalendarId.HasValue
            ? await CalendarService.Update(new UpdateCalendarCommand(
                StagesState.CalendarId.Value,
                _formModel.WorkSchedule,
                _formModel.Weekends,
                _formModel.Holidays))
            : await CalendarService.Create(new CreateCalendarCommand(
                _formModel.WorkSchedule,
                _formModel.Weekends,
                _formModel.Holidays));

        if (StagesState.Id.HasValue)
            await BotService.Update(new UpdateBotCommand(
                StagesState.Id.Value,
                _formModel.UserName,
                _formModel.Token,
                calendarId,
                _formModel.FeatureIds,
                _formModel.Properties,
                _formModel.SupportedLanguages,
                botDetails));
        else
            await BotService.Create(new CreateBotCommand(
                _formModel.UserName,
                _formModel.Token,
                calendarId,
                _formModel.FeatureIds,
                _formModel.Properties,
                _formModel.SupportedLanguages,
                botDetails));

        await ServiceProvider.GetRequiredService<DataEditor>().Detach(BotStorageKey);
        
        NavigationManager.NavigateTo(LinkFactory(null));
    }
}