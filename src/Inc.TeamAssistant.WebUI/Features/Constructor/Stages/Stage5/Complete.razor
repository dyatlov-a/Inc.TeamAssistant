@using Inc.TeamAssistant.Constructor.Model.Commands.CreateBot
@using Inc.TeamAssistant.Constructor.Model.Commands.CreateCalendar
@using Inc.TeamAssistant.Constructor.Model.Commands.UpdateBot
@using Inc.TeamAssistant.Constructor.Model.Commands.UpdateCalendar
@using Inc.TeamAssistant.Constructor.Model.Common
@using Inc.TeamAssistant.Primitives.Bots
@using Inc.TeamAssistant.Primitives.FeatureProperties

@inherits PersistentComponent<CompleteViewModel>

@inject NavigationManager NavigationManager
@inject IBotService BotService
@inject IServiceProvider ServiceProvider
@inject ICalendarService CalendarService

<EditForm EditContext="_editContext" OnSubmit="SubmitForm">
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <div class="constructor__form">
        <ValidationSummary />
        <FormSection Title="@ViewModel.FormSectionTokenTitle" HelpText="@ViewModel.FormSectionTokenHelp">
            <Content>
                <a href="@LinkFactory(Stage.CheckBot)" class="link link_dark constructor__edit-link">
                    @ViewModel.EditText
                </a>
                <FormFieldSet FieldId="bot-username" Label="@ViewModel.FormSectionTokenFieldUserNameLabel">
                    <Content>
                        <InputText
                            @bind-Value="_formModel.UserName"
                            class="form-control"
                            id="bot-username"
                            disabled="disabled"/>
                    </Content>
                </FormFieldSet>
            </Content>
        </FormSection>
        <FormSection Title="@ViewModel.FormSectionFeaturesTitle" HelpText="@ViewModel.FormSectionFeaturesHelp">
            <Content>
                <a href="@LinkFactory(Stage.SelectFeatures)" class="link link_dark constructor__edit-link">
                    @ViewModel.EditText
                </a>
                @foreach (var feature in StagesState.Features)
                {
                    var fieldId = feature.Id.ToString();
                    var selected = StagesState.FeatureIds.Contains(feature.Id)
                        ? ViewModel.BooleanTrueText
                        : ViewModel.BooleanFalseText;

                    <FormFieldSet
                        FieldId="@fieldId"
                        Label="@ViewModel.FeaturesLookup.GetValueOrDefault(feature.Name, feature.Name)">
                        <Content>
                            <input
                                type="text"
                                id="@fieldId"
                                value="@selected"
                                class="form-control"
                                disabled="disabled" />
                        </Content>
                    </FormFieldSet>
                }
            </Content>
        </FormSection>
        @foreach (var feature in StagesState.SelectedFeatures)
        {
            if (!ViewModel.SettingSections.TryGetValue(feature.Name, out var settingSections))
                continue;

            foreach (var settingSection in settingSections)
            {
                <FormSection
                    Title="@ResourceProvider(settingSection.HeaderMessageId)"
                    HelpText="@ResourceProvider(settingSection.HelpMessageId)">
                    <Content>
                        <a href="@LinkFactory(Stage.SetSettings)" class="link link_dark constructor__edit-link">
                            @ViewModel.EditText
                        </a>
                        @foreach (var settingItem in settingSection.SettingItems)
                        {
                            var property = _formModel.Properties.SingleOrDefault(p => p.Key.Equals(
                                settingItem.PropertyName,
                                StringComparison.InvariantCultureIgnoreCase));

                            <FormFieldSet
                                FieldId="@settingItem.PropertyName"
                                Label="@ResourceProvider(settingItem.LabelMessageId)">
                                <Content>
                                    <input
                                        type="text"
                                        id="@settingItem.PropertyName"
                                        value="@GetValueAsText(settingItem, property.Value)"
                                        class="form-control"
                                        disabled="disabled"/>
                                </Content>
                            </FormFieldSet>
                        }
                    </Content>
                </FormSection>
            }
        }
        <FormSection
            Title="@ViewModel.BotInformation"
            HelpText="@ViewModel.BotInformationHelp">
            <Content>
                <a href="@LinkFactory(Stage.SetSettings)" class="link link_dark constructor__edit-link">
                    @ViewModel.EditText
                </a>
                @foreach (var item in _formModel.BotDetails.Where(b => _formModel.SupportedLanguages.Contains(b.LanguageId)))
                {
                    <BotDetailsEditor
                        BotDetails="item"
                        BotName="@ViewModel.BotName"
                        BotShortDescription="@ViewModel.BotShortDescription"
                        BotDescription="@ViewModel.BotDescription"
                        IsDisabled="true"/>
                }
            </Content>
        </FormSection>
    </div>
    <div class="constructor__actions">
        <button type="submit" class="button button_light">
            @(StagesState.Id.HasValue ? ViewModel.ButtonUpdateText : ViewModel.ButtonCreateText)
        </button>
    </div>
</EditForm>

@code {
    [Parameter, EditorRequired]
    public StagesState StagesState { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Stage?, string> LinkFactory { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public string BotStorageKey { get; set; } = default!;

    private readonly CompleteFormModel _formModel = new();
    private FluentValidationValidator? _fluentValidationValidator;
    private EditContext? _editContext;
    
    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(_formModel.Apply(StagesState));
        
        base.OnParametersSet();
    }
    
    protected override async Task<CompleteViewModel> Initialize(Dictionary<string, string> resources)
    {
        var result = await BotService.GetProperties();
        var featuresLookup = new[]
        {
            "Appraiser",
            "CheckIn",
            "RandomCoffee",
            "Reviewer"
        };

        var viewModel = new CompleteViewModel(
            resources[Messages.GetStageTitle(Stage.CheckBot)],
            resources[Messages.Constructor_FormSectionTokenCheckHelp],
            resources[Messages.Constructor_FormSectionTokenFieldUserNameLabel],
            resources[Messages.GetStageTitle(Stage.SelectFeatures)],
            resources[Messages.Constructor_FormSectionFeaturesCheckHelp],
            result.Result.Properties,
            resources[Messages.Constructor_ButtonCreateText],
            resources[Messages.Constructor_ButtonUpdateText],
            resources[Messages.Constructor_BooleanTrueText],
            resources[Messages.Constructor_BooleanFalseText],
            resources[Messages.Constructor_Edit],
            featuresLookup.ToDictionary(i => i, i => resources[Messages.GetFeatureProperty(i, "Name")]),
            resources[Messages.Constructor_BotInformation],
            resources[Messages.Constructor_BotInformationHelp],
            resources[Messages.Constructor_BotName],
            resources[Messages.Constructor_BotShortDescription],
            resources[Messages.Constructor_BotDescription]);
        
        return viewModel;
    }

    private string GetValueAsText(SettingItem settingItem, string value)
    {
        var item = settingItem.Values.SingleOrDefault(s => s.Value.Equals(value, StringComparison.InvariantCultureIgnoreCase));
        
        return item is null ? string.Empty : ResourceProvider(item.MessageId);
    }
    
    private async Task SubmitForm()
    {
        if (_fluentValidationValidator is null || !await _fluentValidationValidator!.ValidateAsync())
            return;

        var botDetails = _formModel.BotDetails
            .Select(i => new BotDetails(
                i.LanguageId,
                i.Name,
                i.ShortDescription,
                i.Description))
            .ToArray();
        var schedule = StagesState.Calendar.WorkAllDay
            ? null
            : new WorkScheduleUtcDto(StagesState.Calendar.Schedule.Start, StagesState.Calendar.Schedule.End);

        var calendarId = StagesState.CalendarId.HasValue
            ? await CalendarService.Update(new UpdateCalendarCommand(
                StagesState.CalendarId.Value,
                schedule,
                StagesState.Calendar.Weekends,
                StagesState.Calendar.Holidays))
            : await CalendarService.Create(new CreateCalendarCommand(
                schedule,
                StagesState.Calendar.Weekends,
                StagesState.Calendar.Holidays));

        if (StagesState.Id.HasValue)
            await BotService.Update(new UpdateBotCommand(
                StagesState.Id.Value,
                _formModel.UserName,
                _formModel.Token,
                calendarId.Result,
                _formModel.FeatureIds,
                _formModel.Properties,
                _formModel.SupportedLanguages,
                botDetails));
        else
            await BotService.Create(new CreateBotCommand(
                _formModel.UserName,
                _formModel.Token,
                calendarId.Result,
                _formModel.FeatureIds,
                _formModel.Properties,
                _formModel.SupportedLanguages,
                botDetails));

        await ServiceProvider.GetRequiredService<DataEditor>().Detach(BotStorageKey);
        
        NavigationManager.NavigateTo(LinkFactory(null));
    }
}