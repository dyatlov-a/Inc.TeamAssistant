@inject DragAndDropService<FeatureDto> DragAndDropService

<div draggable="true" @ondragstart="HandleDragStart" class="feature-card draggable">
    <div class="feature-card__header">
        <div class="feature-card__drag">
            <DragVerticalIcon Size="30px" ComponentStyle="ComponentStyle.Secondary" />
        </div>
        <div class="feature-card__avatar">
            <DynamicComponent Type="Icon" Parameters="IconParameters"/>
        </div>
    </div>
    <div class="feature-card__content">
        <h3 class="feature-card__name">@Title</h3>
        <p class="feature-card__description">@Description</p>
        <div class="feature-card__actions">
            @Buttons
        </div>
    </div>
</div>

@code {
    /// <summary>
    /// Icon to display in the feature card.
    /// </summary>
    [Parameter, EditorRequired]
    public Type Icon { get; set; } = default!;
    
    /// <summary>
    /// Feature data transfer object.
    /// </summary>
    [Parameter, EditorRequired]
    public FeatureDto Feature { get; set; } = default!;
    
    /// <summary>
    /// Title of the feature card.
    /// </summary>
    [Parameter, EditorRequired]
    public string Title { get; set; } = default!;
    
    /// <summary>
    /// Description of the feature card.
    /// </summary>
    [Parameter, EditorRequired]
    public string Description { get; set; } = default!;
    
    /// <summary>
    /// Buttons to display in the feature card.
    /// </summary>
    [Parameter, EditorRequired]
    public RenderFragment Buttons { get; set; } = default!;
    
    private Dictionary<string, object> IconParameters => new()
    {
        ["Size"] = "60px",
        ["ComponentStyle"] = ComponentStyle.Secondary
    };
    
    private void HandleDragStart() => DragAndDropService.Start(Feature);
}