@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider
@inject ResourcesManager Resources

<EditForm EditContext="_editContext" OnSubmit="SubmitForm">
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <div class="constructor__form">
        <FormSection
            Title="@Resources[Messages.Constructor_FormSectionFeaturesTitle]"
            HelpText="@Resources[Messages.Constructor_FormSectionFeaturesHelp]"
            AsRows="true">
            <Content>
                <InputFeatures
                    @bind-Value="_formModel.FeatureIds"
                    Features="StagesState.Features"
                    AddText="@Resources[Messages.Constructor_FeatureAdd]"
                    RemoveText="@Resources[Messages.Constructor_FeatureRemove]"
                    FeaturesAvailableEmptyText="@Resources[Messages.Constructor_FormSectionFeaturesAvailableEmptyText]"
                    FeaturesSelectedEmptyText="@Resources[Messages.Constructor_FormSectionFeaturesSelectedEmptyText]">
                    <Validation>
                        <ValidationMessage For="@(() => _formModel.FeatureIds)" />
                    </Validation>
                </InputFeatures>
            </Content>
        </FormSection>
    </div>
    <div class="constructor__actions">
        <button type="submit" class="button button_light">@Resources[Messages.Constructor_MoveNextTitle]</button>
    </div>
</EditForm>

@code {
    private readonly SelectFeaturesFormModel _formModel = new();
    private FluentValidationValidator? _fluentValidationValidator;
    
    [Parameter, EditorRequired]
    public StagesState StagesState { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Stage?, string> LinkFactory { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public string BotStorageKey { get; set; } = default!;

    private EditContext? _editContext;
    
    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(_formModel.Apply(StagesState));
    }

    private async Task SubmitForm()
    {
        if (_fluentValidationValidator is null || !await _fluentValidationValidator!.ValidateAsync())
            return;
        
        await ServiceProvider.GetRequiredService<DataEditor>().Attach(BotStorageKey, StagesState.Apply(_formModel));
        
        NavigationManager.NavigateTo(LinkFactory(Stage.SetSettings));
    }
}