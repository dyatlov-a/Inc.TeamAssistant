@inject IServiceProvider ServiceProvider
@inject IStringLocalizer<ConstructorResources> Localizer

<EditForm id="@AnalyticEvents.FeatureSelected" EditContext="_editContext" OnSubmit="SubmitForm">
    <FluentValidationValidator @ref="_fluentValidationValidator" DisableAssemblyScanning="true" />
    <Panel Header="@Localizer["FeaturesStore"]" IsOpen="true">
        <Actions>
            <Button ButtonType="ButtonType.Submit">@Localizer["MoveNextTitle"]</Button>
        </Actions>
        <Content>
            <FormSection
                Title="@Localizer["FormSectionFeaturesTitle"]"
                HelpText="@Localizer["FormSectionFeaturesHelp"]"
                AsRows="true">
                <InputFeatures
                    Value="_formModel.FeatureIds"
                    ValueExpression="@(() => _formModel.FeatureIds)"
                    ValuesChanged="(IEnumerable<Guid> v) => _formModel.SetFeatures(v)"
                    Features="StagesState.AvailableFeatures">
                    <Validation>
                        <ValidationMessage For="@(() => _formModel.FeatureIds)" />
                    </Validation>
                </InputFeatures>
            </FormSection>
        </Content>
    </Panel>
</EditForm>

@code {
    [Parameter, EditorRequired]
    public StagesState StagesState { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Stage, NavRoute> LinkFactory { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Stage?, Task> MoveToNext { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public string BotStorageKey { get; set; } = default!;

    private readonly SelectFeaturesFormModel _formModel = new();
    private FluentValidationValidator? _fluentValidationValidator;
    private EditContext? _editContext;
    
    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(_formModel.Apply(StagesState));
    }

    private async Task SubmitForm()
    {
        if (_fluentValidationValidator is null || !await _fluentValidationValidator!.ValidateAsync())
            return;
        
        var appLocalStorage = ServiceProvider.GetRequiredService<AppLocalStorage>();
        await appLocalStorage.Attach(BotStorageKey, StagesState.Apply(_formModel));
        
        await MoveToNext(Stage.SetSettings);
    }
}