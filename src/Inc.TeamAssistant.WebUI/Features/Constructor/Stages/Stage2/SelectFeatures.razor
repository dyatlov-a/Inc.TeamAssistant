@inherits PersistentComponent<SelectFeaturesViewModel>

@inject NavigationManager NavigationManager
@inject IDataEditor DataEditor

<EditForm EditContext="_editContext" OnSubmit="SubmitForm">
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <div class="constructor__form">
        <FormSection
            Title="@ViewModel.FormSectionFeaturesTitle"
            HelpText="@ViewModel.FormSectionFeaturesHelp"
            AsRows="true">
            <Content>
                <InputFeatures
                    @bind-Value="_formModel.FeatureIds"
                    Features="StagesState.Features"
                    AddText="@ViewModel.FormSectionFeaturesAddText"
                    RemoveText="@ViewModel.FormSectionFeaturesRemoveText"
                    FeaturesAvailableEmptyText="@ViewModel.FormSectionFeaturesAvailableEmptyText"
                    FeaturesSelectedEmptyText="@ViewModel.FormSectionFeaturesSelectedEmptyText">
                    <Validation>
                        <ValidationMessage For="@(() => _formModel.FeatureIds)" />
                    </Validation>
                </InputFeatures>
            </Content>
        </FormSection>
    </div>
    <div class="constructor__actions">
        <button type="submit" class="button button_white">@ViewModel.MoveNextTitle</button>
    </div>
</EditForm>

@code {
    private readonly SelectFeaturesFormModel _formModel = new();
    private FluentValidationValidator? _fluentValidationValidator;
    
    [Parameter, EditorRequired]
    public StagesState StagesState { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Stage?, string> LinkFactory { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public string BotStorageKey { get; set; } = default!;

    private EditContext? _editContext;
    
    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(_formModel.Apply(StagesState));
        
        base.OnParametersSet();
    }
    
    protected override Task<SelectFeaturesViewModel> Initialize(Dictionary<string, string> resources)
    {
        return Task.FromResult(new SelectFeaturesViewModel(
            resources[Messages.Constructor_FormSectionFeaturesTitle],
            resources[Messages.Constructor_FormSectionFeaturesHelp],
            resources[Messages.Constructor_FeatureAdd],
            resources[Messages.Constructor_FeatureRemove],
            resources[Messages.Constructor_FormSectionFeaturesAvailableEmptyText],
            resources[Messages.Constructor_FormSectionFeaturesSelectedEmptyText],
            resources[Messages.Constructor_MoveNextTitle]));
    }

    private async Task SubmitForm()
    {
        if (_fluentValidationValidator is null || !await _fluentValidationValidator!.ValidateAsync())
            return;

        StagesState.Apply(_formModel);
        await DataEditor.Attach(BotStorageKey, StagesState);
        
        var stage = StagesState.PropertyKeys.Any() ? Stage.SetSettings : Stage.Complete;
        NavigationManager.NavigateTo(LinkFactory(stage));
    }
}