@inherits InputBase<IEnumerable<Guid>>

@inject DragAndDropService<Guid> DragAndDropService
@inject ResourcesManager Resources
@inject FeaturesFactory FeaturesFactory

<div class="input-features">
    <div
        ondragover="event.preventDefault();"
        ondragstart="event.dataTransfer.setData('', event.target.id);"
        @ondrop="() => HandleDrop(AvailableFeatures)"
        @ondragenter="HandleDragEnter"
        class="form-control form-control_enabled input-features__items @_availableFeaturesCssClass">
        @if (AvailableFeatures.Any())
        {
            foreach (var feature in AvailableFeatures)
            {
                <FeatureCard
                    FeatureId="feature.Id"
                    Icon="@FeatureType(feature.Name)"
                    Title="@FeaturesFactory.CreateName(feature.Name)"
                    Description="@FeaturesFactory.CreateDescription(feature.Name)">
                    <Buttons>
                        <button type="button" class="button button_light" @onclick="() => ToggleFeature(feature.Id)">
                            @Resources[Messages.Constructor_FeatureAdd]
                        </button>
                    </Buttons>
                </FeatureCard>
            }
        }
        else
        {
            <p class="input-features__text">@Resources[Messages.Constructor_FormSectionFeaturesAvailableEmptyText]</p>
        }
    </div>
    <div
        ondragover="event.preventDefault();"
        ondragstart="event.dataTransfer.setData('', event.target.id);"
        @ondrop="() => HandleDrop(SelectedFeatures)"
        @ondragenter="HandleDragEnter"
        class="form-control form-control_enabled input-features__items @CssClass @_selectedFeaturesCssClass">
        @if (SelectedFeatures.Any())
        {
            foreach (var feature in SelectedFeatures)
            {
                <FeatureCard
                    FeatureId="feature.Id"
                    Icon="@FeatureType(feature.Name)"
                    Title="@FeaturesFactory.CreateName(feature.Name)"
                    Description="@FeaturesFactory.CreateDescription(feature.Name)">
                    <Buttons>
                        <button type="button" class="button button_light" @onclick="() => ToggleFeature(feature.Id)">
                            @Resources[Messages.Constructor_FeatureRemove]
                        </button>
                    </Buttons>
                </FeatureCard>
            }
        }
        else
        {
            <p class="input-features__text">@Resources[Messages.Constructor_FormSectionFeaturesSelectedEmptyText]</p>
        }
        @if (Validation is not null)
        {
            @Validation
        }
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public IReadOnlyCollection<FeatureDto> Features { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public EventCallback<IEnumerable<Guid>> ValuesChanged { get; set; }
    
    [Parameter]
    public RenderFragment? Validation { get; set; }
    
    private readonly List<Guid> _values = new();
    private string _availableFeaturesCssClass = string.Empty;
    private string _selectedFeaturesCssClass = string.Empty;
    private IEnumerable<FeatureDto> AvailableFeatures => Features.Where(f => !IsSelected(f.Id));
    private IEnumerable<FeatureDto> SelectedFeatures => Features.Where(f => IsSelected(f.Id));

    protected override void OnParametersSet()
    {
        _values.Clear();
        if (CurrentValue is not null)
            _values.AddRange(CurrentValue);
    }

    protected override bool TryParseValueFromString(
        string? value,
        out IEnumerable<Guid> result,
        out string validationErrorMessage)
    {
        throw new NotImplementedException();
    }

    private bool IsSelected(Guid id) => CurrentValue?.Contains(id) == true;

    private Type FeatureType(string featureName) => featureName switch
    {
        "Appraiser" => typeof(AppraiserIcon),
        "CheckIn" => typeof(CheckInIcon),
        "RandomCoffee" => typeof(RandomCoffeeIcon),
        "Reviewer" => typeof(ReviewerIcon),
        _ => typeof(UnknownIcon)
    };

    private async Task ToggleFeature(Guid id)
    {
        if (_values.Contains(id))
            _values.Remove(id);
        else
            _values.Add(id);

        await ValuesChanged.InvokeAsync(_values);
    }
    
    private async Task HandleDrop(IEnumerable<FeatureDto> features)
    {
        var featureId = DragAndDropService.End();
        
        if (features.All(f => f.Id != featureId))
            await ToggleFeature(featureId);
        
        _availableFeaturesCssClass = string.Empty;
        _selectedFeaturesCssClass = string.Empty;
    }
    
    private void HandleDragEnter()
    {
        var cssClass = "can-drop";

        if (AvailableFeatures.Any(f => f.Id == DragAndDropService.Current))
            _selectedFeaturesCssClass = cssClass;
        else
            _availableFeaturesCssClass = cssClass;
    }
}