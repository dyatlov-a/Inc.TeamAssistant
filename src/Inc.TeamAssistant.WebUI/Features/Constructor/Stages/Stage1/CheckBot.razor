@inject IStringLocalizer<ConstructorResources> Localizer

<EditForm id="@AnalyticEvents.BotChecked" EditContext="_editContext" OnSubmit="SubmitForm">
    <FluentValidationValidator @ref="_fluentValidationValidator" DisableAssemblyScanning="true" />
    <CheckBotFormTracker OnChange="StateHasChanged" />
    <Panel Header="@Localizer["ConnectingTelegram"]" IsOpen="true">
        <Actions>
            <Button ButtonType="ButtonType.Submit">@Localizer["MoveNextTitle"]</Button>
        </Actions>
        <Content>
            <FormSection Title="@Localizer["FormSectionTokenTitle"]">
                <HelpContent>
                    @Localizer["FormSectionTokenHelpBegin"] <RouterLink
                                                                Href="https://telegram.me/BotFather" ComponentStyle="ComponentStyle.Secondary"
                                                                Target="@RouterTarget.Blank">BotFather</RouterLink> @Localizer["FormSectionTokenHelpEnd"]
                </HelpContent>
                <ChildContent>
                    <FormFieldSet
                        FieldId="bot-token"
                        Label="@Localizer["FormSectionTokenFieldTokenLabel"]">
                        <InputSingleLine FieldId="bot-token" @bind-Value="FormModel.Token" />
                        <ValidationMessage For="@(() => FormModel.Token)"/>
                    </FormFieldSet>
                    <FormFieldSet
                        FieldId="bot-username"
                        Label="@Localizer["FormSectionTokenFieldUserNameLabel"]">
                        <InputSingleLine
                            FieldId="bot-username"
                            @bind-Value="FormModel.UserName"
                            IsDisabled="true" />
                        <ValidationMessage For="@(() => FormModel.UserName)"/>
                    </FormFieldSet>
                </ChildContent>
            </FormSection>
        </Content>
    </Panel>
</EditForm>

@code {
    /// <summary>
    /// Form model.
    /// </summary>
    [Parameter, EditorRequired]
    public CheckBotFormModel FormModel { get; set; } = default!;
    
    /// <summary>
    /// OnValidSubmit event.
    /// </summary>
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }
    
    private FluentValidationValidator? _fluentValidationValidator;
    private EditContext? _editContext;

    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(FormModel);
    }
    
    private async Task SubmitForm()
    {
        if (_fluentValidationValidator is null || !await _fluentValidationValidator.ValidateAsync())
            return;
        
        await OnValidSubmit.InvokeAsync();
    }
}