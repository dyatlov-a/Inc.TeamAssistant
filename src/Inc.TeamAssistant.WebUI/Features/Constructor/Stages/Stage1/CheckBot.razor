@inject IServiceProvider ServiceProvider
@inject ResourcesManager Resources

<EditForm id="@AnalyticEvents.BotChecked" EditContext="_editContext" OnSubmit="SubmitForm">
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <CheckBotFormTracker OnChange="StateHasChanged" />
    <Panel Header="@Resources[Messages.Constructor_ConnectingTelegram]" IsOpen="true">
        <Actions>
            <Button ButtonType="ButtonType.Submit" Message="Messages.Constructor_MoveNextTitle"></Button>
        </Actions>
        <Content>
            <FormSection Title="@Resources[Messages.Constructor_FormSectionTokenTitle]">
                <HelpContent>
                    @((MarkupString)string.Format(
                        Resources[Messages.Constructor_FormSectionTokenHelpTemplate],
                        "<a href=\"https://telegram.me/BotFather\" target=\"_blank\" class=\"link link_dark\">BotFather</a>"))
                </HelpContent>
                <Content>
                    <FormFieldSet
                        FieldId="bot-token"
                        Label="@Resources[Messages.Constructor_FormSectionTokenFieldTokenLabel]">
                        <Content>
                            <InputText @bind-Value="_formModel.Token" class="form-control form-control_enabled" id="bot-token"/>
                            <ValidationMessage For="@(() => _formModel.Token)"/>
                        </Content>
                    </FormFieldSet>
                    <FormFieldSet
                        FieldId="bot-username"
                        Label="@Resources[Messages.Constructor_FormSectionTokenFieldUserNameLabel]">
                        <Content>
                            <InputText
                                @bind-Value="_formModel.UserName"
                                class="form-control form-control_disabled"
                                id="bot-username"
                                disabled="disabled"/>
                            <ValidationMessage For="@(() => _formModel.UserName)"/>
                        </Content>
                    </FormFieldSet>
                </Content>
            </FormSection>
        </Content>
    </Panel>
</EditForm>

@code {
    [Parameter, EditorRequired]
    public StagesState StagesState { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Stage, NavRoute> LinkFactory { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Stage?, Task> MoveToNext { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public string BotStorageKey { get; set; } = default!;
    
    private readonly CheckBotFormModel _formModel = new();
    private FluentValidationValidator? _fluentValidationValidator;
    private EditContext? _editContext;

    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(_formModel.Apply(StagesState));
    }

    private async Task SubmitForm()
    {
        if (_fluentValidationValidator is null || !await _fluentValidationValidator.ValidateAsync())
            return;

        var appLocalStorage = ServiceProvider.GetRequiredService<AppLocalStorage>();
        await appLocalStorage.Attach(BotStorageKey, StagesState.Apply(_formModel));

        await MoveToNext(Stage.SelectFeatures);
    }
}