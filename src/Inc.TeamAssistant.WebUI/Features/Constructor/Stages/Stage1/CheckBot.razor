@inject IServiceProvider ServiceProvider
@inject IStringLocalizer<ConstructorResources> Localizer

<EditForm id="@AnalyticEvents.BotChecked" EditContext="_editContext" OnSubmit="SubmitForm">
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <CheckBotFormTracker OnChange="StateHasChanged" />
    <Panel Header="@Localizer["ConnectingTelegram"].Value" IsOpen="true">
        <Actions>
            <Button ButtonType="ButtonType.Submit">
                <Content>
                    @Localizer["MoveNextTitle"].Value
                </Content>
            </Button>
        </Actions>
        <Content>
            <FormSection Title="@Localizer["FormSectionTokenTitle"].Value">
                <HelpContent>
                    @Localizer["FormSectionTokenHelpBegin"].Value <RouterLink
                            Href="https://telegram.me/BotFather" ComponentStyle="ComponentStyle.Secondary"
                            Target="@RouterTarget.Blank">
                        <Content>BotFather</Content>
                    </RouterLink> @Localizer["FormSectionTokenHelpEnd"].Value
                </HelpContent>
                <Content>
                    <FormFieldSet
                        FieldId="bot-token"
                        Label="@Localizer["FormSectionTokenFieldTokenLabel"].Value">
                        <Content>
                            <InputSingleLine FieldId="bot-token" @bind-Value="_formModel.Token" />
                            <ValidationMessage For="@(() => _formModel.Token)"/>
                        </Content>
                    </FormFieldSet>
                    <FormFieldSet
                        FieldId="bot-username"
                        Label="@Localizer["FormSectionTokenFieldUserNameLabel"].Value">
                        <Content>
                            <InputSingleLine
                                FieldId="bot-username"
                                @bind-Value="_formModel.UserName"
                                IsDisabled="true" />
                            <ValidationMessage For="@(() => _formModel.UserName)"/>
                        </Content>
                    </FormFieldSet>
                </Content>
            </FormSection>
        </Content>
    </Panel>
</EditForm>

@code {
    [Parameter, EditorRequired]
    public StagesState StagesState { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Stage, NavRoute> LinkFactory { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Stage?, Task> MoveToNext { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public string BotStorageKey { get; set; } = default!;
    
    private readonly CheckBotFormModel _formModel = new();
    private FluentValidationValidator? _fluentValidationValidator;
    private EditContext? _editContext;

    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(_formModel.Apply(StagesState));
    }

    private async Task SubmitForm()
    {
        if (_fluentValidationValidator is null || !await _fluentValidationValidator.ValidateAsync())
            return;

        var appLocalStorage = ServiceProvider.GetRequiredService<AppLocalStorage>();
        await appLocalStorage.Attach(BotStorageKey, StagesState.Apply(_formModel));

        await MoveToNext(Stage.SelectFeatures);
    }
}