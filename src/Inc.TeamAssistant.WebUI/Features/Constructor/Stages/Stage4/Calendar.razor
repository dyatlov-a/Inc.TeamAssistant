@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider
@inject ResourcesManager Resources

<EditForm EditContext="_editContext" OnSubmit="SubmitForm">
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <div class="constructor__form">
        <FormSection
            Title="@Resources[Messages.Constructor_WorkTimeTitle]"
            HelpText="@Resources[Messages.Constructor_WorkTimeHelp]">
            <Content>
                <FormFieldSet
                    FieldId="work-all-day"
                    Label="@Resources[Messages.Constructor_WorkAllDayLabel]">
                    <Content>
                        <InputCheckbox id="work-all-day" @bind-Value="_formModel.WorkAllDay" />
                    </Content>
                </FormFieldSet>
                @if (!_formModel.WorkAllDay)
                {
                    <div class="work-schedule__items">
                        <div class="work-schedule__item">
                            <InputTimeOnly
                                FieldId="work-schedule-start"
                                Label="@Resources[Messages.Constructor_WorkTimeStartLabel]"
                                @bind-Value="_formModel.Start" />
                        </div>
                        <div class="work-schedule__item">
                            <InputTimeOnly
                                FieldId="work-schedule-end"
                                Label="@Resources[Messages.Constructor_WorkTimeEndLabel]"
                                @bind-Value="_formModel.End" />
                        </div>
                    </div>
                }
            </Content>
        </FormSection>
        <FormSection
            Title="@Resources[Messages.Constructor_WeekendsTitle]"
            HelpText="@Resources[Messages.Constructor_WeekendsHelp]">
            <Content>
                <FormFieldSet
                    FieldId="weekends"
                    Label="@Resources[Messages.Constructor_WeekendsLabel]">
                    <Content>
                        <div id="weekends" class="form-control enabled">
                            @foreach (var day in Enum.GetValues<DayOfWeek>())
                            {
                                <span
                                    class="multiselect__item @CssClass(day)"
                                    @onclick="() => ToggleWeekend(day)">
                                    @Resources[Messages.GetDayOfWeekTitle(day)]
                                </span>
                            }
                        </div>
                    </Content>
                </FormFieldSet>
            </Content>
        </FormSection>
        <FormSection
            Title="@Resources[Messages.Constructor_HolidaysTitle]"
            HelpText="@Resources[Messages.Constructor_HolidaysHelp]"
            AsRows="true">
            <Content>
                <div class="holiday-items">
                    @foreach (var holiday in _formModel.Holidays)
                    {
                        <div class="holiday-items__item">
                            <div class="holiday-items__item-control">
                                <InputDateOnly
                                    FieldId="@holiday.DateFieldId"
                                    Label="@Resources[Messages.Constructor_DateLabel]"
                                    @bind-Value="holiday.Date"/>
                            </div>
                            <div class="holiday-items__item-control">
                                <FormFieldSet
                                    FieldId="@holiday.WorkdayFieldId"
                                    Label="@Resources[Messages.Constructor_WorkdayLabel]">
                                    <Content>
                                        <InputCheckbox id="@holiday.WorkdayFieldId" @bind-Value="holiday.IsWorkday"/>
                                    </Content>
                                </FormFieldSet>
                            </div>
                            <div class="holiday-items__item-control">
                                <button
                                    type="button"
                                    class="button button_dark button_small work-schedule__button"
                                    @onclick="() => RemoveHoliday(holiday)">
                                    <TrashIcon Size="20px" Color="#000" />
                                </button>
                            </div>
                        </div>
                    }
                    <div class="holiday-items__item">
                        <button
                            type="button"
                            class="button button_dark button_small work-schedule__button"
                            @onclick="AddHoliday">
                            @Resources[Messages.Constructor_AddHolidayLabel]
                        </button>
                    </div>
                </div>
            </Content>
        </FormSection>
    </div>
    <div class="constructor__actions">
        <button type="submit" class="button button_light">@Resources[Messages.Constructor_MoveNextTitle]</button>
    </div>
</EditForm>

@code {
    private readonly CalendarFormModel _formModel = new();
    private FluentValidationValidator? _fluentValidationValidator;
    
    [Parameter, EditorRequired]
    public StagesState StagesState { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Stage?, string> LinkFactory { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public string BotStorageKey { get; set; } = default!;

    private EditContext? _editContext;

    private string CssClass(DayOfWeek item) => _formModel.SelectedWeekends.Contains(item)
        ? "multiselect__item_selected"
        : string.Empty;

    private void ToggleWeekend(DayOfWeek item)
    {
        if (_formModel.SelectedWeekends.Contains(item))
            _formModel.SelectedWeekends.Remove(item);
        else
            _formModel.SelectedWeekends.Add(item);
    }

    private void AddHoliday()
    {
        var now = DateTimeOffset.UtcNow;
        var date = _formModel.Holidays.Any()
            ? _formModel.Holidays.OrderByDescending(h => h.Date).First().Date
            : new DateOnly(now.Year, now.Month, now.Day);
        
        _formModel.AddHoliday(date.AddDays(1), isWorkday: false);
    }

    private void RemoveHoliday(HolidayFromModel item) => _formModel.Holidays.Remove(item);
    
    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(_formModel.Apply(StagesState));
    }
    
    private async Task SubmitForm()
    {
        if (_fluentValidationValidator is null || !await _fluentValidationValidator!.ValidateAsync())
            return;
        
        await ServiceProvider.GetRequiredService<DataEditor>().Attach(BotStorageKey, StagesState.Apply(_formModel));
        
        NavigationManager.NavigateTo(LinkFactory(Stage.Complete));
    }
}