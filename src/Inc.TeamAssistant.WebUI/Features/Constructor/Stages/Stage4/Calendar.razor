@inherits PersistentComponent<CalendarViewModel>

@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider

<EditForm EditContext="_editContext" OnSubmit="SubmitForm">
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <div class="constructor__form">
        <FormSection
            Title="@ViewModel.WorkTimeTitle"
            HelpText="@ViewModel.WorkTimeHelp">
            <Content>
                <FormFieldSet
                    FieldId="work-all-day"
                    Label="@ViewModel.WorkAllDayLabel">
                    <Content>
                        <InputCheckbox @bind-Value="_formModel.WorkAllDay" />
                    </Content>
                </FormFieldSet>
                @if (!_formModel.WorkAllDay)
                {
                    <div>
                        <div class="work-schedule__item">
                            <InputTimeOnly
                                FieldId="work-schedule-start"
                                Label="@ViewModel.WorkTimeStartLabel"
                                @bind-Value="_formModel.Start" />
                        </div>
                        <div class="work-schedule__item">
                            <InputTimeOnly
                                FieldId="work-schedule-end"
                                Label="@ViewModel.WorkTimeEndLabel"
                                @bind-Value="_formModel.End" />
                        </div>
                    </div>
                }
            </Content>
        </FormSection>
        <FormSection
            Title="@ViewModel.WeekendsTitle"
            HelpText="@ViewModel.WeekendsHelp">
            <Content>
                <FormFieldSet
                    FieldId="weekends"
                    Label="@ViewModel.WeekendsLabel">
                    <Content>
                        <div>
                            @foreach (var day in Enum.GetValues<DayOfWeek>())
                            {
                                <span class="weekends-selector__item @CssClass(day)" @onclick="() => ToggleWeekend(day)">
                                    @ResourceProvider(Messages.GetDayOfWeekTitle(day))
                                </span>
                            }
                        </div>
                    </Content>
                </FormFieldSet>
            </Content>
        </FormSection>
        <FormSection
            Title="@ViewModel.HolidaysTitle"
            HelpText="@ViewModel.HolidaysHelp">
            <Content>
                @{
                    var index = 0;
                    
                    foreach (var holiday in _formModel.Holidays)
                    {
                        <div>
                            <div class="work-schedule__item">
                                <InputDateOnly
                                    FieldId="@($"date-{index}")"
                                    Label="@ViewModel.DateLabel"
                                    @bind-Value="holiday.Date" />
                            </div>
                            <div class="work-schedule__item">
                                <FormFieldSet
                                    FieldId="@($"workday-{index}")"
                                    Label="@ViewModel.WorkdayLabel">
                                    <Content>
                                        <InputCheckbox @bind-Value="holiday.IsWorkday" />
                                    </Content>
                                </FormFieldSet>
                            </div>
                            <div class="work-schedule__item">
                                <a
                                    href="#"
                                    @onclick="() => RemoveHoliday(holiday)"
                                    class="link link_dark"
                                    @onclick:preventDefault="true">
                                    @ViewModel.RemoveHolidayLabel
                                </a>
                            </div>
                        </div>
                        
                        index++;
                    }
                }
                
                <a href="#" @onclick="AddHoliday" class="link link_dark" @onclick:preventDefault="true">
                    @ViewModel.AddHolidayLabel
                </a>
            </Content>
        </FormSection>
    </div>
    <div class="constructor__actions">
        <button type="submit" class="button button_light">@ViewModel.MoveNextTitle</button>
    </div>
</EditForm>

@code {
    private readonly CalendarFormModel _formModel = new();
    private FluentValidationValidator? _fluentValidationValidator;
    
    [Parameter, EditorRequired]
    public StagesState StagesState { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Stage?, string> LinkFactory { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public string BotStorageKey { get; set; } = default!;

    private EditContext? _editContext;

    private string CssClass(DayOfWeek item) => _formModel.SelectedWeekends.Contains(item)
        ? "weekends-selector__item_selected"
        : string.Empty;

    private void ToggleWeekend(DayOfWeek item)
    {
        if (_formModel.SelectedWeekends.Contains(item))
            _formModel.SelectedWeekends.Remove(item);
        else
            _formModel.SelectedWeekends.Add(item);
    }

    private void AddHoliday()
    {
        var now = DateTimeOffset.UtcNow;
        
        _formModel.Holidays.Add(new HolidayFromModel
        {
            Date = new DateOnly(now.Year, now.Month, now.Day),
            IsWorkday = false
        });
    }

    private void RemoveHoliday(HolidayFromModel item) => _formModel.Holidays.Remove(item);
    
    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(_formModel.Apply(StagesState));
        
        base.OnParametersSet();
    }

    protected override Task<CalendarViewModel> Initialize(Dictionary<string, string> resources)
    {
        return Task.FromResult(new CalendarViewModel(
            resources[Messages.Constructor_WorkTimeTitle],
            resources[Messages.Constructor_WorkTimeHelp],
            resources[Messages.Constructor_WorkAllDayLabel],
            resources[Messages.Constructor_WorkTimeStartLabel],
            resources[Messages.Constructor_WorkTimeEndLabel],
            resources[Messages.Constructor_WeekendsTitle],
            resources[Messages.Constructor_WeekendsHelp],
            resources[Messages.Constructor_WeekendsLabel],
            resources[Messages.Constructor_HolidaysTitle],
            resources[Messages.Constructor_HolidaysHelp],
            resources[Messages.Constructor_DateLabel],
            resources[Messages.Constructor_WorkdayLabel],
            resources[Messages.Constructor_AddHolidayLabel],
            resources[Messages.Constructor_RemoveHolidayLabel],
            resources[Messages.Constructor_MoveNextTitle]));
    }
    
    private async Task SubmitForm()
    {
        if (_fluentValidationValidator is null || !await _fluentValidationValidator!.ValidateAsync())
            return;
        
        await ServiceProvider.GetRequiredService<DataEditor>().Attach(BotStorageKey, StagesState.Apply(_formModel));
        
        NavigationManager.NavigateTo(LinkFactory(Stage.Complete));
    }
}