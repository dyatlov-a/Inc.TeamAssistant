@inherits InputBase<TimeOnly>

<FormFieldSet
    FieldId="@FieldId"
    Label="@Label">
    <Content>
        <div class="time-selector__hours">
            <InputSelect
                id="@($"{FieldId}-hours")"
                Value="_selectedHours"
                ValueExpression="@(() => _selectedHours)"
                ValueChanged="@((int i) => SelectHour(i))"
                class="form-control">
                @foreach (var hour in _hours)
                {
                    <option value="@hour">@hour</option>
                }
            </InputSelect>
        </div>
        <div class="time-selector__minutes">
            <InputSelect
                id="@($"{FieldId}-minutes")"
                Value="_selectedMinutes"
                ValueExpression="@(() => _selectedMinutes)"
                ValueChanged="@((int i) => SelectMinutes(i))"
                class="form-control">
                @foreach (var minute in _minutes)
                {
                    <option value="@minute">@minute</option>
                }
            </InputSelect>
        </div>
    </Content>
</FormFieldSet>

@code {
    [Parameter, EditorRequired]
    public string FieldId { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public string Label { get; set; } = default!;
    
    private int _selectedHours;
    private int _selectedMinutes;
    
    private readonly IReadOnlyCollection<int> _hours = Enumerable.Range(0, 24).ToArray();
    private readonly IReadOnlyCollection<int> _minutes = new [] { 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55 };
    
    protected override void OnParametersSet()
    {
        _selectedHours = CurrentValue.Hour;
        _selectedMinutes = CurrentValue.Minute;
    }
    
    private void SelectHour(int hour)
    {
        _selectedHours = hour;
        SetCurrentValue();
    }
    
    private void SelectMinutes(int minutes)
    {
        _selectedMinutes = minutes;
        SetCurrentValue();
    }
    
    private void SetCurrentValue() => CurrentValue = new TimeOnly(_selectedHours, _selectedMinutes);
    
    protected override bool TryParseValueFromString(
        string? value,
        out TimeOnly result,
        out string validationErrorMessage)
    {
        throw new NotImplementedException();
    }
}