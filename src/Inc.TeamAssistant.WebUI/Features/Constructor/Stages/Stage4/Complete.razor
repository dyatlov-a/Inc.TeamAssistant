@inject IBotService BotService
@inject IServiceProvider ServiceProvider
@inject ResourcesManager Resources
@inject RequestProcessor RequestProcessor
@inject FeaturesFactory FeaturesFactory

<div>
    <EditForm id="@FormId" EditContext="_editContext" OnSubmit="SubmitForm">
        <FluentValidationValidator @ref="_fluentValidationValidator" />
        <Panel Header="@PanelHeader" IsOpen="true">
            <Actions>
                <Button ButtonType="ButtonType.Submit">
                    <Content>
                        @ButtonText
                    </Content>
                </Button>
            </Actions>
            <Content>
                <Loading State="_state" Retry="SubmitForm">
                    <Content>
                        <ValidationSummary />
                        <FormSection
                            Title="@Resources[Messages.Constructor_ConnectingTelegram]"
                            HelpText="@Resources[Messages.Constructor_FormSectionTokenCheckHelp]">
                            <Content>
                                <RouterLink
                                    OnClick="() => MoveToNext(Stage.CheckBot)"
                                    ComponentStyle="ComponentStyle.Secondary">
                                    <Content>@Resources[Messages.Constructor_Edit]</Content>
                                </RouterLink>
                                <FormFieldSet
                                    FieldId="bot-username"
                                    Label="@Resources[Messages.Constructor_FormSectionTokenFieldUserNameLabel]">
                                    <Content>
                                        <InputSingleLine
                                            FieldId="bot-username"
                                            @bind-Value="_formModel.UserName"
                                            IsDisabled="true" />
                                    </Content>
                                </FormFieldSet>
                            </Content>
                        </FormSection>
                        <FormSection
                            Title="@Resources[Messages.Constructor_FeaturesStore]"
                            HelpText="@Resources[Messages.Constructor_FormSectionFeaturesCheckHelp]">
                            <Content>
                                <RouterLink
                                    OnClick="() => MoveToNext(Stage.SelectFeatures)"
                                    ComponentStyle="ComponentStyle.Secondary">
                                    <Content>@Resources[Messages.Constructor_Edit]</Content>
                                </RouterLink>
                                @foreach (var feature in StagesState.AvailableFeatures)
                                {
                                    var fieldId = feature.Id.ToString();
                                    var selected = StagesState.FeatureIds.Contains(feature.Id)
                                        ? Resources[Messages.Constructor_BooleanTrueText]
                                        : Resources[Messages.Constructor_BooleanFalseText];

                                    <FormFieldSet
                                        FieldId="@fieldId"
                                        Label="@FeaturesFactory.CreateName(feature.Name)">
                                        <Content>
                                            <InputSingleLine
                                                FieldId="@fieldId"
                                                @bind-Value="selected"
                                                IsDisabled="true" />
                                        </Content>
                                    </FormFieldSet>
                                }
                            </Content>
                        </FormSection>
                        @foreach (var feature in StagesState.SelectedFeatures)
                        {
                            if (!_formModel.AvailableProperties.TryGetValue(feature.Name, out var settingSections))
                                continue;

                            foreach (var settingSection in settingSections)
                            {
                                <FormSection
                                    Title="@Resources[settingSection.HeaderMessageId]"
                                    HelpText="@Resources[settingSection.HelpMessageId]">
                                    <Content>
                                        <RouterLink
                                            OnClick="() => MoveToNext(Stage.SetSettings)"
                                            ComponentStyle="ComponentStyle.Secondary">
                                            <Content>@Resources[Messages.Constructor_Edit]</Content>
                                        </RouterLink>
                                        @foreach (var settingItem in settingSection.SettingItems)
                                        {
                                            var property = _formModel.Properties.SingleOrDefault(p => p.Key.Equals(
                                                settingItem.PropertyName,
                                                StringComparison.InvariantCultureIgnoreCase));
                                            var propertyValueAsString = GetValueAsText(settingItem, property.Value);

                                            <FormFieldSet
                                                FieldId="@settingItem.PropertyName"
                                                Label="@Resources[settingItem.LabelMessageId]">
                                                <Content>
                                                    <InputSingleLine
                                                        FieldId="@settingItem.PropertyName"
                                                        @bind-Value="propertyValueAsString"
                                                        IsDisabled="true" />
                                                </Content>
                                            </FormFieldSet>
                                        }
                                    </Content>
                                </FormSection>
                            }
                        }
                        <FormSection
                            Title="@Resources[Messages.Constructor_SupportedLanguages]"
                            HelpText="@Resources[Messages.Constructor_SupportedLanguagesCheck]">
                            <Content>
                                <RouterLink
                                    OnClick="() => MoveToNext(Stage.SetSettings)"
                                    ComponentStyle="ComponentStyle.Secondary">
                                    <Content>@Resources[Messages.Constructor_Edit]</Content>
                                </RouterLink>
                                <FormFieldSet FieldId="supported-languages" Label="@Resources[Messages.Constructor_Languages]">
                                    <Content>
                                        <InputMultiSelectList
                                            FieldId="supported-languages"
                                            Value="_formModel.SupportedLanguages"
                                            ValueExpression="() => _formModel.SupportedLanguages"
                                            Items="LanguageSettings.LanguageIds"
                                            TitleSelector="i => i.Value"
                                            ValueSelector="i => i.Value"
                                            IsDisabled="true"/>
                                        <ValidationMessage For="@(() => _formModel.SupportedLanguages)"/>
                                    </Content>
                                </FormFieldSet>
                            </Content>
                        </FormSection>
                    </Content>
                </Loading>
            </Content>
        </Panel>
    </EditForm>
</div>

@code {
    [Parameter, EditorRequired]
    public StagesState StagesState { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Stage, NavRoute> LinkFactory { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Stage?, Task> MoveToNext { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public string BotStorageKey { get; set; } = default!;

    private string ButtonText => StagesState.Id.HasValue
        ? Resources[Messages.Constructor_ButtonUpdateText]
        : Resources[Messages.Constructor_ButtonCreateText];
    
    private string FormId => StagesState.Id.HasValue
        ? AnalyticEvents.BotUpdated
        : AnalyticEvents.BotCreated;
    
    private string PanelHeader => string.Format(
        Resources[Messages.Constructor_CheckConfigurationTemplate],
        ButtonText.ToLowerInvariant());
    
    private readonly CompleteFormModel _formModel = new();
    private FluentValidationValidator? _fluentValidationValidator;
    private EditContext? _editContext;
    private LoadingState _state = LoadingState.Done();
    
    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(_formModel.Apply(StagesState));
    }

    private string GetValueAsText(SettingItem settingItem, string value)
    {
        var item = settingItem.Values.SingleOrDefault(s => s.Value.Equals(
            value,
            StringComparison.InvariantCultureIgnoreCase));
        
        return item is null ? string.Empty : Resources[item.MessageId];
    }
    
    private async Task SubmitForm()
    {
        if (_fluentValidationValidator is null || !await _fluentValidationValidator!.ValidateAsync())
            return;

        var appLocalStorage = ServiceProvider.GetRequiredService<AppLocalStorage>();

        await RequestProcessor.Process(
            async () =>
            {
                if (StagesState.Id.HasValue)
                    await BotService.Update(_formModel.ToUpdateBotCommand(StagesState.Id.Value));
                else
                    await BotService.Create(_formModel.ToCreateBotCommand());

                await appLocalStorage.Detach<StagesState>(BotStorageKey);
            },
            () => MoveToNext(null),
            s => _state = s);
    }
}