@inject IStringLocalizer<ConstructorResources> Localizer
@inject FeaturesFactory FeaturesFactory

<EditForm id="@FormId" EditContext="_editContext" OnSubmit="SubmitForm">
    <FluentValidationValidator @ref="_fluentValidationValidator" DisableAssemblyScanning="true" />
    <Panel Header="@PanelHeader" IsOpen="true">
        <Actions>
            <Button ButtonType="ButtonType.Submit">@ButtonText</Button>
        </Actions>
        <Content>
            <Loading State="State" Retry="Retry">
                <ValidationSummary />
                <FormSection
                    Title="@Localizer["ConnectingTelegram"]"
                    HelpText="@Localizer["FormSectionTokenCheckHelp"]">
                    <div class="actions">
                        <RouterLink
                            OnClick="() => MoveToNext(Stage.CheckBot)"
                            ComponentStyle="ComponentStyle.Secondary">@Localizer["Edit"]</RouterLink>
                    </div>
                    <FormFieldSet
                        FieldId="bot-username"
                        Label="@Localizer["FormSectionTokenFieldUserNameLabel"]">
                        <InputSingleLine
                            FieldId="bot-username"
                            @bind-Value="FormModel.UserName"
                            IsDisabled="true"/>
                    </FormFieldSet>
                </FormSection>
                <FormSection
                    Title="@Localizer["FeaturesStore"]"
                    HelpText="@Localizer["FormSectionFeaturesCheckHelp"]">
                    <div class="actions">
                        <RouterLink
                            OnClick="() => MoveToNext(Stage.SelectFeatures)"
                            ComponentStyle="ComponentStyle.Secondary">@Localizer["Edit"]</RouterLink>
                    </div>
                    @foreach (var feature in StagesState.AvailableFeatures)
                    {
                        var fieldId = feature.Id.ToString();
                        var selected = StagesState.FeatureIds.Contains(feature.Id)
                            ? Localizer["BooleanTrueText"].Value
                            : Localizer["BooleanFalseText"].Value;

                        <FormFieldSet
                            FieldId="@fieldId"
                            Label="@FeaturesFactory.CreateName(feature.Name)">
                            <InputSingleLine
                                FieldId="@fieldId"
                                @bind-Value="selected"
                                IsDisabled="true"/>
                        </FormFieldSet>
                    }
                </FormSection>
                @foreach (var feature in StagesState.SelectedFeatures)
                {
                    if (!FormModel.AvailableProperties.TryGetValue(feature.Name, out var settingSections))
                        continue;

                    foreach (var settingSection in settingSections)
                    {
                        <FormSection
                            Title="@Localizer[settingSection.HeaderMessageId]"
                            HelpText="@Localizer[settingSection.HelpMessageId]">
                            <div class="actions">
                                <RouterLink
                                    OnClick="() => MoveToNext(Stage.SetSettings)"
                                    ComponentStyle="ComponentStyle.Secondary">@Localizer["Edit"]</RouterLink>
                            </div>
                            @foreach (var settingItem in settingSection.SettingItems)
                            {
                                var property = FormModel.Properties.SingleOrDefault(p => p.Key.Equals(
                                    settingItem.PropertyName,
                                    StringComparison.InvariantCultureIgnoreCase));
                                var propertyValueAsString = GetValueAsText(settingItem, property.Value);

                                <FormFieldSet
                                    FieldId="@settingItem.PropertyName"
                                    Label="@Localizer[settingItem.LabelMessageId]">
                                    <InputSingleLine
                                        FieldId="@settingItem.PropertyName"
                                        @bind-Value="propertyValueAsString"
                                        IsDisabled="true"/>
                                </FormFieldSet>
                            }
                        </FormSection>
                    }
                }
                <FormSection
                    Title="@Localizer["SupportedLanguages"]"
                    HelpText="@Localizer["SupportedLanguagesCheck"]">
                    <div class="actions">
                        <RouterLink
                            OnClick="() => MoveToNext(Stage.SetSettings)"
                            ComponentStyle="ComponentStyle.Secondary">@Localizer["Edit"]</RouterLink>
                    </div>
                    <FormFieldSet FieldId="supported-languages" Label="@Localizer["Languages"]">
                        <InputMultiSelectList
                            FieldId="supported-languages"
                            Value="FormModel.SupportedLanguages"
                            ValueExpression="() => FormModel.SupportedLanguages"
                            Items="LanguageSettings.LanguageIds"
                            TitleSelector="i => i.Value"
                            ValueSelector="i => i.Value"
                            IsDisabled="true"/>
                        <ValidationMessage For="@(() => FormModel.SupportedLanguages)"/>
                    </FormFieldSet>
                </FormSection>
            </Loading>
        </Content>
    </Panel>
</EditForm>

@code {
    /// <summary>
    /// Form model.
    /// </summary>
    [Parameter, EditorRequired]
    public CompleteFormModel FormModel { get; set; } = default!;
    
    /// <summary>
    /// State of the stages.
    /// </summary>
    [Parameter, EditorRequired]
    public StagesState StagesState { get; set; } = default!;
    
    /// <summary>
    /// Component state.
    /// </summary>
    [Parameter, EditorRequired]
    public LoadingState State { get; set; } = default!;
    
    /// <summary>
    /// MoveToNext action.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Stage?, Task> MoveToNext { get; set; } = default!;
    
    /// <summary>
    /// Action for retry.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Task> Retry { get; set; } = default!;
    
    /// <summary>
    /// OnValidSubmit event.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback OnValidSubmit { get; set; }
    
    private FluentValidationValidator? _fluentValidationValidator;
    private EditContext? _editContext;
    
    private string FormId => StagesState.Id.HasValue
        ? AnalyticEvents.BotUpdated
        : AnalyticEvents.BotCreated;

    private string ButtonText => StagesState.Id.HasValue
        ? Localizer["ButtonUpdateText"]
        : Localizer["ButtonCreateText"];
    
    private string PanelHeader => string.Format(Localizer["CheckConfigurationTemplate"], ButtonText.ToLowerInvariant());
    
    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(FormModel);
    }
    
    private async Task SubmitForm()
    {
        if (_fluentValidationValidator is null || !await _fluentValidationValidator.ValidateAsync())
            return;

        await OnValidSubmit.InvokeAsync();
    }
    
    private string GetValueAsText(SettingItem settingItem, string value)
    {
        var item = settingItem.Values.SingleOrDefault(s => s.Value.Equals(
            value,
            StringComparison.InvariantCultureIgnoreCase));
        
        return item is null ? string.Empty : Localizer[item.MessageId];
    }
}