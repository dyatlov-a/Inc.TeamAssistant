@inject NavigationManager NavigationManager
@inject LanguageManager LanguageManager

<EditForm EditContext="_editContext" OnSubmit="SubmitForm">
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <div class="form-section">
        <div class="feature-selector">
            @foreach(var feature in BotFormModel.Features)
            {
                <div class="feature-selector__item @GetSelected(feature)" @onclick="() => SelectFeature(feature)">
                    <DynamicComponent Type="@GetFeatureType(feature.Name)" Parameters="IconParameters" />
                    <div class="feature-selector__name" title="@feature.Name">@feature.Name</div>
                </div>
            }
        </div>
        <ValidationMessage For="@(() => _formModel.FeatureIds)" />
    </div>
    <div class="form-controls">
        <button class="button button_white" type="submit">Next</button>
    </div>
</EditForm>

@code {
    private readonly Stage2SelectFeaturesFormModel _formModel = new();
    private Func<string?, string> _linkBuilder = default!;
    private FluentValidationValidator? _fluentValidationValidator;
    private Dictionary<string, object> IconParameters => new()
    {
        ["Size"] = "160px",
        ["Color"] = "#fff"
    };
    
    private Type GetFeatureType(string featureName) => featureName switch
    {
        "Appraiser" => typeof(AppraiserIcon),
        "CheckIn" => typeof(CheckInIcon),
        "RandomCoffee" => typeof(RandomCoffeeIcon),
        "Reviewer" => typeof(ReviewerIcon),
        _ => throw new ApplicationException()
    };
    
    [Parameter, EditorRequired]
    public BotFormModel BotFormModel { get; set; } = default!;
    
    private EditContext _editContext = new(new Stage2SelectFeaturesFormModel());

    protected override void OnParametersSet()
    {
        _linkBuilder = LanguageManager.CreateLinkBuilder();
        
        _formModel.FeatureIds = BotFormModel.FeatureIds.ToList();
        
        _editContext = new EditContext(_formModel);
        _editContext.SetFieldCssClassProvider(new ValidationCssClassProvider());
    }

    private void SelectFeature(BotFormModel.Feature feature)
    {
        ArgumentNullException.ThrowIfNull(feature);

        if (_formModel.FeatureIds.Contains(feature.Id))
            _formModel.FeatureIds.Remove(feature.Id);
        else
            _formModel.FeatureIds.Add(feature.Id);
    }

    private string GetSelected(BotFormModel.Feature feature)
    {
        ArgumentNullException.ThrowIfNull(feature);

        return _formModel.FeatureIds.Contains(feature.Id) ? "selected" : string.Empty;
    }

    private async Task SubmitForm()
    {
        if (!await _fluentValidationValidator!.ValidateAsync())
            return;

        BotFormModel.FeatureIds = _formModel.FeatureIds.ToArray();
        BotFormModel.PropertyKeys = BotFormModel.Features
            .Where(f => _formModel.FeatureIds.Contains(f.Id))
            .SelectMany(f => f.Properties)
            .ToArray();
        
        var stage = BotFormModel.PropertyKeys.Any()
            ? Stage.SetSettings.ToString().ToLower()
            : Stage.Complete.ToString().ToLower();
        var link = BotFormModel.Id.HasValue
            ? $"constructor/{BotFormModel.Id.Value:N}/{stage}"
            : $"constructor/{stage}";
        
        NavigationManager.NavigateTo(_linkBuilder(link));
    }
}