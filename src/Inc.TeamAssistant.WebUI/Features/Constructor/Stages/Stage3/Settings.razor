@inject IServiceProvider ServiceProvider
@inject IStringLocalizer<ConstructorResources> Localizer

<EditForm id="@AnalyticEvents.SettingsSpecified" EditContext="_editContext" OnSubmit="SubmitForm">
    <FluentValidationValidator @ref="_fluentValidationValidator" DisableAssemblyScanning="true" />
    <SettingsFormModelTracker StagesState="StagesState" OnChange="EmitStateChanged" />
    <Panel Header="@Localizer["Configuration"]" IsOpen="true">
        <Actions>
            <Button ButtonType="ButtonType.Submit">@Localizer["MoveNextTitle"]</Button>
        </Actions>
        <Content>
            @foreach (var feature in StagesState.SelectedFeatures)
            {
                if (!_formModel.AvailableProperties.TryGetValue(feature.Name, out var settingSections))
                    continue;

                foreach (var settingSection in settingSections)
                {
                    <FormSection
                        Title="@Localizer[settingSection.HeaderMessageId]"
                        HelpText="@Localizer[settingSection.HelpMessageId]">
                        @foreach (var settingItem in settingSection.SettingItems)
                        {
                            if (_formModel.Properties.TryGetValue(settingItem.PropertyName, out var value))
                            {
                                <FormFieldSet
                                    FieldId="@settingItem.PropertyName"
                                    Label="@Localizer[settingItem.LabelMessageId]">
                                    <InputSelectList
                                        FieldId="@settingItem.PropertyName"
                                        Value="value"
                                        ValueExpression="@(() => value)"
                                        ValueChanged="@((string v) => _formModel.ChangeProperty(settingItem.PropertyName, v))"
                                        Items="settingItem.Values"
                                        TitleSelector="i => Localizer[i.MessageId]"
                                        ValueSelector="i => i.Value" />
                                    <ValidationMessage For="@(() => value)"/>
                                </FormFieldSet>
                            }
                        }
                    </FormSection>
                }
            }
            <FormSection
                Title="@Localizer["SupportedLanguages"]"
                HelpText="@Localizer["SupportedLanguagesHelp"]">
                <FormFieldSet FieldId="supported-languages" Label="@Localizer["Languages"]">
                    <InputMultiSelectList
                        FieldId="supported-languages"
                        Value="_formModel.SupportedLanguages"
                        ValueExpression="() => _formModel.SupportedLanguages"
                        ValueChanged="(IEnumerable<string> v) => _formModel.SetLanguages(v)"
                        Items="LanguageSettings.LanguageIds"
                        TitleSelector="i => i.Value"
                        ValueSelector="i => i.Value" />
                    <ValidationMessage For="@(() => _formModel.SupportedLanguages)"/>
                </FormFieldSet>
            </FormSection>
        </Content>
    </Panel>
    <ValidationMessage For="@(() => _formModel.CalendarId)"/>
</EditForm>

@code {
    [Parameter, EditorRequired]
    public StagesState StagesState { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Stage, NavRoute> LinkFactory { get; set; } = default!;

    [Parameter, EditorRequired]
    public Func<Stage?, Task> MoveToNext { get; set; } = default!;

    [Parameter, EditorRequired]
    public string BotStorageKey { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Action EmitStateChanged { get; set; } = default!;
    
    private readonly SettingsFormModel _formModel = new();
    private FluentValidationValidator? _fluentValidationValidator;
    private EditContext? _editContext;

    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(_formModel.Apply(StagesState));
    }

    private async Task SubmitForm()
    {
        if (_fluentValidationValidator is null || !await _fluentValidationValidator.ValidateAsync())
            return;

        var appLocalStorage = ServiceProvider.GetRequiredService<AppLocalStorage>();
        await appLocalStorage.Attach(BotStorageKey, StagesState.Apply(_formModel));

        await MoveToNext(Stage.Complete);
    }
}