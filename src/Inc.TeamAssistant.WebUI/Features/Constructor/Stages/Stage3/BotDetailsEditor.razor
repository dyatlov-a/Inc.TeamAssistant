@inject IBotService BotService
@inject IStringLocalizer<ConstructorResources> Localizer
@inject RequestProcessor RequestProcessor

<EditForm id="@AnalyticEvents.BotDetailsChanged" EditContext="_editContext" OnSubmit="SubmitForm">
    <FluentValidationValidator @ref="_fluentValidationValidator" DisableAssemblyScanning="true" />
    <Panel Header="@Localizer["BotDetailsTelegram"]" Opened="Load" IsOpen="_isOpen">
        <Actions>
            <Button ButtonType="ButtonType.Submit">@Localizer["Save"]</Button>
        </Actions>
        <Content>
            <Loading State="_state" Retry="Load">
                <FormSection
                    Title="@Localizer["BotDetails"]"
                    HelpText="@Localizer["BotDetailsHelp"]">
                    @foreach (var item in _formModel.BotDetails.Where(b => StagesState.SupportedLanguages.Contains(b.LanguageId)))
                    {
                        <BotDetailsItemEditor Item="item"/>
                    }
                </FormSection>
            </Loading>
        </Content>
    </Panel>
</EditForm>

@code {
    [Parameter, EditorRequired]
    public StagesState StagesState { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Stage, NavRoute> LinkFactory { get; set; } = default!;

    [Parameter, EditorRequired]
    public Func<Stage?, Task> MoveToNext { get; set; } = default!;

    [Parameter, EditorRequired]
    public string BotStorageKey { get; set; } = default!;
    
    private bool _isOpen;
    private readonly BotDetailsFormModel _formModel = new();
    private FluentValidationValidator? _fluentValidationValidator;
    private EditContext? _editContext;
    private LoadingState _state = LoadingState.Done();
    
    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(_formModel);
    }

    private async Task Load()
    {
        _isOpen = true;
        
        await RequestProcessor.Process(
            async () =>
            {
                var botDetails = await BotService.GetDetails(new GetBotDetailsQuery(StagesState.Token));
                return botDetails;
            },
            nameof(BotDetailsEditor),
            r => _formModel.Apply(r),
            s =>
            {
                _state = s;
                StateHasChanged();
            });
        
        StateHasChanged();
    }
    
    public async Task SubmitForm()
    {
        if (_fluentValidationValidator is null || !await _fluentValidationValidator.ValidateAsync())
            return;
        
        await RequestProcessor.Process(
            () => BotService.SetDetails(_formModel.ToCommand(StagesState.Token)),
            () => { },
            s =>
            {
                _state = s;
                StateHasChanged();
            });
    }
}