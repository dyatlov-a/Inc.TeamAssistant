@inject IStringLocalizer<ConstructorResources> Localizer

<EditForm id="@AnalyticEvents.BotDetailsChanged" EditContext="_editContext" OnSubmit="SubmitForm">
    <FluentValidationValidator @ref="_fluentValidationValidator" DisableAssemblyScanning="true" />
    <Panel Header="@Localizer["BotDetailsTelegram"]" Opened="Retry" IsOpen="IsOpen">
        <Actions>
            <Button ButtonType="ButtonType.Submit">@Localizer["Save"]</Button>
        </Actions>
        <Content>
            <Loading State="State" Retry="Retry">
                <FormSection
                    Title="@Localizer["BotDetails"]"
                    HelpText="@Localizer["BotDetailsHelp"]">
                    @foreach (var language in StagesState.SupportedLanguages)
                    {
                        var item = FormModel.BotDetails
                            .SingleOrDefault(l => l.LanguageId == language) ?? FormModel.AddLanguage(language);

                        <BotDetailsItemEditor Item="item"/>
                    }
                </FormSection>
            </Loading>
        </Content>
    </Panel>
</EditForm>

@code {
    /// <summary>
    /// Form model.
    /// </summary>
    [Parameter, EditorRequired]
    public BotDetailsFormModel FormModel { get; set; } = default!;
    
    /// <summary>
    /// State of the stages.
    /// </summary>
    [Parameter, EditorRequired]
    public StagesState StagesState { get; set; } = default!;
    
    /// <summary>
    /// Is open flag.
    /// </summary>
    [Parameter, EditorRequired]
    public bool IsOpen { get; set; }
    
    /// <summary>
    /// Component state.
    /// </summary>
    [Parameter, EditorRequired]
    public LoadingState State { get; set; } = default!;
    
    /// <summary>
    /// Action for retry.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Task> Retry { get; set; } = default!;
    
    /// <summary>
    /// OnValidSubmit event.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback OnValidSubmit { get; set; }
    
    private FluentValidationValidator? _fluentValidationValidator;
    private EditContext? _editContext;
    
    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(FormModel);
    }
    
    public async Task SubmitForm()
    {
        FormModel.Apply(StagesState.SupportedLanguages);
        
        if (_fluentValidationValidator is null || !await _fluentValidationValidator.ValidateAsync())
            return;

        await OnValidSubmit.InvokeAsync();
    }
}