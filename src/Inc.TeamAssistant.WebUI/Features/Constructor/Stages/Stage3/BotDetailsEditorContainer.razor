@inject IBotService BotService
@inject RequestProcessor RequestProcessor

<BotDetailsEditor
    FormModel="_formModel"
    StagesState="StagesState"
    IsOpen="_isOpen"
    State="_state"
    Retry="Load"
    OnValidSubmit="SubmitForm" />

@code {
    [Parameter, EditorRequired]
    public StagesState StagesState { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Stage, NavRoute> LinkFactory { get; set; } = default!;

    [Parameter, EditorRequired]
    public Func<Stage?, Task> MoveToNext { get; set; } = default!;

    [Parameter, EditorRequired]
    public string BotStorageKey { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Action EmitStateChanged { get; set; } = default!;
    
    private bool _isOpen;
    private readonly BotDetailsFormModel _formModel = new();
    private readonly LoadingState _state = LoadingState.Done();

    private async Task Load()
    {
        _isOpen = true;
        
        var result = await RequestProcessor.Process(
            () => BotService.GetDetails(new GetBotDetailsQuery(StagesState.Token)),
            nameof(BotDetailsEditor),
            _state);

        _formModel.Apply(result);
        
        StateHasChanged();
    }
    
    public async Task SubmitForm()
    {
        await RequestProcessor.Process(
            () => BotService.SetDetails(_formModel.ToCommand(StagesState.Token)),
            _state);
    }
}