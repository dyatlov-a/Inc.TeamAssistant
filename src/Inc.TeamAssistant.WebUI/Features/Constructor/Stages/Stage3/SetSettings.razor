@inject IServiceProvider ServiceProvider
@inject IStringLocalizer<ConstructorResources> Localizer

<EditForm id="@AnalyticEvents.SettingsSpecified" EditContext="_editContext" OnSubmit="SubmitForm">
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <Panel Header="@Localizer["Configuration"].Value" IsOpen="true">
        <Actions>
            <Button ButtonType="ButtonType.Submit">
                <Content>
                    @Localizer["MoveNextTitle"].Value
                </Content>
            </Button>
        </Actions>
        <Content>
            @foreach (var feature in StagesState.SelectedFeatures)
            {
                if (!_formModel.AvailableProperties.TryGetValue(feature.Name, out var settingSections))
                    continue;

                foreach (var settingSection in settingSections)
                {
                    <FormSection
                        Title="@Localizer[settingSection.HeaderMessageId].Value"
                        HelpText="@Localizer[settingSection.HelpMessageId].Value">
                        <Content>
                            @foreach (var settingItem in settingSection.SettingItems)
                            {
                                if (_formModel.Properties.TryGetValue(settingItem.PropertyName, out var value))
                                {
                                    <FormFieldSet
                                        FieldId="@settingItem.PropertyName"
                                        Label="@Localizer[settingItem.LabelMessageId].Value">
                                        <Content>
                                            <InputSelectList
                                                FieldId="@settingItem.PropertyName"
                                                Value="value"
                                                ValueExpression="@(() => value)"
                                                ValueChanged="@((string v) => _formModel.ChangeProperty(settingItem.PropertyName, v))"
                                                Items="settingItem.Values"
                                                TitleSelector="i => Localizer[i.MessageId].Value"
                                                ValueSelector="i => i.Value" />
                                            <ValidationMessage For="@(() => value)"/>
                                        </Content>
                                    </FormFieldSet>
                                }
                            }
                        </Content>
                    </FormSection>
                }
            }
            <FormSection
                Title="@Localizer["SupportedLanguages"].Value"
                HelpText="@Localizer["SupportedLanguagesHelp"].Value">
                <Content>
                    <FormFieldSet FieldId="supported-languages" Label="@Localizer["Languages"].Value">
                        <Content>
                            <InputMultiSelectList
                                FieldId="supported-languages"
                                Value="_formModel.SupportedLanguages"
                                ValueExpression="() => _formModel.SupportedLanguages"
                                ValueChanged="(IEnumerable<string> v) => _formModel.SetLanguages(v)"
                                Items="LanguageSettings.LanguageIds"
                                TitleSelector="i => i.Value"
                                ValueSelector="i => i.Value" />
                            <ValidationMessage For="@(() => _formModel.SupportedLanguages)"/>
                        </Content>
                    </FormFieldSet>
                </Content>
            </FormSection>
        </Content>
    </Panel>
    <ValidationMessage For="@(() => _formModel.CalendarId)"/>
</EditForm>
<div class="optional-settings">
    <CalendarEditor IsOpen="!_formModel.CalendarId.HasValue" Selected="SelectedCalendar" />
</div>
<div class="optional-settings">
    <BotDetailsEditor SupportedLanguages="_formModel.SupportedLanguages" Token="@_formModel.Token" />
</div>

@code {
    [Parameter, EditorRequired]
    public StagesState StagesState { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Stage, NavRoute> LinkFactory { get; set; } = default!;

    [Parameter, EditorRequired]
    public Func<Stage?, Task> MoveToNext { get; set; } = default!;

    [Parameter, EditorRequired]
    public string BotStorageKey { get; set; } = default!;
    
    private readonly SetSettingsFormModel _formModel = new();
    private FluentValidationValidator? _fluentValidationValidator;
    private EditContext? _editContext;

    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(_formModel.Apply(StagesState));
    }

    private async Task SelectedCalendar(Guid calendarId)
    {
        var appLocalStorage = ServiceProvider.GetRequiredService<AppLocalStorage>();
        
        _formModel.CalendarId = calendarId;
        
        await appLocalStorage.Attach(BotStorageKey, StagesState.Apply(calendarId));
    }

    private async Task SubmitForm()
    {
        if (_fluentValidationValidator is null || !await _fluentValidationValidator.ValidateAsync())
            return;

        var appLocalStorage = ServiceProvider.GetRequiredService<AppLocalStorage>();
        await appLocalStorage.Attach(BotStorageKey, StagesState.Apply(_formModel));

        await MoveToNext(Stage.Complete);
    }
}