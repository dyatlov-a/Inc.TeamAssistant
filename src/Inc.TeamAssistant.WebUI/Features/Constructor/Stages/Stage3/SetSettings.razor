@inherits PersistentComponent<SetSettingsViewModel>

@inject IBotService BotService
@inject NavigationManager NavigationManager
@inject IDataEditor DataEditor

<EditForm EditContext="_editContext" OnSubmit="SubmitForm">
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <div class="constructor__form">
        @foreach (var feature in StagesState.SelectedFeatures)
        {
            if (!ViewModel.SettingSections.TryGetValue(feature.Name, out var settingSections))
                continue;

            foreach (var settingSection in settingSections)
            {
                <FormSection
                    Title="@ResourceProvider(settingSection.HeaderMessageId)"
                    HelpText="@ResourceProvider(settingSection.HelpMessageId)">
                    <Content>
                        @foreach (var settingItem in settingSection.SettingItems)
                        {
                            var property = _formModel.Properties.SingleOrDefault(p => p.Name.Equals(
                                settingItem.PropertyName,
                                StringComparison.InvariantCultureIgnoreCase));
                            if (property is null)
                                continue;
                            
                            <FormFieldSet
                                FieldId="@settingItem.PropertyName"
                                Label="@ResourceProvider(settingItem.LabelMessageId)">
                                <Content>
                                    <InputSelect
                                        id="@settingItem.PropertyName"
                                        @bind-Value="property.Value"
                                        class="form-control">
                                        @foreach (var value in settingItem.Values)
                                        {
                                            <option value="@value.Value">@ResourceProvider(value.MessageId)</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => property.Value)"/>
                                </Content>
                            </FormFieldSet>
                        }
                    </Content>
                </FormSection>
            }
        }
    </div>
    <div class="constructor__actions">
        <button type="submit" class="button button_white">@ViewModel.MoveNextTitle</button>
    </div>
</EditForm>

@code {
    [Parameter, EditorRequired]
    public StagesState StagesState { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Stage?, string> LinkFactory { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public string BotStorageKey { get; set; } = default!;
    
    private readonly SetSettingsFormModel _formModel = new();
    private FluentValidationValidator? _fluentValidationValidator;
    private EditContext? _editContext;
    
    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(_formModel.Apply(StagesState));
        
        base.OnParametersSet();
    }
    
    protected override async Task<SetSettingsViewModel> Initialize(Dictionary<string, string> resources)
    {
        var result = await BotService.GetProperties();
        
        return new SetSettingsViewModel(
            result.Result.Properties,
            resources[Messages.Constructor_MoveNextTitle]);
    }
    
    private async Task SubmitForm()
    {
        if (_fluentValidationValidator is null || !await _fluentValidationValidator.ValidateAsync())
            return;
        
        StagesState.Apply(_formModel);
        await DataEditor.Attach(BotStorageKey, StagesState);
        
        NavigationManager.NavigateTo(LinkFactory(Stage.Complete));
    }
}