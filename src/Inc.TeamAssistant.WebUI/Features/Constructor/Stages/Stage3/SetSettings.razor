@using Inc.TeamAssistant.Primitives.Languages

@inherits PersistentComponent<SetSettingsViewModel>

@inject IBotService BotService
@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider

<EditForm EditContext="_editContext" OnSubmit="SubmitForm">
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <div class="constructor__form">
        @foreach (var feature in StagesState.SelectedFeatures)
        {
            if (!ViewModel.SettingSections.TryGetValue(feature.Name, out var settingSections))
                continue;

            foreach (var settingSection in settingSections)
            {
                <FormSection
                    Title="@ResourceProvider(settingSection.HeaderMessageId)"
                    HelpText="@ResourceProvider(settingSection.HelpMessageId)">
                    <Content>
                        @foreach (var settingItem in settingSection.SettingItems)
                        {
                            var property = _formModel.Properties.SingleOrDefault(p => p.Name.Equals(
                                settingItem.PropertyName,
                                StringComparison.InvariantCultureIgnoreCase));
                            if (property is null)
                                continue;
                            
                            <FormFieldSet
                                FieldId="@settingItem.PropertyName"
                                Label="@ResourceProvider(settingItem.LabelMessageId)">
                                <Content>
                                    <InputSelect
                                        id="@settingItem.PropertyName"
                                        @bind-Value="property.Value"
                                        class="form-control">
                                        @foreach (var value in settingItem.Values)
                                        {
                                            <option value="@value.Value">@ResourceProvider(value.MessageId)</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => property.Value)"/>
                                </Content>
                            </FormFieldSet>
                        }
                    </Content>
                </FormSection>
            }
        }
        <FormSection
            Title="@ViewModel.SupportedLanguages"
            HelpText="@ViewModel.SupportedLanguagesHelp">
            <Content>
                <FormFieldSet
                    FieldId="supported-languages"
                    Label="@ViewModel.Languages">
                    <Content>
                        <div class="form-control">
                            @foreach (var languageId in LanguageSettings.LanguageIds)
                            {
                                <span
                                    class="supported-language @CssClass(languageId)"
                                    @onclick="() => ToggleLanguage(languageId)">
                                    @languageId.Value
                                </span>
                            }
                        </div>
                    </Content>
                </FormFieldSet>
                @foreach (var item in _formModel.BotDetails.Where(b => _formModel.SupportedLanguages.Contains(b.LanguageId)))
                {
                    var botNameId = $"bot-name-{item.LanguageId}";
                    var botShortDescriptionId = $"bot-short-description-{item.LanguageId}";
                    var botDescriptionId = $"bot-description-{item.LanguageId}";

                    <FormFieldSet
                        FieldId="@botNameId"
                        Label="@MessageWithLanguage(ViewModel.BotName, item.LanguageId)">
                        <Content>
                            <InputText
                                @bind-Value="item.Name"
                                class="form-control form-control_white"
                                id="@botNameId" />
                            <ValidationMessage For="@(() => item.Name)"/>
                        </Content>
                    </FormFieldSet>
                    <FormFieldSet
                        FieldId="@botShortDescriptionId"
                        Label="@MessageWithLanguage(ViewModel.BotShortDescription, item.LanguageId)">
                        <Content>
                            <InputText
                                @bind-Value="item.ShortDescription"
                                class="form-control"
                                id="@botShortDescriptionId" />
                            <ValidationMessage For="@(() => item.ShortDescription)"/>
                        </Content>
                    </FormFieldSet>
                    <FormFieldSet
                        FieldId="@botDescriptionId"
                        Label="@MessageWithLanguage(ViewModel.BotDescription, item.LanguageId)">
                        <Content>
                            <InputTextArea
                                @bind-Value="item.Description"
                                class="form-control form-control_textarea"
                                id="@botDescriptionId" />
                            <ValidationMessage For="@(() => item.Description)"/>
                        </Content>
                    </FormFieldSet>
                }
            </Content>
        </FormSection>
    </div>
    <div class="constructor__actions">
        <button type="submit" class="button button_white">@ViewModel.MoveNextTitle</button>
    </div>
</EditForm>

@code {
    [Parameter, EditorRequired]
    public StagesState StagesState { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Stage?, string> LinkFactory { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public string BotStorageKey { get; set; } = default!;
    
    private readonly SetSettingsFormModel _formModel = new();
    private FluentValidationValidator? _fluentValidationValidator;
    private EditContext? _editContext;
    
    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(_formModel.Apply(StagesState));
        
        base.OnParametersSet();
    }
    
    protected override async Task<SetSettingsViewModel> Initialize(Dictionary<string, string> resources)
    {
        var getPropertiesResult = await BotService.GetProperties();
        
        return new SetSettingsViewModel(
            getPropertiesResult.Result.Properties,
            resources[Messages.Constructor_MoveNextTitle],
            resources[Messages.Constructor_SupportedLanguages],
            resources[Messages.Constructor_SupportedLanguagesHelp],
            resources[Messages.Constructor_Languages],
            resources[Messages.Constructor_BotName],
            resources[Messages.Constructor_BotShortDescription],
            resources[Messages.Constructor_BotDescription]);
    }
    
    private async Task SubmitForm()
    {
        if (_fluentValidationValidator is null || !await _fluentValidationValidator.ValidateAsync())
            return;
        
        await ServiceProvider.GetRequiredService<DataEditor>().Attach(BotStorageKey, StagesState.Apply(_formModel));
        
        NavigationManager.NavigateTo(LinkFactory(Stage.Complete));
    }
    
    private string CssClass(LanguageId languageId)
    {
        return _formModel.SupportedLanguages.Contains(languageId.Value, StringComparer.InvariantCultureIgnoreCase)
            ? "supported-language_selected"
            : string.Empty;
    }

    private void ToggleLanguage(LanguageId languageId)
    {
        var languageCode = languageId.Value;
        
        if (_formModel.SupportedLanguages.Contains(languageCode, StringComparer.InvariantCultureIgnoreCase))
            _formModel.SupportedLanguages.Remove(languageCode);
        else
            _formModel.SupportedLanguages.Add(languageCode);
    }
    
    private string MessageWithLanguage(string message, string languageCode) => $"{message} {languageCode}";
}