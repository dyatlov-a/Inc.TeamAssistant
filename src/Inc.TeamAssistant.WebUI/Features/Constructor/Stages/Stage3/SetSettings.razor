@inject IServiceProvider ServiceProvider
@inject ResourcesManager Resources

<EditForm id="@AnalyticEvents.SettingsSpecified" EditContext="_editContext" OnSubmit="SubmitForm">
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <Panel Header="@Resources[Messages.Constructor_Configuration]" IsOpen="true">
        <Actions>
            <Button ButtonType="ButtonType.Submit">
                <Content>
                    @Resources[Messages.Constructor_MoveNextTitle]
                </Content>
            </Button>
        </Actions>
        <Content>
            @foreach (var feature in StagesState.SelectedFeatures)
            {
                if (!_formModel.AvailableProperties.TryGetValue(feature.Name, out var settingSections))
                    continue;

                foreach (var settingSection in settingSections)
                {
                    <FormSection
                        Title="@Resources[settingSection.HeaderMessageId]"
                        HelpText="@Resources[settingSection.HelpMessageId]">
                        <Content>
                            @foreach (var settingItem in settingSection.SettingItems)
                            {
                                var property = _formModel.Properties.SingleOrDefault(p => p.Title.Equals(
                                    settingItem.PropertyName,
                                    StringComparison.InvariantCultureIgnoreCase));
                                if (property is null)
                                    continue;

                                <FormFieldSet
                                    FieldId="@settingItem.PropertyName"
                                    Label="@Resources[settingItem.LabelMessageId]">
                                    <Content>
                                        <InputSelectList
                                            FieldId="@settingItem.PropertyName"
                                            Value="property.Value"
                                            ValueExpression="@(() => property.Value)"
                                            ValueChanged="@((string v) => property.Value = v)"
                                            Items="settingItem.Values"
                                            TitleSelector="i => Resources[i.MessageId]"
                                            ValueSelector="i => i.Value" />
                                        <ValidationMessage For="@(() => property.Value)"/>
                                    </Content>
                                </FormFieldSet>
                            }
                        </Content>
                    </FormSection>
                }
            }
            <FormSection
                Title="@Resources[Messages.Constructor_SupportedLanguages]"
                HelpText="@Resources[Messages.Constructor_SupportedLanguagesHelp]">
                <Content>
                    <FormFieldSet FieldId="supported-languages" Label="@Resources[Messages.Constructor_Languages]">
                        <Content>
                            <InputMultiSelectList
                                FieldId="supported-languages"
                                Value="_formModel.SupportedLanguages"
                                ValueExpression="() => _formModel.SupportedLanguages"
                                ValueChanged="(IEnumerable<string> v) => _formModel.SetLanguages(v)"
                                Items="LanguageSettings.LanguageIds"
                                TitleSelector="i => i.Value"
                                ValueSelector="i => i.Value" />
                            <ValidationMessage For="@(() => _formModel.SupportedLanguages)"/>
                        </Content>
                    </FormFieldSet>
                </Content>
            </FormSection>
        </Content>
    </Panel>
    <ValidationMessage For="@(() => _formModel.CalendarId)"/>
</EditForm>
<CalendarEditor IsOpen="!_formModel.CalendarId.HasValue" Selected="SelectedCalendar" />
<BotDetailsEditor SupportedLanguages="_formModel.SupportedLanguages" Token="@_formModel.Token" />

@code {
    [Parameter, EditorRequired]
    public StagesState StagesState { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Stage, NavRoute> LinkFactory { get; set; } = default!;

    [Parameter, EditorRequired]
    public Func<Stage?, Task> MoveToNext { get; set; } = default!;

    [Parameter, EditorRequired]
    public string BotStorageKey { get; set; } = default!;
    
    private readonly SetSettingsFormModel _formModel = new();
    private FluentValidationValidator? _fluentValidationValidator;
    private EditContext? _editContext;

    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(_formModel.Apply(StagesState));
    }

    private async Task SelectedCalendar(Guid calendarId)
    {
        var appLocalStorage = ServiceProvider.GetRequiredService<AppLocalStorage>();
        
        _formModel.CalendarId = calendarId;
        
        await appLocalStorage.Attach(BotStorageKey, StagesState.Apply(calendarId));
    }

    private async Task SubmitForm()
    {
        if (_fluentValidationValidator is null || !await _fluentValidationValidator.ValidateAsync())
            return;

        var appLocalStorage = ServiceProvider.GetRequiredService<AppLocalStorage>();
        await appLocalStorage.Attach(BotStorageKey, StagesState.Apply(_formModel));

        await MoveToNext(Stage.Complete);
    }
}