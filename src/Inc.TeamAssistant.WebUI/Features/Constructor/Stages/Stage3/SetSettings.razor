@using Inc.TeamAssistant.Primitives.FeatureProperties
@using Inc.TeamAssistant.Primitives.Languages

@inject IBotService BotService
@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider
@inject ResourcesManager Resources
@inject RequestProcessor RequestProcessor

<Loading State="_state" IsFullscreen="true">
    <Content>
        <EditForm EditContext="_editContext" OnSubmit="SubmitForm">
            <FluentValidationValidator @ref="_fluentValidationValidator" />
            <div class="constructor__form">
                @foreach (var feature in StagesState.SelectedFeatures)
                {
                    if (!_properties.TryGetValue(feature.Name, out var settingSections))
                        continue;

                    foreach (var settingSection in settingSections)
                    {
                        <FormSection
                            Title="@Resources[settingSection.HeaderMessageId]"
                            HelpText="@Resources[settingSection.HelpMessageId]">
                            <Content>
                                @foreach (var settingItem in settingSection.SettingItems)
                                {
                                    var property = _formModel.Properties.SingleOrDefault(p => p.Name.Equals(
                                        settingItem.PropertyName,
                                        StringComparison.InvariantCultureIgnoreCase));
                                    if (property is null)
                                        continue;
                            
                                    <FormFieldSet
                                        FieldId="@settingItem.PropertyName"
                                        Label="@Resources[settingItem.LabelMessageId]">
                                        <Content>
                                            <InputSelect
                                                id="@settingItem.PropertyName"
                                                @bind-Value="property.Value"
                                                class="form-control">
                                                @foreach (var value in settingItem.Values)
                                                {
                                                    <option value="@value.Value">@Resources[value.MessageId]</option>
                                                }
                                            </InputSelect>
                                            <ValidationMessage For="@(() => property.Value)"/>
                                        </Content>
                                    </FormFieldSet>
                                }
                            </Content>
                        </FormSection>
                    }
                }
                <FormSection
                    Title="@Resources[Messages.Constructor_SupportedLanguages]"
                    HelpText="@Resources[Messages.Constructor_SupportedLanguagesHelp]">
                    <Content>
                        <FormFieldSet
                            FieldId="supported-languages"
                            Label="@Resources[Messages.Constructor_Languages]">
                            <Content>
                                <div id="supported-languages" class="form-control enabled">
                                    @foreach (var languageId in LanguageSettings.LanguageIds)
                                    {
                                        <span
                                            class="multiselect__item @CssClass(languageId)"
                                            @onclick="() => ToggleLanguage(languageId)">
                                            @languageId.Value
                                        </span>
                                    }
                                </div>
                                <ValidationMessage For="@(() => _formModel.SupportedLanguages)"/>
                            </Content>
                        </FormFieldSet>
                        @foreach (var item in _formModel.BotDetails.Where(b => _formModel.SupportedLanguages.Contains(b.LanguageId)))
                        {
                            <BotDetailsEditor BotDetails="item" />
                        }
                    </Content>
                </FormSection>
            </div>
            <div class="constructor__actions">
                <button type="submit" class="button button_light">
                    @Resources[Messages.Constructor_MoveNextTitle]
                </button>
            </div>
        </EditForm>
    </Content>
</Loading>

@code {
    [Parameter, EditorRequired]
    public StagesState StagesState { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Stage?, string> LinkFactory { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public string BotStorageKey { get; set; } = default!;
    
    private readonly SetSettingsFormModel _formModel = new();
    private FluentValidationValidator? _fluentValidationValidator;
    private EditContext? _editContext;
    private RequestState _state = RequestState.Done();
    private IReadOnlyDictionary<string, IReadOnlyCollection<SettingSection>> _properties = new Dictionary<string, IReadOnlyCollection<SettingSection>>();
    
    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(_formModel.Apply(StagesState));
    }

    protected override Task OnParametersSetAsync() => Load();

    private async Task Load()
    {
        _state = await RequestProcessor.Process(
            () => BotService.GetProperties(),
            nameof(SetSettings),
            r =>
            {
                _properties = r.Properties;
                _state = RequestState.Done();
                StateHasChanged();
            });
    }
    
    private async Task SubmitForm()
    {
        if (_fluentValidationValidator is null || !await _fluentValidationValidator.ValidateAsync())
            return;
        
        await ServiceProvider.GetRequiredService<DataEditor>().Attach(BotStorageKey, StagesState.Apply(_formModel));
        
        NavigationManager.NavigateTo(LinkFactory(Stage.Calendar));
    }
    
    private string CssClass(LanguageId languageId)
    {
        return _formModel.SupportedLanguages.Contains(languageId.Value, StringComparer.InvariantCultureIgnoreCase)
            ? "multiselect__item_selected"
            : string.Empty;
    }

    private void ToggleLanguage(LanguageId languageId)
    {
        var languageCode = languageId.Value;
        
        if (_formModel.SupportedLanguages.Contains(languageCode, StringComparer.InvariantCultureIgnoreCase))
            _formModel.SupportedLanguages.Remove(languageCode);
        else
            _formModel.SupportedLanguages.Add(languageCode);
    }
}