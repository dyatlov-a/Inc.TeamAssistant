@inject ICalendarService CalendarService
@inject IStringLocalizer<ConstructorResources> Localizer
@inject RequestProcessor RequestProcessor
@inject IRenderContext RenderContext
@inject IJSRuntime JsRuntime

<EditForm id="@AnalyticEvents.CalendarChanged" EditContext="_editContext" OnSubmit="SubmitForm">
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <Panel Header="@Localizer["WorkCalendar"].Value" Opened="Load" IsOpen="_isOpen">
        <Actions>
            <Button ButtonType="ButtonType.Submit">
                <Content>
                    @Localizer["Save"].Value
                </Content>
            </Button>
        </Actions>
        <Content>
            <Loading State="_state" Retry="Load">
                <Content>
                    <FormSection
                        Title="@Localizer["WorkTimeTitle"].Value"
                        HelpText="@Localizer["WorkTimeHelp"].Value">
                        <Content>
                            <FormFieldSet
                                FieldId="work-all-day"
                                Label="@Localizer["WorkAllDayLabel"].Value">
                                <Content>
                                    <InputCheckbox id="work-all-day" @bind-Value="_formModel.WorkAllDay"/>
                                </Content>
                            </FormFieldSet>
                            @if (!_formModel.WorkAllDay)
                            {
                                <div class="work-schedule__items">
                                    <div class="work-schedule__item">
                                        <FormFieldSet
                                            FieldId="work-schedule-start"
                                            Label="@Localizer["WorkTimeStartLabel"].Value">
                                            <Content>
                                                <InputTimeOnly
                                                    FieldId="work-schedule-start"
                                                    @bind-Value="_formModel.Start"/>
                                                <ValidationMessage For="@(() => _formModel.Start)"/>
                                            </Content>
                                        </FormFieldSet>
                                        
                                    </div>
                                    <div class="work-schedule__item">
                                        <FormFieldSet
                                            FieldId="work-schedule-end"
                                            Label="@Localizer["WorkTimeEndLabel"].Value">
                                            <Content>
                                                <InputTimeOnly
                                                    FieldId="work-schedule-end"
                                                    @bind-Value="_formModel.End"/>
                                                <ValidationMessage For="@(() => _formModel.End)"/>
                                            </Content>
                                        </FormFieldSet>
                                    </div>
                                </div>
                            }
                        </Content>
                    </FormSection>
                    <FormSection
                        Title="@Localizer["WeekendsTitle"].Value"
                        HelpText="@Localizer["WeekendsHelp"].Value">
                        <Content>
                            <FormFieldSet FieldId="weekends" Label="@Localizer["WeekendsLabel"].Value">
                                <Content>
                                    <InputMultiSelectList
                                        FieldId="weekends"
                                        Value="_formModel.SelectedWeekends"
                                        ValueExpression="@(() => _formModel.SelectedWeekends)"
                                        ValueChanged="(IEnumerable<DayOfWeek> v) => _formModel.SetWeekends(v)"
                                        Items="Enum.GetValues<DayOfWeek>()"
                                        TitleSelector="i => Localizer[GetDayOfWeekTitle(i)].Value"
                                        ValueSelector="i => i" />
                                    <ValidationMessage For="@(() => _formModel.SelectedWeekends)"/>
                                </Content>
                            </FormFieldSet>
                        </Content>
                    </FormSection>
                    <FormSection
                        Title="@Localizer["HolidaysTitle"].Value"
                        AsRows="true">
                        <HelpContent>
                            @Localizer["HolidaysHelp"].Value
                            <ValidationMessage For="@(() => _formModel.Holidays)"/>
                        </HelpContent>
                        <Content>
                            <div class="holiday-items">
                                @foreach (var holiday in _formModel.Holidays)
                                {
                                    <div class="holiday-items__item">
                                        <div class="holiday-items__item-control">
                                            <FormFieldSet
                                                FieldId="@holiday.DateFieldId"
                                                Label="@Localizer["DateLabel"].Value">
                                                <Content>
                                                    <InputDateOnly
                                                        FieldId="@holiday.DateFieldId"
                                                        @bind-Value="holiday.Date"/>
                                                </Content>
                                            </FormFieldSet>
                                        </div>
                                        <div class="holiday-items__item-control">
                                            <FormFieldSet
                                                FieldId="@holiday.WorkdayFieldId"
                                                Label="@Localizer["WorkdayLabel"].Value">
                                                <Content>
                                                    <InputCheckbox
                                                        id="@holiday.WorkdayFieldId"
                                                        @bind-Value="holiday.IsWorkday"/>
                                                </Content>
                                            </FormFieldSet>
                                        </div>
                                        <div class="holiday-items__item-control">
                                            <div class="holiday-items__buttons">
                                                <Button
                                                    ComponentStyle="ComponentStyle.Secondary"
                                                    ButtonMode="ButtonMode.Small"
                                                    OnClick="() => _formModel.RemoveHoliday(holiday)">
                                                    <Content>
                                                        <TrashIcon Size="20px" ComponentStyle="ComponentStyle.Secondary"/>
                                                    </Content>
                                                </Button>
                                            </div>
                                        </div>
                                    </div>
                                }
                                <div class="holiday-items__item">
                                    <div class="holiday-items__buttons">
                                        <Button
                                            ComponentStyle="ComponentStyle.Secondary"
                                            ButtonMode="ButtonMode.Small"
                                            OnClick="_formModel.AddHoliday">
                                            <Content>
                                                @Localizer["AddHolidayLabel"].Value
                                            </Content>
                                        </Button>
                                    </div>
                                </div>
                            </div>
                        </Content>
                    </FormSection>
                </Content>
            </Loading>
        </Content>
    </Panel>
</EditForm>

@code {
    [Parameter, EditorRequired]
    public EventCallback<Guid> Selected { get; set; }
    
    [Parameter, EditorRequired]
    public bool IsOpen { get; set; }

    private bool _isOpen;
    private readonly CalendarFromModel _formModel = new();
    private FluentValidationValidator? _fluentValidationValidator;
    private EditContext? _editContext;
    private LoadingState _state = LoadingState.Done();
    
    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(_formModel);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && IsOpen)
            await Load();
    }

    private async Task Load()
    {
        var clientTimezoneOffset = await JsRuntime.Execute(JsFunctions.GetTimezone());
        
        _isOpen = true;
        await RequestProcessor.Process(
            () => CalendarService.GetCalendarByOwner(),
            nameof(CalendarEditor),
            r =>
            {
                if (r is null)
                    _formModel.Apply(clientTimezoneOffset);
                else
                    _formModel.Apply(r, clientTimezoneOffset);
            },
            s =>
            {
                _state = s;
                StateHasChanged();
            });
        
        StateHasChanged();
    }
    
    private string GetDayOfWeekTitle(DayOfWeek dayOfWeek) => $"DayOfWeek{dayOfWeek}";
    
    public async Task SubmitForm()
    {
        if (_fluentValidationValidator is null || !await _fluentValidationValidator.ValidateAsync())
            return;
        
        await RequestProcessor.Process(
            async () =>
            {
                var calendarId = await CalendarService.Update(_formModel.ToCommand());
                await Selected.InvokeAsync(calendarId);
            },
            () => {},
            s =>
            {
                _state = s;
                StateHasChanged();
            });
    }
}