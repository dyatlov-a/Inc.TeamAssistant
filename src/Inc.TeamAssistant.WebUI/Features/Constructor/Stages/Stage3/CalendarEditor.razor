@inject IStringLocalizer<ConstructorResources> Localizer

<EditForm id="@AnalyticEvents.CalendarChanged" EditContext="_editContext" OnSubmit="SubmitForm">
    <FluentValidationValidator @ref="_fluentValidationValidator" DisableAssemblyScanning="true" />
    <Panel Header="@Localizer["WorkCalendar"]" Opened="Retry" IsOpen="IsOpen">
        <Actions>
            <Button ButtonType="ButtonType.Submit">@Localizer["Save"]</Button>
        </Actions>
        <Content>
            <Loading State="State" Retry="Retry">
                <FormSection
                    Title="@Localizer["WorkTimeTitle"]"
                    HelpText="@Localizer["WorkTimeHelp"]">
                    <FormFieldSet
                        FieldId="work-all-day"
                        Label="@Localizer["WorkAllDayLabel"]">
                        <InputCheckbox id="work-all-day" @bind-Value="FormModel.WorkAllDay"/>
                    </FormFieldSet>
                    @if (!FormModel.WorkAllDay)
                    {
                        <div class="work-schedule__items">
                            <div class="work-schedule__item">
                                <FormFieldSet
                                    FieldId="work-schedule-start"
                                    Label="@Localizer["WorkTimeStartLabel"]">
                                    <InputTimeOnly
                                        FieldId="work-schedule-start"
                                        @bind-Value="FormModel.Start"/>
                                    <ValidationMessage For="@(() => FormModel.Start)"/>
                                </FormFieldSet>
                            </div>
                            <div class="work-schedule__item">
                                <FormFieldSet
                                    FieldId="work-schedule-end"
                                    Label="@Localizer["WorkTimeEndLabel"]">
                                    <InputTimeOnly
                                        FieldId="work-schedule-end"
                                        @bind-Value="FormModel.End"/>
                                    <ValidationMessage For="@(() => FormModel.End)"/>
                                </FormFieldSet>
                            </div>
                        </div>
                    }
                </FormSection>
                <FormSection
                    Title="@Localizer["WeekendsTitle"]"
                    HelpText="@Localizer["WeekendsHelp"]">
                    <FormFieldSet FieldId="weekends" Label="@Localizer["WeekendsLabel"]">
                        <InputMultiSelectList
                            FieldId="weekends"
                            Value="FormModel.SelectedWeekends"
                            ValueExpression="@(() => FormModel.SelectedWeekends)"
                            ValueChanged="(IEnumerable<DayOfWeek> v) => FormModel.SetWeekends(v)"
                            Items="Enum.GetValues<DayOfWeek>()"
                            TitleSelector="i => Localizer[GetDayOfWeekTitle(i)]"
                            ValueSelector="i => i" />
                        <ValidationMessage For="@(() => FormModel.SelectedWeekends)"/>
                    </FormFieldSet>
                </FormSection>
                <FormSection
                    Title="@Localizer["HolidaysTitle"]"
                    AsRows="true">
                    <HelpContent>
                        @Localizer["HolidaysHelp"]
                        <ValidationMessage For="@(() => FormModel.Holidays)"/>
                    </HelpContent>
                    <ChildContent>
                        <div class="holiday-items">
                            @foreach (var holiday in FormModel.Holidays)
                            {
                                <div class="holiday-items__item">
                                    <div class="holiday-items__item-control">
                                        <FormFieldSet
                                            FieldId="@holiday.DateFieldId"
                                            Label="@Localizer["DateLabel"]">
                                            <InputDateOnly
                                                FieldId="@holiday.DateFieldId"
                                                @bind-Value="holiday.Date"/>
                                        </FormFieldSet>
                                    </div>
                                    <div class="holiday-items__item-control">
                                        <FormFieldSet
                                            FieldId="@holiday.WorkdayFieldId"
                                            Label="@Localizer["WorkdayLabel"]">
                                            <InputCheckbox
                                                id="@holiday.WorkdayFieldId"
                                                @bind-Value="holiday.IsWorkday"/>
                                        </FormFieldSet>
                                    </div>
                                    <div class="holiday-items__item-control">
                                        <div class="holiday-items__buttons">
                                            <Button
                                                ComponentStyle="ComponentStyle.Secondary"
                                                ButtonMode="ButtonMode.Small"
                                                OnClick="() => FormModel.RemoveHoliday(holiday)">
                                                <TrashIcon Size="20px" ComponentStyle="ComponentStyle.Secondary"/>
                                            </Button>
                                        </div>
                                    </div>
                                </div>
                            }
                            <div class="holiday-items__item">
                                <div class="holiday-items__buttons">
                                    <Button
                                        ComponentStyle="ComponentStyle.Secondary"
                                        ButtonMode="ButtonMode.Small"
                                        OnClick="FormModel.AddHoliday">@Localizer["AddHolidayLabel"]</Button>
                                </div>
                            </div>
                        </div>
                    </ChildContent>
                </FormSection>
            </Loading>
        </Content>
    </Panel>
</EditForm>

@code {
    /// <summary>
    /// Is open flag.
    /// </summary>
    [Parameter, EditorRequired]
    public bool IsOpen { get; set; }
    
    /// <summary>
    /// Form model.
    /// </summary>
    [Parameter, EditorRequired]
    public CalendarFormModel FormModel { get; set; } = default!;
    
    /// <summary>
    /// Component state.
    /// </summary>
    [Parameter, EditorRequired]
    public LoadingState State { get; set; } = default!;
    
    /// <summary>
    /// Action for retry.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Task> Retry { get; set; } = default!;
    
    /// <summary>
    /// OnValidSubmit event.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback OnValidSubmit { get; set; }
    
    private FluentValidationValidator? _fluentValidationValidator;
    private EditContext? _editContext;
    
    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(FormModel);
    }
    
    public async Task SubmitForm()
    {
        if (_fluentValidationValidator is null || !await _fluentValidationValidator.ValidateAsync())
            return;

        await OnValidSubmit.InvokeAsync();
    }
    
    private string GetDayOfWeekTitle(DayOfWeek dayOfWeek) => $"DayOfWeek{dayOfWeek}";
}