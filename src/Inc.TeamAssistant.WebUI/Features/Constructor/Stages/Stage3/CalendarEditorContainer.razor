@inject ICalendarService CalendarService
@inject RequestProcessor RequestProcessor
@inject IServiceProvider ServiceProvider
@inject IJSRuntime JsRuntime

<CalendarEditor FormModel="_formModel" IsOpen="_isOpen" State="_state" Retry="Load" OnValidSubmit="SubmitForm" />

@code {
    [Parameter, EditorRequired]
    public StagesState StagesState { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Func<Stage, NavRoute> LinkFactory { get; set; } = default!;

    [Parameter, EditorRequired]
    public Func<Stage?, Task> MoveToNext { get; set; } = default!;

    [Parameter, EditorRequired]
    public string BotStorageKey { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public Action EmitStateChanged { get; set; } = default!;

    private bool _isOpen;
    private readonly CalendarFormModel _formModel = new();
    private readonly LoadingState _state = LoadingState.Done();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !StagesState.CalendarId.HasValue)
            await Load();
    }

    private async Task Load()
    {
        _isOpen = true;
        
        // TODO: add loading for clientTimezoneOffset
        var clientTimezoneOffset = await JsRuntime.Execute(JsFunctions.GetTimezone());
        var result = await RequestProcessor.Process(
            () => CalendarService.GetCalendarByOwner(),
            nameof(CalendarEditor),
            _state);
        
        if (result == GetCalendarByOwnerResult.Empty)
            _formModel.Apply(clientTimezoneOffset);
        else
            _formModel.Apply(result, clientTimezoneOffset);
        
        StateHasChanged();
    }
    
    public async Task SubmitForm()
    {
        var result = await RequestProcessor.Process(
            () => CalendarService.Update(_formModel.ToCommand()),
            _state);
        
        await SelectedCalendar(result.Id);
        
        StateHasChanged();
    }
    
    private async Task SelectedCalendar(Guid calendarId)
    {
        var appLocalStorage = ServiceProvider.GetRequiredService<AppLocalStorage>();
        
        await appLocalStorage.Attach(BotStorageKey, StagesState.Apply(calendarId));

        EmitStateChanged();
    }
}