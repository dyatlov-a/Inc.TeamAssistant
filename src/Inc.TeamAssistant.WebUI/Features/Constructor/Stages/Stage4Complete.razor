@using Inc.TeamAssistant.Constructor.Model.Commands.CreateBot
@using Inc.TeamAssistant.Constructor.Model.Commands.UpdateBot

@inject NavigationManager NavigationManager
@inject LanguageManager LanguageManager
@inject IBotService BotService

<EditForm EditContext="_editContext" OnSubmit="SubmitForm">
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <ValidationSummary />
    
    <div class="form-section">
        <div class="form-section__legend">
            <h4 class="form-section__title">Bot properties</h4>
            <p class="form-section__help">Please check and confirm bot properties</p>
        </div>
        <div class="form-section__content">
            <div class="form-section__field-set">
                <label for="bot-username" class="form-section__label">Bot name</label>
                <InputText @bind-Value="_formModel.UserName" class="form-section__control" id="bot-username" disabled="true"/>
            </div>
        </div>
    </div>
    <div class="form-section">
        <div class="form-section__legend">
            <h4 class="form-section__title">Features</h4>
            <p class="form-section__help">Please check and confirm selected features</p>
        </div>
        <div class="form-section__content">
            @foreach (var feature in BotFormModel.Features.Where(d => _formModel.FeatureIds.Contains(d.Id)))
            {
                <div class="form-section__field-set">
                    <label class="form-section__label">Feature</label>
                    <InputText @bind-Value="feature.Name" class="form-section__control" disabled="true"/>
                </div>
            }
        </div>
    </div>
    <div class="form-controls">
        <button class="button button_white" type="submit">@ButtonText</button>
    </div>
</EditForm>

@code {
    private readonly Stage4CompleteFormModel _formModel = new();
    private Func<string?, string> _linkBuilder = default!;
    private FluentValidationValidator? _fluentValidationValidator;
    
    [Parameter, EditorRequired]
    public BotFormModel BotFormModel { get; set; } = default!;
    
    private EditContext _editContext = new(new Stage4CompleteFormModel());

    private string ButtonText => BotFormModel.Id.HasValue ? "Update" : "Create";
    
    protected override void OnParametersSet()
    {
        _linkBuilder = LanguageManager.CreateLinkBuilder();

        _formModel.UserName = BotFormModel.UserName;
        _formModel.Token = BotFormModel.Token;
        _formModel.FeatureIds = BotFormModel.FeatureIds.ToArray();
        _formModel.Properties = BotFormModel.Properties.ToDictionary();
        
        _editContext = new EditContext(_formModel);
        _editContext.SetFieldCssClassProvider(new ValidationCssClassProvider());
    }
    
    private async Task SubmitForm()
    {
        if (!await _fluentValidationValidator!.ValidateAsync())
            return;

        if (BotFormModel.Id.HasValue)
            await BotService.Update(new UpdateBotCommand(
                BotFormModel.Id.Value,
                _formModel.UserName,
                _formModel.Token,
                _formModel.FeatureIds,
                _formModel.Properties));
        else
            await BotService.Create(new CreateBotCommand(
                _formModel.UserName,
                _formModel.Token,
                _formModel.FeatureIds,
                _formModel.Properties));
        
        NavigationManager.NavigateTo(_linkBuilder("constructor"));
    }
}