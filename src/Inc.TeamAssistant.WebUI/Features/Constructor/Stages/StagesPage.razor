@page "/constructor/{BotId:guid}"
@page "/en/constructor/{BotId:guid}"
@page "/ru/constructor/{BotId:guid}"
@page "/constructor/{SelectedStage}"
@page "/en/constructor/{SelectedStage}"
@page "/ru/constructor/{SelectedStage}"
@page "/constructor/{BotId:guid}/{SelectedStage}"
@page "/en/constructor/{BotId:guid}/{SelectedStage}"
@page "/ru/constructor/{BotId:guid}/{SelectedStage}"

@attribute [Authorize]

@inject IRenderContext RenderContext
@inject IBotService BotService
@inject ICalendarService CalendarService
@inject IServiceProvider ServiceProvider
@inject ResourcesManager Resources
@inject LinkBuilder LinkBuilder
@inject RequestProcessor RequestProcessor
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<MetaDataModule
    WebsiteSection="WebsiteSection.Constructor"
    MetaOverrideTitle="@Resources[Messages.Constructor_Title]" />

<div class="constructor">
    <div class="constructor__container">
        <div class="constructor__nav">
            <NavigationStages Current="_currentState" MoveToNext="MoveToNext" />
        </div>
        <h1 class="constructor__title title">@Resources[Messages.Constructor_Title] @BotName</h1>
        @if (RenderContext.IsBrowser)
        {
            <Loading State="_state" Retry="Load">
                <Content>
                    <DynamicComponent Type="StageType" Parameters="StageParameters"/>
                </Content>
            </Loading>
        }
    </div>
</div>

@code {
    [Parameter]
    public Guid? BotId { get; set; }

    [Parameter]
    public string SelectedStage { get; set; } = default!;
    
    private LoadingState _state = LoadingState.Loading();
    private StagesState _stagesState = StagesState.Empty;

    private string BotStorageKey => BotId.HasValue ? $"bot_{BotId.Value:N}" : "bot_new";
    private string BotName => string.IsNullOrWhiteSpace(_stagesState.UserName)
        ? string.Empty
        : $"@{_stagesState.UserName}";

    private Stage _currentState = Enum.GetValues<Stage>().First();
    private Type StageType => _currentState switch
    {
        Stage.SelectFeatures => typeof(SelectFeatures),
        Stage.SetSettings => typeof(SetSettings),
        Stage.Complete => typeof(Complete),
        _ => typeof(CheckBot)
    };
    private Dictionary<string, object> StageParameters => new()
    {
        ["StagesState"] = _stagesState,
        ["LinkFactory"] = (object)LinkFactory,
        ["MoveToNext"] = (object)MoveToNext,
        ["BotStorageKey"] = BotStorageKey
    };
    
    protected override async Task OnParametersSetAsync()
    {
        if (Enum.TryParse<Stage>(SelectedStage, ignoreCase: true, out var value))
            _currentState = value;
        
        if (RenderContext.IsBrowser)
            await Load();
    }
    
    private async Task Load()
    {
        var dataEditor = ServiceProvider.GetRequiredService<DataEditor>();
        
        await RequestProcessor.Process(
            () =>
            {
                return dataEditor.GetValueOrDefault(BotStorageKey, async t =>
                {
                    var getBotResult = BotId.HasValue ? await BotService.GetBotById(BotId.Value, t) : null;
                    var getFeaturesResult = await BotService.GetFeatures(t);
                    var getPropertiesResult = await BotService.GetProperties(t);
                    var getCalendarResult = await CalendarService.GetCalendarByOwner(t);

                    return getBotResult is null
                        ? StagesState.Create(getFeaturesResult, getPropertiesResult, getCalendarResult)
                        : StagesState.Create(getBotResult, getFeaturesResult, getPropertiesResult);
                });
            },
            nameof(StagesPage),
            r => _stagesState = r,
            s =>
            {
                _state = s;
                StateHasChanged();
            });
    }

    private async Task MoveToNext(Stage? stage)
    {
        if (stage.HasValue)
        {
            var url = LinkFactory(stage.Value);
            
            _currentState = stage.Value;
            StateHasChanged();
            
            await JsRuntime.Execute(JsFunctions.ChangeUrl(url));
            return;
        }
        
        var notificationsService = ServiceProvider.GetRequiredService<INotificationsService>();
        
        notificationsService.Publish(Notification.Info(Resources[Messages.GUI_DataRefreshed]));
        
        NavigationManager.NavigateTo(LinkBuilder.Build("constructor"));
    }

    private string LinkFactory(Stage stage)
    {
        var link = _stagesState.Id.HasValue
            ? $"constructor/{_stagesState.Id.Value:N}/{stage}"
            : $"constructor/{stage}";

        return LinkBuilder.Build(link.ToLowerInvariant());
    }
}