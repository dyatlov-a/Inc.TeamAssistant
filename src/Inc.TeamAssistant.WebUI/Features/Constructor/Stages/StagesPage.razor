@page "/constructor/{BotId:guid}"
@page "/en/constructor/{BotId:guid}"
@page "/ru/constructor/{BotId:guid}"
@page "/constructor/{Selected}"
@page "/en/constructor/{Selected}"
@page "/ru/constructor/{Selected}"
@page "/constructor/{BotId:guid}/{Selected}"
@page "/en/constructor/{BotId:guid}/{Selected}"
@page "/ru/constructor/{BotId:guid}/{Selected}"

@attribute [Authorize]

@using System.Text.Json
@inherits PersistentComponent<StagesPageViewModel>

@inject IBotService BotService
@inject IDataEditor DataEditor

<PageTitle>@ViewModel.Title</PageTitle>

<div class="constructor">
    <div class="constructor__container">
        <h1 class="title">@ViewModel.Title</h1>
        <div class="constructor__nav">
            <NavigationStages Current="CurrentState" LinkFactory="LinkFactory" />
        </div>
        <DynamicComponent Type="StageType" Parameters="StageParameters" />
    </div>
</div>

@code {
    [Parameter]
    public Guid? BotId { get; set; }

    [Parameter]
    public string Selected { get; set; } = default!;

    private string BotStorageKey => BotId.HasValue ? $"bot_{BotId.Value:N}" : "bot_new";
    private StagesState _stagesState = StagesState.Empty;
    
    private Stage CurrentState => Enum.TryParse<Stage>(Selected, ignoreCase: true, out var value)
        ? value
        : Enum.GetValues<Stage>().First();

    private Type StageType => CurrentState switch
    {
        Stage.SelectFeatures => typeof(SelectFeatures),
        Stage.SetSettings => typeof(SetSettings),
        Stage.Complete => typeof(Complete),
        _ => typeof(CheckBot)
    };

    private Dictionary<string, object> StageParameters => new()
    {
        ["StagesState"] = _stagesState,
        ["LinkFactory"] = (object)LinkFactory,
        ["BotStorageKey"] = BotStorageKey
    };

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        
        var data = await DataEditor.Get(BotStorageKey);
        
        if (data.Result is not null)
            _stagesState = JsonSerializer.Deserialize<StagesState>(data.Result)!;
        else
        {
            var bot = BotId.HasValue ? await BotService.GetBotById(BotId.Value) : null;
            var getFeaturesResult = await BotService.GetFeatures();

            _stagesState = new StagesState(
                bot?.Result?.Id,
                bot?.Result?.UserName ?? string.Empty,
                bot?.Result?.Token ?? string.Empty,
                bot?.Result?.FeatureIds ?? Array.Empty<Guid>(),
                bot?.Result?.Properties.Keys.ToArray() ?? Array.Empty<string>(),
                bot?.Result?.Properties ?? new Dictionary<string, string>(),
                getFeaturesResult.Result.Features);
            
            await DataEditor.Attach(BotStorageKey, _stagesState);
        }
    }

    protected override Task<StagesPageViewModel> Initialize(Dictionary<string, string> resources)
    {
        return Task.FromResult(new StagesPageViewModel(resources[Messages.Constructor_Title]));
    }

    private string LinkFactory(Stage? stage)
    {
        if (!stage.HasValue)
            return LinkBuilder("constructor");
        
        var target = stage.Value.ToString().ToLower();
        var link = _stagesState.Id.HasValue
            ? $"constructor/{_stagesState.Id.Value:N}/{target}"
            : $"constructor/{target}";

        return LinkBuilder(link);
    }
}