@page "/constructor/{BotId:guid}"
@page "/en/constructor/{BotId:guid}"
@page "/ru/constructor/{BotId:guid}"
@page "/constructor/{Selected}"
@page "/en/constructor/{Selected}"
@page "/ru/constructor/{Selected}"
@page "/constructor/{BotId:guid}/{Selected}"
@page "/en/constructor/{BotId:guid}/{Selected}"
@page "/ru/constructor/{BotId:guid}/{Selected}"

@attribute [Authorize]

@inject IRenderContext RenderContext
@inject IBotService BotService
@inject IServiceProvider ServiceProvider
@inject ResourcesManager Resources
@inject LinkBuilder LinkBuilder
@inject RequestProcessor RequestProcessor

<MetaDataModule
    WebsiteSection="WebsiteSection.Constructor"
    MetaOverrideTitle="@Resources[Messages.Constructor_Title]" />

<Loading State="_state" IsFullscreen="true">
    <Content>
        <div class="constructor">
            <div class="constructor__container">
                <div class="constructor__nav">
                    <NavigationStages Current="CurrentState" LinkFactory="LinkFactory" />
                </div>
                <h1 class="title">@Resources[Messages.Constructor_Title] @BotName</h1>
                <DynamicComponent Type="StageType" Parameters="StageParameters"/>
            </div>
        </div>
    </Content>
</Loading>

@code {
    [Parameter]
    public Guid? BotId { get; set; }

    [Parameter]
    public string Selected { get; set; } = default!;
    
    private RequestState _state = RequestState.Done();
    private StagesState _stagesState = StagesState.Empty;

    private string BotStorageKey => BotId.HasValue ? $"bot_{BotId.Value:N}" : "bot_new";
    private string BotName => string.IsNullOrWhiteSpace(_stagesState.UserName)
        ? string.Empty
        : $"@{_stagesState.UserName}";
    private Stage CurrentState => Enum.TryParse<Stage>(Selected, ignoreCase: true, out var value)
        ? value
        : Enum.GetValues<Stage>().First();
    private Type StageType => CurrentState switch
    {
        Stage.SelectFeatures => typeof(SelectFeatures),
        Stage.SetSettings => typeof(SetSettings),
        Stage.Complete => typeof(Complete),
        _ => typeof(CheckBot)
    };
    private Dictionary<string, object> StageParameters => new()
    {
        ["StagesState"] = _stagesState,
        ["LinkFactory"] = (object)LinkFactory,
        ["BotStorageKey"] = BotStorageKey
    };
    
    protected override async Task OnParametersSetAsync()
    {
        if (RenderContext.IsBrowser)
        {
            var dataEditor = ServiceProvider.GetRequiredService<DataEditor>();
            
            await Load(dataEditor);
        }
    }
    
    private async Task Load(DataEditor dataEditor)
    {
        _state = await RequestProcessor.Process(
            () =>
            {
                return dataEditor.GetValueOrDefault(BotStorageKey, async t =>
                {
                    var getBotResult = BotId.HasValue ? await BotService.GetBotById(BotId.Value, t) : null;
                    var getFeaturesResult = await BotService.GetFeatures(t);
                    var getPropertiesResult = await BotService.GetProperties(t);

                    return getBotResult is null
                        ? StagesState.Create(getFeaturesResult, getPropertiesResult)
                        : StagesState.Create(getBotResult, getFeaturesResult, getPropertiesResult);
                });
            },
            nameof(StagesPage),
            r =>
            {
                _stagesState = r;
                _state = RequestState.Done();
                StateHasChanged();
            });
    }

    private string LinkFactory(Stage? stage)
    {
        if (!stage.HasValue)
            return LinkBuilder.Build("constructor");
        
        var target = stage.Value.ToString().ToLowerInvariant();
        var link = _stagesState.Id.HasValue
            ? $"constructor/{_stagesState.Id.Value:N}/{target}"
            : $"constructor/{target}";

        return LinkBuilder.Build(link);
    }
}