@using Inc.TeamAssistant.Constructor.Model.Queries.GetBotsByOwner

@inject IBotService BotService
@inject NavigationManager NavigationManager
@inject ResourcesManager Resources
@inject RequestProcessor RequestProcessor
@inject LinkBuilder LinkBuilder

<ConfirmDialog OnConfirm="Remove" @ref="_confirmDialog">
    <Content>
        <p>@string.Format(Resources[Messages.Constructor_RemoveConfirmationText], _selectedBot?.Name)</p>
    </Content>
</ConfirmDialog>

<div class="bot-selector">
    @foreach(var bot in _bots)
    {
        <BotCard Icon="@typeof(BotIcon)" Name="@bot.Name">
            <Content>
                <a href="@MoveToDashboardLink(bot)" class="link link_dark">
                    @Resources[Messages.Dashboard_MoveToStats]
                </a>
            </Content>
            <Buttons>
                <button type="button" class="button button_light bot-selector__button" @onclick="() => MoveToEdit(bot.Id)">
                    @Resources[Messages.Constructor_Edit]
                </button>
                <button type="button" class="button button_light bot-selector__button" @onclick="() => MoveToRemove(bot)">
                    @Resources[Messages.Constructor_Remove]
                </button>
            </Buttons>
        </BotCard>
    }
    <BotCard Icon="@typeof(AddBotIcon)" Name="@Resources[Messages.Constructor_NewBot]">
        <Buttons>
            <button type="button" class="button button_light bot-selector__button" @onclick="MoveToAdd">
                @Resources[Messages.Constructor_AddBot]
            </button>
        </Buttons>
    </BotCard>
</div>

@code {
    [Parameter, EditorRequired]
    public long OwnerId { get; set; }

    private IReadOnlyCollection<BotDto> _bots = Array.Empty<BotDto>();

    private ConfirmDialog? _confirmDialog;
    private BotDto? _selectedBot;

    protected override Task OnParametersSetAsync() => Update();
    
    private async Task Update()
    {
        var response = await RequestProcessor.Process(() => BotService.GetBotsByOwner(OwnerId), nameof(BotSelector));

        _bots = response.Bots;
    }

    private void MoveToAdd() => MoveToEdit(botId: null);

    private void MoveToEdit(Guid? botId)
    {
        var stage = Stage.CheckBot.ToString().ToLower();
        var link = botId.HasValue
            ? $"constructor/{botId.Value:N}/{stage}"
            : $"constructor/{stage}";
        
        NavigationManager.NavigateTo(LinkBuilder.Build(link));
    }

    private void MoveToRemove(BotDto bot)
    {
        _selectedBot = bot;
        
        _confirmDialog?.Open();
    }

    private string MoveToDashboardLink(BotDto bot) => LinkBuilder.Build($"dashboard/{bot.Id:N}");

    private async Task Remove()
    {
        if (_selectedBot is null)
            return;
        
        await BotService.Remove(_selectedBot.Id);

        await Update();
    }
}