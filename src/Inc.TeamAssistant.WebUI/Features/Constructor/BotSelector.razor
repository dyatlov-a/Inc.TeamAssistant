@using Inc.TeamAssistant.Connector.Model.Queries.GetBots

@inject IBotService BotService
@inject NavigationManager NavigationManager
@inject ResourcesManager Resources
@inject RequestProcessor RequestProcessor
@inject LinkBuilder LinkBuilder

<ConfirmDialog OnConfirm="Remove" @ref="_confirmDialog">
    <Content>
        <p>@string.Format(Resources[Messages.Constructor_RemoveConfirmationText], _selectedBot?.Name)</p>
    </Content>
</ConfirmDialog>
<div class="bot-selector">
    <BotCard Icon="@typeof(AddBotIcon)" Name="@Resources[Messages.Constructor_NewBot]">
        <Buttons>
            <button type="button" class="button button_light bot-selector__button" @onclick="MoveToAdd">
                @Resources[Messages.Constructor_AddBot]
            </button>
        </Buttons>
    </BotCard>
    <Loading State="_state">
        <Content>
            @foreach (var bot in _bots)
            {
                <BotCard Icon="@typeof(BotIcon)" Name="@bot.Name">
                    <Content>
                        <a href="@MoveToDashboardLink(bot)" class="link link_dark">
                            @Resources[Messages.Dashboard_MoveToStats]
                        </a>
                    </Content>
                    <Buttons>
                        <button
                            type="button"
                            class="button button_light bot-selector__button"
                            @onclick="() => MoveToEdit(bot.Id)">
                            @Resources[Messages.Constructor_Edit]
                        </button>
                        <button
                            type="button"
                            class="button button_light bot-selector__button"
                            @onclick="() => MoveToRemove(bot)">
                            @Resources[Messages.Constructor_Remove]
                        </button>
                    </Buttons>
                </BotCard>
            }
        </Content>
    </Loading>
</div>

@code {
    [Parameter, EditorRequired]
    public long OwnerId { get; set; }

    private RequestState _state = RequestState.Done();
    private IReadOnlyCollection<BotDto> _bots = Array.Empty<BotDto>();

    private ConfirmDialog? _confirmDialog;
    private BotDto? _selectedBot;

    protected override Task OnParametersSetAsync() => Load();
    
    private async Task Load()
    {
        _state = await RequestProcessor.Process(
            () => BotService.GetByUser(OwnerId),
            nameof(BotSelector),
            r =>
            {
                _bots = r.Bots.Where(b => b.OwnerId == OwnerId).ToArray();
                _state = RequestState.Done();
                StateHasChanged();
            });
    }

    private void MoveToAdd() => MoveToEdit(botId: null);

    private void MoveToEdit(Guid? botId)
    {
        var stage = Stage.CheckBot.ToString().ToLower();
        var link = botId.HasValue
            ? $"constructor/{botId.Value:N}/{stage}"
            : $"constructor/{stage}";
        
        NavigationManager.NavigateTo(LinkBuilder.Build(link));
    }

    private void MoveToRemove(BotDto bot)
    {
        _selectedBot = bot;
        
        _confirmDialog?.Open();
    }

    private string MoveToDashboardLink(BotDto bot)
    {
        var teamId = bot.Teams.FirstOrDefault()?.Id;
        
        return teamId.HasValue
            ? LinkBuilder.Build($"dashboard/{bot.Id:N}/{teamId.Value:N}")
            : LinkBuilder.Build($"dashboard/{bot.Id:N}");
    }

    private async Task Remove()
    {
        if (_selectedBot is null)
            return;
        
        await BotService.Remove(_selectedBot.Id);

        await Load();
    }
}