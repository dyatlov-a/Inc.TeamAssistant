@inject IBotService BotService
@inject IStringLocalizer<ConstructorResources> Localizer
@inject RequestProcessor RequestProcessor
@inject NavRouter NavRouter

<ConfirmDialog OnConfirm="Remove" @ref="_confirmDialog">
    <Content>
        <p>@string.Format(Localizer["RemoveConfirmationText"].Value, _selectedBot?.Name)</p>
    </Content>
</ConfirmDialog>
<div class="bot-selector">
    <div class="bot-selector__item">
        <BotCard Icon="@typeof(AddBotIcon)" Name="@Localizer["NewBot"].Value">
            <Buttons>
                <Button OnClick="MoveToAdd">
                    <Content>
                        @Localizer["AddBot"].Value
                    </Content>
                </Button>
            </Buttons>
        </BotCard>
    </div>
    <div class="bot-selector__item">
        <Loading State="_state" Retry="Load">
            <Content>
                @foreach (var bot in _bots)
                {
                    <BotCard Icon="@typeof(BotIcon)" Name="@bot.Name">
                        <Content>
                            <RouterLink Href="@CreateMoveToDashboardLink(bot)" ComponentStyle="ComponentStyle.Secondary">
                                <Content>@Localizer["MoveToDashboard"].Value</Content>
                            </RouterLink>
                        </Content>
                        <Buttons>
                            <Button OnClick="() => MoveToEdit(bot.Id)">
                                <Content>
                                    @Localizer["Edit"].Value
                                </Content>
                            </Button>
                            <Button OnClick="() => MoveToRemove(bot)">
                                <Content>
                                    @Localizer["Remove"].Value
                                </Content>
                            </Button>
                        </Buttons>
                    </BotCard>
                }
            </Content>
        </Loading>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public long OwnerId { get; set; }

    private LoadingState _state = LoadingState.Done();
    private IReadOnlyCollection<BotDto> _bots = Array.Empty<BotDto>();

    private ConfirmDialog? _confirmDialog;
    private BotDto? _selectedBot;

    protected override Task OnParametersSetAsync() => Load();
    
    private async Task Load()
    {
        await RequestProcessor.Process(
            () => BotService.GetFromCurrentUser(),
            nameof(BotSelector),
            r => _bots = r.Bots.Where(b => b.OwnerId == OwnerId).ToArray(),
            s =>
            {
                _state = s;
                StateHasChanged();
            });
    }

    private Task MoveToAdd() => MoveToEdit(botId: null);

    private async Task MoveToEdit(Guid? botId)
    {
        var stage = Stage.CheckBot.ToString().ToLowerInvariant();
        var routeSegment = botId.HasValue
            ? $"constructor/{botId.Value:N}/{stage}"
            : $"constructor/{stage}";
        
        await NavRouter.MoveToRoute(routeSegment);
    }

    private void MoveToRemove(BotDto bot)
    {
        _selectedBot = bot;
        
        _confirmDialog?.Open();
    }

    private string CreateMoveToDashboardLink(BotDto bot)
    {
        var teamId = bot.Teams.FirstOrDefault()?.Id;
        
        return teamId.HasValue
            ? NavRouter.CreateRoute($"dashboard/{bot.Id:N}/{teamId.Value:N}")
            : NavRouter.CreateRoute($"dashboard/{bot.Id:N}");
    }

    private async Task Remove()
    {
        if (_selectedBot is null)
            return;
        
        await BotService.Remove(_selectedBot.Id);

        await Load();
    }
}