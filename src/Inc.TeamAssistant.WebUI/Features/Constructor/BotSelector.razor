@inject IBotService BotService
@inject LanguageManager LanguageManager
@inject NavigationManager NavigationManager

<div class="bot-selector">
    @foreach(var bot in _viewModel.Bots)
    {
        <div class="bot-selector__item">
            <BotIcon Size="160px" Color="#fff" />
            <div class="bot-selector__name" title="@bot.Name">@bot.Name</div>
            <div>
                <span @onclick="() => MoveToEdit(bot.Id)">
                    <EditIcon Size="40px" Color="#fff" />
                </span>
                <span @onclick="() => Remove(bot.Id)">
                    <TrashIcon Size="40px" Color="#fff" />
                </span>
            </div>
        </div>
    }
    <div class="bot-selector__item">
        <AddIcon Size="160px" Color="#fff" />
        <div class="bot-selector__name" title="Create">@_viewModel.AddBotLink</div>
        <div>
            <span @onclick="MoveToAdd">
                <AddIcon Size="40px" Color="#fff" />
            </span>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public long OwnerId { get; set; }

    private Func<string?, string> _linkBuilder = default!;
    
    private BotSelectorViewModel _viewModel = BotSelectorViewModel.Empty;

    protected override void OnInitialized()
    {
        _linkBuilder = LanguageManager.CreateLinkBuilder();
    }

    protected override async Task OnParametersSetAsync()
    {
        var resources = await LanguageManager.GetResource();
        var getBotsByOwnerResult = await BotService.GetBotsByOwner(OwnerId);

        _viewModel = new BotSelectorViewModel(
            resources[Messages.Constructor_AddBotLink],
            getBotsByOwnerResult.Result.Bots);
    }

    private void MoveToAdd() => MoveToEdit(botId: null);

    private void MoveToEdit(Guid? botId)
    {
        var stage = Stage.CheckBot.ToString().ToLower();
        var link = botId.HasValue
            ? $"constructor/{botId.Value:N}/{stage}"
            : $"constructor/{stage}";
        
        NavigationManager.NavigateTo(_linkBuilder(link));
    }

    private async Task Remove(Guid botId)
    {
        await BotService.Remove(botId);
        
        var getBotsByOwnerResult = await BotService.GetBotsByOwner(OwnerId);
        _viewModel = _viewModel with
        {
            Bots = getBotsByOwnerResult.Result.Bots
        };
    }
}