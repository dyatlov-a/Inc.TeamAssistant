@page "/constructor/{BotId:guid?}/{Selected}"
@page "/en/constructor/{BotId:guid?}/{Selected}"
@page "/ru/constructor/{BotId:guid?}/{Selected}"

@attribute [Authorize]

@inject IBotService BotService

<ConstructorContainer>
    <Content>
        <StageSummary Current="CurrentState" />
        <DynamicComponent Type="StageType" Parameters="StageParameters" />
    </Content>
</ConstructorContainer>

@code {
    [Parameter]
    public Guid? BotId { get; set; }

    [Parameter]
    public string Selected { get; set; } = default!;
    
    private Stage CurrentState => Enum.TryParse<Stage>(Selected, ignoreCase: true, out var value)
        ? value
        : Enum.GetValues<Stage>().First();
    
    private Type StageType => CurrentState switch
    {
        Stage.CheckBot => typeof(Stage1CheckBot),
        Stage.SelectFeatures => typeof(Stage2SelectFeatures),
        Stage.SetSettings => typeof(Stage3SetSettings),
        Stage.Complete => typeof(Stage4Complete),
        _ => throw new ApplicationException()
    };
    
    private Dictionary<string, object> StageParameters => new()
    {
        [nameof(BotFormModel)] = _botFormModel
    };
    
    private BotFormModel _botFormModel = new();

    protected override async Task OnParametersSetAsync()
    {
        if (BotId.HasValue)
        {
            var bot = await BotService.GetBotById(BotId.Value);

            _botFormModel = new()
            {
                Id = bot.Result!.Id,
                UserName = bot.Result.UserName,
                Token = bot.Result.Token,
                FeatureIds = bot.Result.FeatureIds.ToList(),
                Properties = bot.Result.Properties.ToDictionary()
            };
        }
    }
}