@page "/constructor/{BotId:guid}"
@page "/en/constructor/{BotId:guid}"
@page "/ru/constructor/{BotId:guid}"
@page "/constructor/{Selected}"
@page "/en/constructor/{Selected}"
@page "/ru/constructor/{Selected}"
@page "/constructor/{BotId:guid}/{Selected}"
@page "/en/constructor/{BotId:guid}/{Selected}"
@page "/ru/constructor/{BotId:guid}/{Selected}"

@attribute [Authorize]

@inject IBotService BotService

<ConstructorContainer>
    <Content>
        <StageSummary Current="CurrentState" />
        <DynamicComponent Type="StageType" Parameters="StageParameters" />
    </Content>
</ConstructorContainer>

@code {
    [Parameter]
    public Guid? BotId { get; set; }

    [Parameter]
    public string Selected { get; set; } = default!;

    private Stage CurrentState => Enum.TryParse<Stage>(Selected, ignoreCase: true, out var value)
        ? value
        : Enum.GetValues<Stage>().First();

    private Type StageType => CurrentState switch
    {
        Stage.CheckBot => typeof(Stage1CheckBot),
        Stage.SelectFeatures => typeof(Stage2SelectFeatures),
        Stage.SetSettings => typeof(Stage3SetSettings),
        Stage.Complete => typeof(Stage4Complete),
        _ => throw new ApplicationException()
    };

    private Dictionary<string, object> StageParameters => new()
    {
        [nameof(BotFormModel)] = _botFormModel
    };

    private BotFormModel _botFormModel = BotFormModel.Empty;

    protected override async Task OnParametersSetAsync()
    {
        var getFeaturesResult = await BotService.GetFeatures();

        if (_botFormModel == BotFormModel.Empty)
        {
            _botFormModel = new BotFormModel
            {
                Features = getFeaturesResult.Result.Features.Select(f => new BotFormModel.Feature
                {
                    Id = f.Id,
                    Name = f.Name,
                    Properties = f.Properties
                }).ToArray()
            };
        }

        if (_botFormModel.Id != BotId)
        {
            if (BotId.HasValue)
            {
                var bot = await BotService.GetBotById(BotId.Value);

                _botFormModel.Id = bot.Result!.Id;
                _botFormModel.UserName = bot.Result.UserName;
                _botFormModel.Token = bot.Result.Token;
                _botFormModel.FeatureIds = bot.Result.FeatureIds.ToArray();
                _botFormModel.PropertyKeys = bot.Result.Properties.Keys.ToArray();
                _botFormModel.Properties = bot.Result.Properties.ToDictionary();
            }
            else
            {
                _botFormModel.Id = null;
                _botFormModel.UserName = string.Empty;
                _botFormModel.Token = string.Empty;
                _botFormModel.FeatureIds = Array.Empty<Guid>();
                _botFormModel.PropertyKeys = Array.Empty<string>();
                _botFormModel.Properties = new Dictionary<string, string>();
            }
        }
    }
}