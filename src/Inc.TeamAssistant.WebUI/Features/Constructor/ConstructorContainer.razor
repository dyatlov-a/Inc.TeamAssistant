@page "/constructor"
@page "/en/constructor"
@page "/ru/constructor"

@attribute [Authorize]

@inject IBotService BotService
@inject IStringLocalizer<ConstructorResources> Localizer
@inject RequestProcessor RequestProcessor
@inject NavRouter NavRouter

<MetaDataModule
    WebsiteSection="WebsiteSection.Constructor"
    MetaOverrideTitle="@Localizer["Title"]" />

<ConfirmDialog @ref="_confirmDialog">
    <p>@string.Format(Localizer["RemoveConfirmationText"], _botName)</p>
</ConfirmDialog>

<AuthorizeView>
    <Authorized>
        <Constructor
            OwnerId="@context.User.ToPerson().Id"
            Bots="_bots"
            State="_state"
            Retry="Load"
            LinkFactory="CreateMoveToDashboardLink"
            MoveToAdd="MoveToAdd"
            MoveToEdit="i => MoveToEdit(i)"
            MoveToRemove="b => MoveToRemove(b)" />
    </Authorized>
</AuthorizeView>

@code {
    private readonly LoadingState _state = LoadingState.Done();
    private IReadOnlyCollection<BotDto> _bots = [];

    private ConfirmDialog? _confirmDialog;
    private string? _botName;

    protected override Task OnParametersSetAsync() => Load();
    
    private async Task Load()
    {
        var result = await RequestProcessor.Process(
            () => BotService.GetFromCurrentUser(),
            nameof(ConstructorContainer),
            _state);

        _bots = result.Bots;
        
        StateHasChanged();
    }

    private Task MoveToAdd() => MoveToEdit(botId: null);

    private async Task MoveToEdit(Guid? botId)
    {
        var stage = nameof(Stage.CheckBot).ToLowerInvariant();
        var routeSegment = botId.HasValue
            ? $"constructor/{botId.Value:N}/{stage}"
            : $"constructor/{stage}";
        
        await NavRouter.MoveToRoute(routeSegment);
    }

    private async Task MoveToRemove(BotDto bot)
    {
        _botName = bot.Name;

        if (_confirmDialog is not null && await _confirmDialog.IsConfirmed())
            await Removed(bot.Id);
    }

    private string CreateMoveToDashboardLink(BotDto bot)
    {
        var teamId = bot.Teams.FirstOrDefault()?.Id;
        
        return teamId.HasValue
            ? NavRouter.CreateRoute($"dashboard/{bot.Id:N}/{teamId.Value:N}")
            : NavRouter.CreateRoute($"dashboard/{bot.Id:N}");
    }

    private async Task Removed(Guid botId)
    {
        await BotService.Remove(botId);

        await Load();
    }
}