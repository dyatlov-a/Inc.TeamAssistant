@page "/map/{id:guid}"
@page "/en/map/{id:guid}"
@page "/ru/map/{id:guid}"
@page "/map/{id:guid}/{DisableLayout:bool}"
@page "/en/map/{id:guid}/{DisableLayout:bool}"
@page "/ru/map/{id:guid}/{DisableLayout:bool}"

@implements IAsyncDisposable

@inject ICheckInService CheckInService
@inject IRenderContext RenderContext
@inject IJSRuntime JsRuntime
@inject IStringLocalizer<MapResources> Localizer

<MetaDataModule WebsiteSection="WebsiteSection.Map" />

@if (!DisableLayout)
{
    <MainNavbar/>
}
<div @ref="_map" class="map @CssClass"></div>

@if (!DisableLayout)
{
    <AcceptCookieDialog />
}

@code {
    [Parameter]
    public Guid Id { get; set; }
    
    [Parameter]
    public bool DisableLayout { get; set; }

    private ElementReference _map;
    private IJSObjectReference? _mapModule;
    private string CssClass => DisableLayout ? string.Empty : "map_navbar";
    private IReadOnlyDictionary<string, string> FeatureNamesLookup => new Dictionary<string, string>
    {
        ["Review"] = Localizer["FeatureReviewer"].Value,
        ["RandomCoffee"] = Localizer["FeatureRandomCoffee"].Value,
        ["Estimates"] = Localizer["FeatureAppraiser"].Value,
        ["CheckIn"] = Localizer["FeatureCheckIn"].Value
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && RenderContext.IsBrowser)
        {
            _mapModule = await JsRuntime.InvokeAsync<IJSObjectReference>(
                "import",
                "./Features/Map/MapPage.razor.js");
            
            var getLocations = await CheckInService.GetLocations(Id);
            if (getLocations is not null)
                await _mapModule.InvokeVoidAsync(
                    "initialize",
                    _map,
                    getLocations.Locations,
                    FeatureNamesLookup,
                    Localizer["RouteShow"].Value,
                    Localizer["RouteHide"].Value,
                    Localizer["DefaultLayerTitle"].Value);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_mapModule is not null)
            await _mapModule.DisposeAsync();
    }
}