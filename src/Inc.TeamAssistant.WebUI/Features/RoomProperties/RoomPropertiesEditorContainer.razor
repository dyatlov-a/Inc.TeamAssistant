@inject IRetroService RetroService
@inject ISurveyService SurveyService
@inject RequestProcessor RequestProcessor

<RoomPropertiesEditor
    FormModel="_formModel"
    RetroTemplates="_retroTemplates"
    SurveyTemplates="_surveyTemplates"
    State="_state"
    Retry="Load"
    OnValidSubmit="Save" />

@code {
    /// <summary>
    /// RoomId for edit.
    /// </summary>
    [Parameter, EditorRequired]
    public Guid RoomId { get; set; }

    /// <summary>
    /// Retro properties.
    /// </summary>
    [Parameter, EditorRequired]
    public RetroPropertiesDto RetroProperties { get; set; } = default!;
    
    /// <summary>
    /// Retro properties changed event.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback RetroPropertiesChanged { get; set; }

    private Guid _roomId = Guid.Empty;
    private readonly RoomPropertiesFormModel _formModel = new();
    private readonly LoadingState _state = LoadingState.Done();
    private readonly List<RetroTemplateDto> _retroTemplates = new();
    private readonly List<SurveyTemplateDto> _surveyTemplates = new();
    
    protected override async Task OnParametersSetAsync()
    {
        if (_roomId != RoomId)
        {
            _roomId = RoomId;
            
            await Load();
        }
    }

    private async Task Load()
    {
        var result = await RequestProcessor.Process(
            async () =>
            {
                var retroResult = await RetroService.GetRetroTemplates();
                var surveyResult = await SurveyService.GetTemplates();

                return new RoomPropertiesViewModel(retroResult.Templates, surveyResult.Templates);
            },
            nameof(RoomPropertiesEditorContainer),
            _state);
            
        _formModel.Apply(RetroProperties);
        
        _retroTemplates.Clear();
        _retroTemplates.AddRange(result.RetroTemplates);
        
        _surveyTemplates.Clear();
        _surveyTemplates.AddRange(result.SurveyTemplates);
    }

    private async Task Save()
    {
        await RequestProcessor.Process(
            async () => await RetroService.ChangeRetroProperties(_formModel.ToCommand(_roomId)),
            _state);

        await RetroPropertiesChanged.InvokeAsync();
    }
}