@inject IStringLocalizer<RoomPropertiesResources> Localizer

<EditForm id="@AnalyticEvents.ChangeRetroProperties" EditContext="_editContext" OnSubmit="SubmitForm">
    <Loading State="State" Retry="Retry">
        <FormSection
            Title="@Localizer["RetroPropertiesSectionTitle"]"
            HelpText="@Localizer["RetroPropertiesSectionHelp"]">
            <FormFieldSet
                FieldId="retro-template-id"
                Label="@Localizer["RetroTemplateField"]">
                <InputSelectList
                    FieldId="retro-template-id"
                    Items="RetroTemplates"
                    TitleSelector="@(t => Localizer[t.Name])"
                    ValueSelector="t => t.Id"
                    Value="FormModel.RetroTemplateId"
                    ValueExpression="@(() => FormModel.RetroTemplateId)"
                    ValueChanged="@((Guid v) => FormModel.ChangeRetroTemplate(v))"/>
            </FormFieldSet>
            <FormFieldSet
                FieldId="retro-type"
                Label="@Localizer["RetroTypeField"]">
                <InputSelectList
                    FieldId="retro-type"
                    Items="RetroTypes.All"
                    TitleSelector="@(t => Localizer[$"RetroType{t}"])"
                    ValueSelector="t => t"
                    Value="FormModel.RetroType"
                    ValueExpression="@(() => FormModel.RetroType)"
                    ValueChanged="@((string v) => FormModel.ChangeRetroType(v))" />
            </FormFieldSet>
            <FormFieldSet
                FieldId="timer-duration"
                Label="@Localizer["TimerDurationField"]">
                <InputSelectList
                    FieldId="timer-duration"
                    Items="_timerDurations"
                    TitleSelector="@(t => string.Format(Localizer["TimerDurationTemplate"], t))"
                    ValueSelector="@(t => TimeSpan.FromMinutes(t))"
                    Value="FormModel.TimerDuration"
                    ValueExpression="@(() => FormModel.TimerDuration)"
                    ValueChanged="@((TimeSpan v) => FormModel.ChangeTimerDuration(v))" />
            </FormFieldSet>
        </FormSection>
        <FormSection
            Title="@Localizer["VotePropertiesSectionTitle"]"
            HelpText="@Localizer["VotePropertiesSectionHelp"]">
            <FormFieldSet
                FieldId="vote-count"
                Label="@Localizer["VoteCountField"]">
                <InputSelectList
                    FieldId="vote-count"
                    Items="_votes"
                    TitleSelector="@(t => t.ToString())"
                    ValueSelector="t => t"
                    Value="FormModel.VoteCount"
                    ValueExpression="@(() => FormModel.VoteCount)"
                    ValueChanged="@((int v) => FormModel.ChangeVoteCount(v))" />
            </FormFieldSet>
            <FormFieldSet
                FieldId="vote-by-item-count"
                Label="@Localizer["VoteByItemCountField"]">
                <InputSelectList
                    FieldId="vote-by-item-count"
                    Items="VotesByItem"
                    TitleSelector="@(t => t.ToString())"
                    ValueSelector="t => t"
                    Value="FormModel.VoteByItemCount"
                    ValueExpression="@(() => FormModel.VoteByItemCount)"
                    ValueChanged="@((int v) => FormModel.ChangeVoteByItemCount(v))" />
            </FormFieldSet>
        </FormSection>
        <FormSection
            Title="@Localizer["SurveyPropertiesSectionTitle"]"
            HelpText="@Localizer["SurveyPropertiesSectionHelp"]">
            <FormFieldSet
                FieldId="retro-template-id"
                Label="@Localizer["SurveyTemplateField"]">
                <InputSelectList
                    FieldId="retro-template-id"
                    Items="SurveyTemplates"
                    TitleSelector="@(t => Localizer[t.Name])"
                    ValueSelector="t => t.Id"
                    Value="FormModel.SurveyTemplateId"
                    ValueExpression="@(() => FormModel.SurveyTemplateId)"
                    ValueChanged="@((Guid v) => FormModel.ChangeSurveyTemplate(v))"/>
            </FormFieldSet>
        </FormSection>
    </Loading>
    <div class="content__actions">
        <Button ButtonType="ButtonType.Submit">@Localizer["Save"]</Button>
    </div>
</EditForm>

@code {
    /// <summary>
    /// Model for the retro properties.
    /// </summary>
    [Parameter, EditorRequired]
    public RoomPropertiesFormModel FormModel { get; set; } = default!;
    
    /// <summary>
    /// Retro templates.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyCollection<TemplateDto> RetroTemplates { get; set; } = default!;
    
    /// <summary>
    /// Survey templates.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyCollection<TemplateDto> SurveyTemplates { get; set; } = default!;
    
    /// <summary>
    /// Component state.
    /// </summary>
    [Parameter, EditorRequired]
    public LoadingState State { get; set; } = default!;
    
    /// <summary>
    /// Action for retry.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Task> Retry { get; set; } = default!;
    
    /// <summary>
    /// OnValidSubmit event.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    private readonly IReadOnlyCollection<int> _timerDurations = [1, 2, 3, 4, 5, 10, 15, 30];
    private readonly IReadOnlyCollection<int> _votes = Enumerable.Range(1, 10).ToArray();
    private IReadOnlyCollection<int> VotesByItem => _votes.Where(v => v <= FormModel.VoteCount).ToArray();
    
    private EditContext? _editContext;

    protected override void OnParametersSet()
    {
        _editContext = EditContextFactory.Create(FormModel);
    }
    
    private async Task SubmitForm() => await OnValidSubmit.InvokeAsync();
}