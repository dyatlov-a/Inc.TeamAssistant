@inject IStringLocalizer<RetroResources> Localizer

<div class="participants">
    <h2 class="participants__header">@Localizer["Participants"]</h2>
    
    @foreach (var participant in Participants)
    {
        var votesTotal = VotesTotal - participant.TotalVotes;

        <div @key="participant.Person.Id" class="participant">
            <div class="participant__state">
                @if (participant.Finished)
                {
                    <i class="participant__state-item">
                        <CheckIcon Size="30px"/>
                    </i>
                }
                @if (participant.HandRaised)
                {
                    if (IsFacilitator)
                    {
                        <a
                            title="@Localizer["LowerHandHint"]"
                            href="#"
                            class="participant__state-item participant__state-item_active"
                            @onclick="() => SendHandLowered(participant.Person.Id)"
                            @onclick:preventDefault="true">
                            <UserQuestionIcon Size="30px"/>
                        </a>
                    }
                    else
                    {
                        <i class="participant__state-item">
                            <UserQuestionIcon Size="30px"/>
                        </i>
                    }
                }
            </div>
            <PersonCard Person="participant.Person"/>
            @if (CanVote && votesTotal > 0)
            {
                <InputVoting
                    VotesTotal="votesTotal"
                    RemainingVotes="0"
                    CanVote="false"
                    Value="0"
                    ValueExpression="@(() => participant.TotalVotes)"
                    ValueChanged="@((int v) => { })"/>
            }
        </div>
    }
</div>

@code {
    /// <summary>
    /// Can the user vote in the retro session.
    /// </summary>
    [Parameter, EditorRequired]
    public bool CanVote { get; set; }
    
    /// <summary>
    /// Votes total for the retro session.
    /// </summary>
    [Parameter, EditorRequired]
    public int VotesTotal { get; set; }

    /// <summary>
    /// Retro session participants.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyCollection<ParticipantViewModel> Participants { get; set; } = default!;
    
    /// <summary>
    /// Is facilitator of the retro session.
    /// </summary>
    [Parameter, EditorRequired]
    public bool IsFacilitator { get; set; }
    
    /// <summary>
    /// Hand raised event callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<long> HandLowered { get; set; }

    private async Task SendHandLowered(long personId)
    {
        if (!IsFacilitator)
            return;
        
        await HandLowered.InvokeAsync(personId);
    }
}