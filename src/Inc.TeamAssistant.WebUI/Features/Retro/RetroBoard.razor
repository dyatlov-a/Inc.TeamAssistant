@inject IStringLocalizer<RetroResources> Localizer
@inject IJSRuntime JsRuntime
@inject IRenderContext RenderContext
@inject IServiceProvider ServiceProvider

<Loading State="State" Retry="Retry">
    <Navigations Items="NavItems" MoveToNext="@((string _) => OnMoveNext())" />
    <p class="retro__text">@Localizer[RetroTextKey]</p>
    <div class="retro-grid">
        <div class="retro-grid__columns">
            @foreach (var column in Columns.OrderBy(c => c.Position))
            {
                var description = GetColumnDescription(column);
                var hasDescription = !string.IsNullOrWhiteSpace(description);
                            
                <div class="retro-grid__column">
                    <Panel
                        Header="@Localizer[column.Name]"
                        IsOpen="true"
                        HasActions="@(CanCreateRetroItem || hasDescription)">
                        <Actions>
                            @if (CanCreateRetroItem)
                            {
                                <Button IsDisabled="IsCreating" OnClick="() => SendRetroItemCreated(column.Id)">
                                    @Localizer["Add"]
                                </Button>
                            }
                            @if (hasDescription)
                            {    
                                <Hint Text="@description" />
                            }
                        </Actions>
                        <Content>
                            <div class="retro-grid__column-items">
                                @if (HasDropSlot)
                                {
                                    <RetroSlot
                                        ColumnId="column.Id"
                                        CanMove="CanMove"
                                        ItemMoved="ItemMovedToSlot"/>
                                }
                                @foreach (var item in Items
                                              .Where(i => i.ColumnId == column.Id || (Columns.All(c => c.Id != i.ColumnId) && column.Id == StartColumn))
                                              .Where(i => !i.ParentId.HasValue)
                                              .OrderByDescending(c => c.Position))
                                {
                                    var children = Items
                                        .Where(i => i.ParentId == item.Id)
                                        .OrderByDescending(c => c.Position)
                                        .ToArray();
                                    var hasChildren = children.Any();

                                    <div>
                                        <RetroItem
                                            @key="item.Id"
                                            CanView="CanView(item)"
                                            CanEdit="CanEdit(item)"
                                            CanRemove="@(CanRemove(item) && !hasChildren)"
                                            CanMove="CanMove"
                                            BackgroundColor="@column.Color"
                                            DebounceDelay="DebounceDelay"
                                            ItemRemoved="ItemRemoved"
                                            ItemMoved="ItemMoved"
                                            Value="item"
                                            ValueChanged="SendItemChanged">
                                            @if (CanVote)
                                            {
                                                <InputVoting
                                                    VotesTotal="RoomProperties.VoteByItemCount"
                                                    RemainingVotes="RemainingVotes"
                                                    CanVote="CanVote"
                                                    Value="item.Votes"
                                                    ValueExpression="@(() => item.Votes)"
                                                    ValueChanged="@((int v) => SendVotesChanged(item.Id, v))"/>
                                            }
                                            @if (IsDiscussing)
                                            {
                                                <VotesDisplay Value="item.Votes" />
                                            }
                                        </RetroItem>

                                        @foreach (var child in children)
                                        {
                                            <RetroItem
                                                @key="child.Id"
                                                CanView="CanView(child)"
                                                CanEdit="false"
                                                CanRemove="CanRemove(child)"
                                                CanMove="false"
                                                BackgroundColor="@column.Color"
                                                ItemRemoved="ItemRemoved"
                                                ItemMoved="@(_ => { })"
                                                Value="child"
                                                ValueChanged="@(_ => { })"/>
                                        }
                                    </div>
                                }
                            </div>
                        </Content>
                    </Panel>
                </div>
            }
            @if (IsDiscussing)
            {
                <div class="retro-grid__column">
                    <Panel Header="@Localizer["Actions"]" IsOpen="true" HasActions="CanCreateActionItem">
                        <Actions>
                            <Button OnClick="SendActionItemCreated">
                                @Localizer["Add"]
                            </Button>
                            <Hint Text="@Localizer["ActionsHint"]" />
                        </Actions>
                        <Content>
                            <div class="retro-grid__column-items">
                                @foreach (var actionItem in ActionItems.Where(a => Items.Any(i => i.Id == a.RetroItemId)))
                                {
                                    <ActionItem
                                        CanEdit="IsFacilitator"
                                        CanRemove="IsFacilitator"
                                        CanMoveToState="false"
                                        Value="actionItem"
                                        DebounceDelay="DebounceDelay"
                                        ValueChanged="SendActionItemChanged"
                                        ItemRemoved="SendActionItemRemoved" />
                                }
                            </div>
                        </Content>
                    </Panel>
                </div>
            }
        </div>
    </div>
</Loading>

@code {
    /// <summary>
    /// Retro properties.
    /// </summary>
    [Parameter, EditorRequired]
    public RoomPropertiesDto RoomProperties { get; set; } = default!;
    
    /// <summary>
    /// Is retro discussing.
    /// </summary>
    [Parameter, EditorRequired]
    public bool IsDiscussing { get; set; }
    
    /// <summary>
    /// Room identifier.
    /// </summary>
    [Parameter, EditorRequired]
    public Guid RoomId { get; set; }
    
    /// <summary>
    /// Component state.
    /// </summary>
    [Parameter, EditorRequired]
    public LoadingState State { get; set; } = default!;

    /// <summary>
    /// Retro columns.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyCollection<RetroColumnDto> Columns { get; set; } = default!;

    /// <summary>
    /// Current user id.
    /// </summary>
    [Parameter, EditorRequired]
    public long CurrentUserId { get; set; }

    /// <summary>
    /// Retro session.
    /// </summary>
    [Parameter, EditorRequired]
    public RetroSessionDto? Session { get; set; }

    /// <summary>
    /// Retro items.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyCollection<RetroItemViewModel> Items { get; set; } = default!;
    
    /// <summary>
    /// Action items.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyCollection<ActionItemViewModel> ActionItems { get; set; } = default!;
    
    /// <summary>
    /// Is creating retro item.
    /// </summary>
    [Parameter, EditorRequired]
    public bool IsCreating { get; set; }

    /// <summary>
    /// Action for retry.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Task> Retry { get; set; } = default!;

    /// <summary>
    /// Create retro item callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<Guid> ItemCreated { get; set; }
    
    /// <summary>
    /// Action item created callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback ActionItemCreated { get; set; }

    /// <summary>
    /// Retro item changed callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<RetroItemViewModel> ItemChanged { get; set; }
    
    /// <summary>
    /// Action item changed callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<ActionItemViewModel> ActionItemChanged { get; set; }

    /// <summary>
    /// Item removed callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<RetroItemViewModel> ItemRemoved { get; set; }
    
    /// <summary>
    /// Action item removed callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<ActionItemViewModel> ActionItemRemoved { get; set; }

    /// <summary>
    /// Item moved callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<(RetroItemViewModel Parent, RetroItemViewModel Child)> ItemMoved { get; set; }

    /// <summary>
    /// Item moved to slot callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<(Guid ColumnId, RetroItemViewModel Item)> ItemMovedToSlot { get; set; }

    /// <summary>
    /// Vote changed callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<(Guid ItemId, int Vote)> VoteChanged { get; set; }
    
    /// <summary>
    /// Retro started callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback RetroStarted { get; set; }
    
    /// <summary>
    /// To next moved callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<Guid> OnNextMoved { get; set; }
    
    /// <summary>
    /// To previous moved callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback ToPreviousMoved { get; set; }
    
    private Guid StartColumn => Columns.First().Id;
    private bool _isGrouping;
    private string RetroState => Session?.State ?? RetroStages.Collecting;
    private string RetroTextKey => $"{RetroState}Text";
    
    private IReadOnlyCollection<NavigationItem<string>> NavItems => RetroStages.All
        .Select(s => new NavigationItem<string>(Localizer[$"{s}Title"], Value: s, s == RetroState, CanMoveToNext(s)))
        .ToArray();

    private const int DebounceDelay = 500;
    private int RemainingVotes => RoomProperties.VoteCount - Items.Sum(i => i.Votes);
    private bool CanCreateRetroItem => Session is null;
    private bool CanCreateActionItem => Session?.State == RetroStages.Discussing && IsFacilitator;
    private bool CanMove => Session?.State == RetroStages.Grouping && IsFacilitator;
    private bool CanVote => Session?.State == RetroStages.Prioritizing;
    private bool HasDropSlot => CanMove && Columns.Count > 1;
    private bool IsFacilitator => CurrentUserId == RoomProperties.FacilitatorId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (RenderContext.IsBrowser && IsFacilitator && RetroState == RetroStages.Grouping && !_isGrouping)
        {
            await JsRuntime.Execute(JsFunctions.AddClassToElement(".retro-item", "animation__draggable-hint"));

            _isGrouping = true;
        }
    }

    private bool CanView(RetroItemViewModel item)
    {
        var canAsUser = Session is not null || RoomProperties.RetroType == RetroTypes.Opened;
        var canAsOwner = item.HasOwnerRights(CurrentUserId);

        return canAsUser || canAsOwner;
    }

    private bool CanEdit(RetroItemViewModel item)
    {
        var canAsOwner = Session is null && item.HasOwnerRights(CurrentUserId);
        var canAsFacilitator = Session?.State == RetroStages.Grouping && IsFacilitator;

        return canAsOwner || canAsFacilitator;
    }

    private bool CanRemove(RetroItemViewModel item)
    {
        var canAsOwner = Session is null && item.HasOwnerRights(CurrentUserId);
        var canAsFacilitator = Session?.State == RetroStages.Grouping && IsFacilitator && item.ParentId.HasValue;

        return canAsOwner || canAsFacilitator;
    }
    
    private string? GetColumnDescription(RetroColumnDto column)
    {
        if (string.IsNullOrWhiteSpace(column.Description))
            return null;
        
        var localizedDescription = Localizer[column.Description];
        var result = string.IsNullOrWhiteSpace(localizedDescription)
            ? column.Description
            : localizedDescription;
        
        return result;
    }

    private bool CanMoveToNext(string stage)
    {
        using var enumerator = RetroStages.All.GetEnumerator();
        
        while (enumerator.MoveNext())
            if (enumerator.Current == RetroState && enumerator.MoveNext() && enumerator.Current == stage)
                return true;

        return false;
    }
    
    private async Task OnMoveNext()
    {
        if (Session is null)
        {
            var notificationsService = ServiceProvider.GetRequiredService<INotificationsService>();
            
            if (Items.Any(i => !string.IsNullOrWhiteSpace(i.Text)))
                await RetroStarted.InvokeAsync();
            else
                notificationsService.Publish(Notification.Warning(Localizer["CanNotStartRetro"]));
            
            return;
        }
        
        await OnNextMoved.InvokeAsync(Session.Id);
    }

    private async Task SendRetroItemCreated(Guid columnId) => await ItemCreated.InvokeAsync(columnId);
    private async Task SendItemChanged(RetroItemViewModel item) => await ItemChanged.InvokeAsync(item);
    private async Task SendVotesChanged(Guid itemId, int vote) => await VoteChanged.InvokeAsync((itemId, vote));
    private async Task SendActionItemCreated() => await ActionItemCreated.InvokeAsync();
    private async Task SendActionItemChanged(ActionItemViewModel item) => await ActionItemChanged.InvokeAsync(item);
    private async Task SendActionItemRemoved(ActionItemViewModel item) => await ActionItemRemoved.InvokeAsync(item);
}