@inject IStringLocalizer<RetroResources> Localizer
@inject IJSRuntime JsRuntime
@inject IRenderContext RenderContext

<DashboardGrid>
    <Toolbar>
        <div class="retro-toolbar__content">
            <RetroStatePanel
                Session="Session"
                PrioritizingInProgress="PrioritizingInProgress"
                IsDiscussing="IsDiscussing"
                IsFacilitator="IsFacilitator"
                TimerDuration="TimerDuration"
                CurrentTimer="CurrentTimer"
                StartRetro="RetroStarted"
                MoveToNext="ToNextMoved"
                MoveToPrevious="ToPreviousMoved"
                TimerChanged="TimerChanged"
                Finished="Finished"
                HandRaised="HandRaised"
                FacilitatorGiven="FacilitatorGiven"
                RetroPropertiesOpened="RetroPropertiesOpened" />
            <RetroNavbar RoomId="RoomId" LinkFactory="LinkFactory" />
            <RetroParticipants
                CanVote="CanVote"
                VotesTotal="VotesTotal"
                Participants="Participants"
                IsFacilitator="IsFacilitator"
                HandLowered="HandLowered" />
        </div>
    </Toolbar>
    <Content>
        <Loading State="State" Retry="Retry">
            <Navigations Items="NavItems" />
            <p class="retro__text">@Localizer[RetroTextKey]</p>
            <div class="retro-grid">
                <div class="retro-grid__columns">
                    @foreach (var column in Columns.OrderBy(c => c.Position))
                    {
                        var description = GetColumnDescription(column);
                        var hasDescription = !string.IsNullOrWhiteSpace(description);
                            
                        <div class="retro-grid__column">
                            <Panel
                                Header="@Localizer[column.Name]"
                                IsOpen="true"
                                HasActions="@(CanCreateRetroItem || hasDescription)">
                                <Actions>
                                    @if (CanCreateRetroItem)
                                    {
                                        <Button IsDisabled="IsCreating" OnClick="() => SendRetroItemCreated(column.Id)">
                                            @Localizer["Add"]
                                        </Button>
                                    }
                                    @if (hasDescription)
                                    {    
                                        <Hint Text="@description" />
                                    }
                                </Actions>
                                <Content>
                                    <div class="retro-grid__column-items">
                                        @if (HasDropSlot)
                                        {
                                            <RetroSlot
                                                ColumnId="column.Id"
                                                CanMove="CanMove"
                                                ItemMoved="ItemMovedToSlot"/>
                                        }
                                        @foreach (var item in Items
                                                      .Where(i => i.ColumnId == column.Id || (Columns.All(c => c.Id != i.ColumnId) && column.Id == StartColumn))
                                                      .Where(i => !i.ParentId.HasValue)
                                                      .OrderByDescending(c => c.Position))
                                        {
                                            var children = Items
                                                .Where(i => i.ParentId == item.Id)
                                                .OrderByDescending(c => c.Position)
                                                .ToArray();
                                            var hasChildren = children.Any();

                                            <div>
                                                <RetroItem
                                                    @key="item.Id"
                                                    CanView="@(CanView(item))"
                                                    CanEdit="@(CanEdit(item))"
                                                    CanRemove="@(CanRemove(item) && !hasChildren)"
                                                    CanMove="CanMove"
                                                    BackgroundColor="@column.Color"
                                                    DebounceDelay="DebounceDelay"
                                                    ItemRemoved="ItemRemoved"
                                                    ItemMoved="ItemMoved"
                                                    Value="item"
                                                    ValueChanged="SendItemChanged">
                                                    @if (CanVote || IsDiscussing)
                                                    {
                                                        <InputVoting
                                                            VotesTotal="@(IsDiscussing ? item.Votes : VotesTotal)"
                                                            RemainingVotes="RemainingVotes"
                                                            CanVote="CanVote"
                                                            Value="item.Votes"
                                                            ValueExpression="@(() => item.Votes)"
                                                            ValueChanged="@((int v) => SendVotesChanged(item.Id, v))"/>
                                                    }
                                                </RetroItem>

                                                @foreach (var child in children)
                                                {
                                                    <RetroItem
                                                        @key="child.Id"
                                                        CanView="@(CanView(child))"
                                                        CanEdit="false"
                                                        CanRemove="@(CanRemove(child))"
                                                        CanMove="false"
                                                        BackgroundColor="@column.Color"
                                                        ItemRemoved="ItemRemoved"
                                                        ItemMoved="@(_ => { })"
                                                        Value="child"
                                                        ValueChanged="_ => { }"/>
                                                }
                                            </div>
                                        }
                                    </div>
                                </Content>
                            </Panel>
                        </div>
                    }
                    @if (IsDiscussing)
                    {
                        <div class="retro-grid__column">
                            <Panel Header="@Localizer["Actions"]" IsOpen="true" HasActions="CanCreateActionItem">
                                <Actions>
                                    <Button OnClick="SendActionItemCreated">
                                        @Localizer["Add"]
                                    </Button>
                                    <Hint Text="@Localizer["ActionsHint"]" />
                                </Actions>
                                <Content>
                                    <div class="retro-grid__column-items">
                                        @foreach (var actionItem in ActionItems.Where(a => Items.Any(i => i.Id == a.RetroItemId)))
                                        {
                                            <ActionItem
                                                CanEdit="IsFacilitator"
                                                CanRemove="IsFacilitator"
                                                CanMoveToState="false"
                                                Value="actionItem"
                                                DebounceDelay="DebounceDelay"
                                                ValueChanged="SendActionItemChanged"
                                                ItemRemoved="SendActionItemRemoved" />
                                        }
                                    </div>
                                </Content>
                            </Panel>
                        </div>
                    }
                </div>
            </div>
        </Loading>
    </Content>
</DashboardGrid>

@code {
    /// <summary>
    /// Room identifier.
    /// </summary>
    [Parameter, EditorRequired]
    public Guid RoomId { get; set; }
    
    /// <summary>
    /// Component state.
    /// </summary>
    [Parameter, EditorRequired]
    public LoadingState State { get; set; } = default!;

    /// <summary>
    /// Retro columns.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyCollection<RetroColumnDto> Columns { get; set; } = default!;

    /// <summary>
    /// Current user id.
    /// </summary>
    [Parameter, EditorRequired]
    public long CurrentUserId { get; set; }

    /// <summary>
    /// Retro session.
    /// </summary>
    [Parameter, EditorRequired]
    public RetroSessionDto? Session { get; set; }
    
    /// <summary>
    /// Moderator id.
    /// </summary>
    [Parameter, EditorRequired]
    public long? FacilitatorId { get; set; }

    /// <summary>
    /// Retro items.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyCollection<RetroItemViewModel> Items { get; set; } = default!;
    
    /// <summary>
    /// Action items.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyCollection<ActionItemViewModel> ActionItems { get; set; } = default!;

    /// <summary>
    /// Retro session participants.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyCollection<ParticipantViewModel> Participants { get; set; } = default!;

    /// <summary>
    /// Votes total.
    /// </summary>
    [Parameter, EditorRequired]
    public int VotesTotal { get; set; }
    
    /// <summary>
    /// Timer duration.
    /// </summary>
    [Parameter, EditorRequired]
    public TimeSpan TimerDuration { get; set; }
    
    /// <summary>
    /// Retro type.
    /// </summary>
    [Parameter, EditorRequired]
    public string RetroType { get; set; } = default!;
    
    /// <summary>
    /// Is creating retro item.
    /// </summary>
    [Parameter, EditorRequired]
    public bool IsCreating { get; set; }
    
    /// <summary>
    /// Current timer value.
    /// </summary>
    [Parameter, EditorRequired]
    public TimeSpan? CurrentTimer { get; set; }

    /// <summary>
    /// Action for retry.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Task> Retry { get; set; } = default!;
    
    /// <summary>
    /// Link factory.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<string, string> LinkFactory { get; set; } = default!;

    /// <summary>
    /// Create retro item callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<Guid> ItemCreated { get; set; }
    
    /// <summary>
    /// Action item created callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback ActionItemCreated { get; set; }

    /// <summary>
    /// Retro item changed callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<RetroItemViewModel> ItemChanged { get; set; }
    
    /// <summary>
    /// Action item changed callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<ActionItemViewModel> ActionItemChanged { get; set; }

    /// <summary>
    /// Item removed callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<RetroItemViewModel> ItemRemoved { get; set; }
    
    /// <summary>
    /// Action item removed callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<ActionItemViewModel> ActionItemRemoved { get; set; }

    /// <summary>
    /// Item moved callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<(RetroItemViewModel Parent, RetroItemViewModel Child)> ItemMoved { get; set; }

    /// <summary>
    /// Item moved to slot callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<(Guid ColumnId, RetroItemViewModel Item)> ItemMovedToSlot { get; set; }

    /// <summary>
    /// Vote changed callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<(Guid ItemId, int Vote)> VoteChanged { get; set; }
    
    /// <summary>
    /// Retro started callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback RetroStarted { get; set; }
    
    /// <summary>
    /// To next moved callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<Guid> ToNextMoved { get; set; }
    
    /// <summary>
    /// To previous moved callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback ToPreviousMoved { get; set; }
    
    /// <summary>
    /// Timer changed action.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<TimeSpan?> TimerChanged { get; set; }
    
    /// <summary>
    /// Finished action.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback Finished { get; set; }
    
    /// <summary>
    /// Hand raised action.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback HandRaised { get; set; }
    
    /// <summary>
    /// Facilitator given action.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback FacilitatorGiven { get; set; }
    
    /// <summary>
    /// Hand raised event callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<long> HandLowered { get; set; }
    
    /// <summary>
    /// Retro properties opened action.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback RetroPropertiesOpened { get; set; }

    private Guid StartColumn => Columns.First().Id;
    private bool _isGrouping;
    private string RetroState => Session?.State ?? RetroStages.Collecting;
    private string RetroTextKey => $"{RetroState}Text";
    
    private IReadOnlyCollection<NavigationItem<object?>> NavItems => RetroStages.Stages
        .Select(s => new NavigationItem<object?>(Localizer[$"{s}Title"], Value: null, s == RetroState, CanMove: false))
        .ToArray();

    private const int DebounceDelay = 500;
    private int RemainingVotes => VotesTotal - Items.Sum(i => i.Votes);
    private bool CanCreateRetroItem => Session is null;
    private bool CanCreateActionItem => Session?.State == RetroStages.Discussing && IsFacilitator;
    private bool CanMove => Session?.State == RetroStages.Grouping && IsFacilitator;
    private bool CanVote => Session?.State == RetroStages.Prioritizing;
    private bool HasDropSlot => CanMove && Columns.Count > 1;
    private bool PrioritizingInProgress => CanVote && Participants.Any(p => p.TotalVotes < VotesTotal);
    private bool IsDiscussing => Session?.State == RetroStages.Discussing;
    private bool IsFacilitator => CurrentUserId == FacilitatorId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (RenderContext.IsBrowser && IsFacilitator && RetroState == RetroStages.Grouping && !_isGrouping)
        {
            await JsRuntime.Execute(JsFunctions.AddClassToElement(".retro-item", "animation__draggable-hint"));

            _isGrouping = true;
        }
    }

    private bool CanView(RetroItemViewModel item)
    {
        var canAsUser = Session is not null || RetroType == RetroTypes.Opened;
        var canAsOwner = item.HasOwnerRights(CurrentUserId);

        return canAsUser || canAsOwner;
    }

    private bool CanEdit(RetroItemViewModel item)
    {
        var canAsOwner = Session is null && item.HasOwnerRights(CurrentUserId);
        var canAsFacilitator = Session?.State == RetroStages.Grouping && IsFacilitator;

        return canAsOwner || canAsFacilitator;
    }

    private bool CanRemove(RetroItemViewModel item)
    {
        var canAsOwner = Session is null && item.HasOwnerRights(CurrentUserId);
        var canAsFacilitator = Session?.State == RetroStages.Grouping && IsFacilitator && item.ParentId.HasValue;

        return canAsOwner || canAsFacilitator;
    }
    
    private string? GetColumnDescription(RetroColumnDto column)
    {
        if (string.IsNullOrWhiteSpace(column.Description))
            return null;
        
        var localizedDescription = Localizer[column.Description];
        var result = string.IsNullOrWhiteSpace(localizedDescription)
            ? column.Description
            : localizedDescription;
        
        return result;
    }

    private async Task SendRetroItemCreated(Guid columnId) => await ItemCreated.InvokeAsync(columnId);
    private async Task SendItemChanged(RetroItemViewModel item) => await ItemChanged.InvokeAsync(item);
    private async Task SendVotesChanged(Guid itemId, int vote) => await VoteChanged.InvokeAsync((itemId, vote));
    private async Task SendActionItemCreated() => await ActionItemCreated.InvokeAsync();
    private async Task SendActionItemChanged(ActionItemViewModel item) => await ActionItemChanged.InvokeAsync(item);
    private async Task SendActionItemRemoved(ActionItemViewModel item) => await ActionItemRemoved.InvokeAsync(item);
}