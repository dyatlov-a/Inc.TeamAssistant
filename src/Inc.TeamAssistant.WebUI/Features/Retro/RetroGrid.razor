@inject IStringLocalizer<RetroResources> Localizer

<div class="retro__fluent-container">
    <div class="retro">
        <div class="retro-toolbar">
            <div class="retro-toolbar__content">
                <RetroStatePanel
                    Session="Session"
                    StartRetro="RetroStarted"
                    MoveToNext="ToNextMoved"
                    IsPrioritizing="IsPrioritizing" />
                <RetroParticipants
                    CanVote="CanVote"
                    VotesTotal="VotesTotal"
                    Participants="Participants"/>
            </div>
        </div>
        <div class="retro-content">
            <Loading State="State" Retry="Retry">
                <Breadcrumbs Items="Breadcrumbs" />
                <p class="retro__text">@Localizer[RetroTextKey]</p>
                <div class="retro-grid">
                    <div class="retro-grid__columns">
                        @foreach (var column in Columns.OrderBy(c => c.Position))
                        {
                            <div class="retro-grid__column">
                                <Panel Header="@column.Name" IsOpen="true">
                                    <Actions>
                                        <Button IsDisabled="@(!CanCreate)" OnClick="() => SendItemCreated(column.Id)">
                                            @Localizer["Add"]
                                        </Button>
                                    </Actions>
                                    <Content>
                                        <div class="retro-grid__column-items">
                                            @if (CanMove)
                                            {
                                                <RetroGridSlot
                                                    ColumnId="column.Id"
                                                    CanMove="CanMove"
                                                    ItemMoved="ItemMovedToSlot"/>
                                            }
                                            @foreach (var item in Items
                                                          .Where(i => i.ColumnId == column.Id && !i.ParentId.HasValue)
                                                          .OrderByDescending(c => c.Position))
                                            {
                                                var children = Items
                                                    .Where(i => i.ParentId == item.Id)
                                                    .OrderByDescending(c => c.Position)
                                                    .ToArray();
                                                var hasChildren = children.Any();

                                                <div>
                                                    <InputRetroItem
                                                        @key="item.Id"
                                                        CanView="@(CanView(item))"
                                                        CanEdit="@(CanEdit(item))"
                                                        CanRemove="@(CanRemove(item) && !hasChildren)"
                                                        CanMove="CanMove"
                                                        BackgroundColor="@column.ItemColor"
                                                        DebounceDelay="500"
                                                        ItemRemoved="ItemRemoved"
                                                        ItemMoved="ItemMoved"
                                                        Value="item"
                                                        ValueExpression="@(() => item)"
                                                        ValueChanged="SendItemChanged">
                                                        @if (CanVote)
                                                        {
                                                            <InputVoting
                                                                VotesTotal="VotesTotal"
                                                                RemainingVotes="RemainingVotes"
                                                                Value="item.Votes"
                                                                ValueExpression="@(() => item.Votes)"
                                                                ValueChanged="@((int v) => SendVotesChanged(item.Id, v))"/>
                                                        }
                                                    </InputRetroItem>

                                                    @foreach (var child in children)
                                                    {
                                                        <InputRetroItem
                                                            @key="child.Id"
                                                            CanView="@(CanView(child))"
                                                            CanEdit="false"
                                                            CanRemove="@(CanRemove(child))"
                                                            CanMove="false"
                                                            BackgroundColor="@column.ItemColor"
                                                            ItemRemoved="ItemRemoved"
                                                            ItemMoved="@(_ => { })"
                                                            Value="child"
                                                            ValueExpression="@(() => child)"
                                                            ValueChanged="_ => { }"/>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </Content>
                                </Panel>
                            </div>
                        }
                    </div>
                </div>
            </Loading>
        </div>
    </div>
</div>

@code {

    /// <summary>
    /// Component state.
    /// </summary>
    [Parameter, EditorRequired]
    public LoadingState State { get; set; } = default!;

    /// <summary>
    /// Retro columns.
    /// </summary>
    [Parameter, EditorRequired]
    public IEnumerable<RetroColumnViewModel> Columns { get; set; } = default!;

    /// <summary>
    /// Current user id.
    /// </summary>
    [Parameter, EditorRequired]
    public long CurrentUserId { get; set; }

    /// <summary>
    /// Retro session.
    /// </summary>
    [Parameter, EditorRequired]
    public RetroSessionDto? Session { get; set; }

    /// <summary>
    /// Retro items.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyCollection<RetroItemViewModel> Items { get; set; } = default!;

    /// <summary>
    /// Retro session participants.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyCollection<ParticipantViewModel> Participants { get; set; } = default!;

    /// <summary>
    /// Votes total.
    /// </summary>
    [Parameter, EditorRequired]
    public int VotesTotal { get; set; }

    /// <summary>
    /// Can create retro items.
    /// </summary>
    [Parameter, EditorRequired]
    public bool CanCreate { get; set; }

    /// <summary>
    /// Link factory for breadcrumbs.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<string?, string> LinkFactory { get; set; } = default!;

    /// <summary>
    /// Action for retry.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Task> Retry { get; set; } = default!;

    /// <summary>
    /// Create retro item callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<Guid> ItemCreated { get; set; }

    /// <summary>
    /// Change retro item callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<RetroItemViewModel> ItemChanged { get; set; }

    /// <summary>
    /// Item removed callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<RetroItemViewModel> ItemRemoved { get; set; }

    /// <summary>
    /// Item moved callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<(RetroItemViewModel Parent, RetroItemViewModel Child)> ItemMoved { get; set; }

    /// <summary>
    /// Item moved to slot callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<(Guid ColumnId, RetroItemViewModel Item)> ItemMovedToSlot { get; set; }

    /// <summary>
    /// Vote changed callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<(Guid ItemId, int Vote)> VoteChanged { get; set; }
    
    /// <summary>
    /// Retro started callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback RetroStarted { get; set; }
    
    /// <summary>
    /// To next moved callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<Guid> ToNextMoved { get; set; }

    private const string GroupingState = "Grouping";
    private const string PrioritizingState = "Prioritizing";
    private const string DiscussingState = "Discussing";

    private string RetroTextKey => Session?.State switch
    {
        GroupingState => "GroupingText",
        PrioritizingState => "PrioritizingText",
        DiscussingState => "DiscussingText",
        _ => "StartText"
    };

    private IReadOnlyDictionary<string, string> Breadcrumbs => new Dictionary<string, string>
    {
        [Localizer["CollectingTitle"]] = LinkFactory(null),
        [Localizer["GroupingTitle"]] = LinkFactory("Grouping"),
        [Localizer["PrioritizingTitle"]] = LinkFactory("Prioritizing"),
        [Localizer["DiscussingTitle"]] = LinkFactory("Discussing")
    };

    private bool HasFacilitatorRights => CurrentUserId == Session?.FacilitatorId;
    private bool CanMove => Session?.State == GroupingState && HasFacilitatorRights;
    private bool CanVote => Session?.State == PrioritizingState;
    private int RemainingVotes => VotesTotal - Items.Sum(i => i.Votes);
    private bool IsPrioritizing => Participants.Any(p => p.TotalVotes < VotesTotal);

    private bool CanView(RetroItemViewModel item)
    {
        var canAsUser = Session is not null;
        var canAsOwner = item.HasOwnerRights(CurrentUserId);

        return canAsUser || canAsOwner;
    }

    private bool CanEdit(RetroItemViewModel item)
    {
        var canAsOwner = Session is null && item.HasOwnerRights(CurrentUserId);
        var canAsFacilitator = Session?.State == GroupingState && HasFacilitatorRights;

        return canAsOwner || canAsFacilitator;
    }

    private bool CanRemove(RetroItemViewModel item)
    {
        var canAsOwner = Session is null && item.HasOwnerRights(CurrentUserId);
        var canAsFacilitator = Session?.State == GroupingState && HasFacilitatorRights && item.ParentId.HasValue;

        return canAsOwner || canAsFacilitator;
    }

    private async Task SendItemCreated(Guid columnId) => await ItemCreated.InvokeAsync(columnId);

    private async Task SendItemChanged(RetroItemViewModel item) => await ItemChanged.InvokeAsync(item);

    private async Task SendVotesChanged(Guid itemId, int vote) => await VoteChanged.InvokeAsync((itemId, vote));
}