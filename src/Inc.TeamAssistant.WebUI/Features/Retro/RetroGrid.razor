@inject IStringLocalizer<RetroResources> Localizer

<Loading State="State" Retry="Retry">
    <div class="main-content">
        <div class="main-content__container">
            <h1 class="main-content__header">@Localizer["MainHeader"] @Team.Name</h1>
            <p class="main-content__text">@Localizer[RetroTextKey]</p>
            <div class="retro-grid">
                <div class="retro-grid__columns">
                    @foreach (var column in Columns)
                    {
                        <div class="retro-grid__column">
                            <Panel Header="@column.Name" IsOpen="true">
                                <Actions>
                                    <Button IsDisabled="@(!CanCreate)" OnClick="() => SendItemCreated(column.Id)">
                                        @Localizer["Add"]
                                    </Button>
                                </Actions>
                                <Content>
                                    <div class="retro-grid__column-items">
                                        @if (CanMove)
                                        {
                                            <RetroGridSlot ColumnId="column.Id" ItemMoved="ItemMovedToSlot"/>
                                        }
                                        @foreach (var item in column.Items.OrderByDescending(c => c.Position))
                                        {
                                            <div>
                                                <InputRetroItem
                                                    @key="item.Id"
                                                    CanView="@(CanView(item))"
                                                    CanEdit="@(CanEdit(item))"
                                                    CanRemove="@(CanRemove(item))"
                                                    CanMove="CanMove"
                                                    BackgroundColor="@column.ItemColor"
                                                    DebounceDelay="500"
                                                    ItemRemoved="ItemRemoved"
                                                    ItemMoved="ItemMoved"
                                                    Value="item"
                                                    ValueExpression="@(() => item)"
                                                    ValueChanged="SendItemChanged">
                                                    @if (CanVote)
                                                    {
                                                        <InputVoting
                                                            VotesTotal="VotesTotal"
                                                            RemainingVotes="RemainingVotes"
                                                            Value="item.Votes"
                                                            ValueExpression="@(() => item.Votes)"
                                                            ValueChanged="@((int v) => SendVotesChanged(item.Id, v))" />
                                                    }
                                                </InputRetroItem>

                                                @foreach (var child in item.Children)
                                                {
                                                    <InputRetroItem
                                                        @key="child.Id"
                                                        CanView="@(CanView(child))"
                                                        CanEdit="false"
                                                        CanRemove="@(CanRemove(child))"
                                                        CanMove="false"
                                                        BackgroundColor="@column.ItemColor"
                                                        ItemRemoved="ItemRemoved"
                                                        ItemMoved="@(_ => { })"
                                                        Value="child"
                                                        ValueExpression="@(() => child)"
                                                        ValueChanged="_ => { }" />
                                                }
                                            </div>
                                        }
                                    </div>
                                </Content>
                            </Panel>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</Loading>

@code {
    /// <summary>
    /// Current Team.
    /// </summary>
    [Parameter, EditorRequired]
    public TenantTeamDto Team { get; set; } = default!;

    /// <summary>
    /// Component state.
    /// </summary>
    [Parameter, EditorRequired]
    public LoadingState State { get; set; } = default!;

    /// <summary>
    /// Retro columns.
    /// </summary>
    [Parameter, EditorRequired]
    public IEnumerable<RetroColumnViewModel> Columns { get; set; } = default!;

    /// <summary>
    /// Current user id.
    /// </summary>
    [Parameter, EditorRequired]
    public long CurrentUserId { get; set; }

    /// <summary>
    /// Retro session.
    /// </summary>
    [Parameter, EditorRequired]
    public RetroSessionDto? Session { get; set; }

    /// <summary>
    /// Votes total.
    /// </summary>
    [Parameter, EditorRequired]
    public int VotesTotal { get; set; }
    
    /// <summary>
    /// Can create retro items.
    /// </summary>
    [Parameter, EditorRequired]
    public bool CanCreate { get; set; }

    /// <summary>
    /// Action for retry.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Task> Retry { get; set; } = default!;

    /// <summary>
    /// Create retro item callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<Guid> ItemCreated { get; set; }

    /// <summary>
    /// Change retro item callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<RetroItemViewModel> ItemChanged { get; set; }

    /// <summary>
    /// Item removed callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<RetroItemViewModel> ItemRemoved { get; set; }

    /// <summary>
    /// Item moved callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<(RetroItemViewModel Parent, RetroItemViewModel Child)> ItemMoved { get; set; }

    /// <summary>
    /// Item moved to slot callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<(Guid ColumnId, RetroItemViewModel Item)> ItemMovedToSlot { get; set; }
    
    /// <summary>
    /// Vote changed callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<(Guid ItemId, int Vote)> VoteChanged { get; set; }

    private const string GroupingState = "Grouping";
    private const string PrioritizingState = "Prioritizing";

    private string RetroTextKey => Session?.State switch
    {
        GroupingState => "GroupingText",
        PrioritizingState => "PrioritizingText",
        _ => "StartText"
    };

    private bool HasFacilitatorRights => CurrentUserId == Session?.FacilitatorId;
    private bool CanMove => Session?.State == GroupingState && HasFacilitatorRights;
    private bool CanVote => Session?.State == PrioritizingState;
    private int RemainingVotes => VotesTotal - Columns.SelectMany(c => c.Items).Sum(i => i.Votes);

    private bool CanView(RetroItemViewModel item)
    {
        var canAsUser = Session is not null;
        var canAsOwner = item.HasOwnerRights(CurrentUserId);

        return canAsUser || canAsOwner;
    }

    private bool CanEdit(RetroItemViewModel item)
    {
        var canAsOwner = Session is null && item.HasOwnerRights(CurrentUserId);
        var canAsFacilitator = Session?.State == GroupingState && HasFacilitatorRights;

        return canAsOwner || canAsFacilitator;
    }

    private bool CanRemove(RetroItemViewModel item)
    {
        var canAsOwner = Session is null && item.HasOwnerRights(CurrentUserId);
        var canAsFacilitator = Session?.State == GroupingState && HasFacilitatorRights && item.ParentId.HasValue;

        return canAsOwner || canAsFacilitator;
    }

    private async Task SendItemCreated(Guid columnId) => await ItemCreated.InvokeAsync(columnId);

    private async Task SendItemChanged(RetroItemViewModel item) => await ItemChanged.InvokeAsync(item);
    
    private async Task SendVotesChanged(Guid itemId, int vote) => await VoteChanged.InvokeAsync((itemId, vote));
}