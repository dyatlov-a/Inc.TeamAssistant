@page "/retro/{RoomId:guid}"
@page "/ru/retro/{RoomId:guid}"
@page "/en/retro/{RoomId:guid}"
@page "/retro/{RoomId:guid}/{ItemId:guid}"
@page "/ru/retro/{RoomId:guid}/{ItemId:guid}"
@page "/en/retro/{RoomId:guid}/{ItemId:guid}"

@attribute [Authorize]

@implements IAsyncDisposable

@inject TenantStore TenantStore
@inject IRetroService RetroService
@inject RequestProcessor RequestProcessor
@inject IServiceProvider ServiceProvider
@inject IStringLocalizer<RetroResources> Localizer
@inject NavRouter NavRouter

@layout EmptyLayout

<MetaDataModule />

<MainLayout>
    <Body>
    <AuthorizeView>
        <Authorized>
            <RetroBoard
                RoomId="RoomId"
                State="_state"
                Columns="Columns"
                CurrentUserId="context.User.ToPerson().Id"
                Session="_activeSession"
                FacilitatorId="_retroProperties.FacilitatorId"
                Items="_items"
                ActionItems="_actionItems"
                Participants="Participants"
                VotesTotal="_retroProperties.VoteCount"
                VoteByItemCount="_retroProperties.VoteByItemCount"
                TimerDuration="_retroProperties.TimerDuration"
                RetroType="@_retroProperties.RetroType"
                CurrentTimer="_currentTimer"
                IsCreating="_isCreating"
                Retry="@(() => Load(_state))"
                ItemCreated="OnRetroItemCreated"
                ItemChanged="OnRetroItemChanged"
                ItemRemoved="OnRetroItemRemoved"
                ItemMoved="OnItemMoved"
                ItemMovedToSlot="OnItemMovedToSlot"
                ActionItemCreated="OnActionItemCreated"
                ActionItemChanged="OnActionItemChanged"
                ActionItemRemoved="OnActionItemRemoved"
                VoteChanged="OnVoteChanged"
                RetroStarted="OnRetroStarted"
                OnNextMoved="OnToNextMoved"
                ToPreviousMoved="OnToPreviousMoved"
                TimerChanged="OnTimerChanged"
                Finished="OnFinished"
                HandRaised="OnHandRaised"
                FacilitatorGiven="FacilitatorGiven"
                HandLowered="OnHandLowered"
                RoomPropertiesOpened="OnRoomPropertiesOpened" />
        </Authorized>
    </AuthorizeView>
    </Body>
    <InlineDialogSlot>
        <InlineDialog
            IsOpen="@HubDisconnectedStates.All.Any(i => i == ConnectionState)"
            Text="@Localizer[ConnectionStateAsKey]"
            ButtonText="@Localizer["Reconnect"]"
            HasAction="ConnectionState == HubDisconnectedStates.Disconnected"
            OnAction="Reconnect" />
    </InlineDialogSlot>
</MainLayout>
<ContentDialog Title="@Localizer["RoomProperties"]" @ref="_roomPropertiesEditor">
    <RoomPropertiesEditorContainer RoomId="RoomId" RoomPropertiesChanged="OnRoomPropertiesChanged" />
</ContentDialog>

@code {
    [Parameter, EditorRequired]
    public Guid RoomId { get; set; }
    
    [Parameter]
    public Guid? ItemId { get; set; }
    
    private LinkedListNode<(RetroItemDto Item, IReadOnlyCollection<RetroItemDto> Children)>? _currentItem;
    private RetroEventBuilder? _eventBuilder;
    private IDisposable? _eventListener;
    private RetroSessionDto? _activeSession;
    private RetroPropertiesDto _retroProperties = RetroPropertiesDto.Empty;
    private TimeSpan? _currentTimer;
    private bool _isCreating;
    private ContentDialog? _roomPropertiesEditor;
    
    private readonly LoadingState _state = LoadingState.Done();
    private readonly List<RetroColumnDto> _columns = new();
    private LinkedList<(RetroItemDto Item, IReadOnlyCollection<RetroItemDto> Children)> _orderedItems = new();
    private readonly List<RetroItemViewModel> _items = new();
    private Dictionary<long, ParticipantViewModel> _participants = new();
    private readonly List<ActionItemViewModel> _actionItems = new();
    
    private HubConnectionState? ConnectionState => _eventBuilder?.State;
    private string ConnectionStateAsKey => ConnectionState == HubConnectionState.Disconnected
        ? "ConnectionStateLost"
        : "ConnectionStateConnecting";
    private bool IsDiscussing => _activeSession?.State == RetroStages.Discussing;
    private IReadOnlyCollection<ParticipantViewModel> Participants => _participants.Values
        .OrderBy(p => p.Person.DisplayName)
        .ToArray();
    private IReadOnlyCollection<RetroColumnDto> Columns => _columns
        .Where(c => _currentItem is null || _currentItem.Value.Item.ColumnId == c.Id)
        .ToArray();
    
    protected override async Task OnParametersSetAsync() => await Load(_state);
    
    private async Task Load(IProgress<LoadingState.State> state, bool hardReset = true)
    {
        if (hardReset)
            await TenantStore.Initialize(RoomId, state);
        
        var result = await RequestProcessor.Process(
            async () => await RetroService.GetRetroState(RoomId),
            nameof(RetroBoardContainer),
            state);
        var children = result.Items
            .Where(i => i.ParentId.HasValue)
            .ToLookup(i => i.ParentId!.Value);

        _columns.Clear();
        _columns.AddRange(result.Columns);
        _activeSession = result.ActiveSession;
        _retroProperties = result.RetroProperties;
        _currentTimer = result.CurrentTimer;
        _participants = result.Participants
            .Select(p => new ParticipantViewModel(p.Person, p.IsOnline, p.TotalVote, p.Finished, p.HandRaised))
            .ToDictionary(p => p.Person.Id);
        _orderedItems = new(result.Items
            .Where(i => !i.ParentId.HasValue)
            .OrderByDescending(i => i.Votes)
            .ThenBy(i => i.ColumnId)
            .ThenByDescending(i => i.Position)
            .Select(i => (i, (IReadOnlyCollection<RetroItemDto>)children[i.Id].ToArray())));

        if (IsDiscussing && _currentItem is null)
            _currentItem = ItemId.HasValue ? _orderedItems.Find(i => i.Item.Id == ItemId.Value) : _orderedItems.First;
        var items = _currentItem is not null
            ? _currentItem.Value.Children.Append(_currentItem.Value.Item)
            : result.Items;
        
        _items.Clear();
        foreach (var item in items)
            ApplyRetroItemChanged(item);

        _actionItems.Clear();
        foreach (var actionItem in result.ActionItems)
            ApplyActionItemChanged(actionItem);
        
        if (hardReset)
            await Connect();
    }
    
    private async Task MoveItem(LinkedListNode<(RetroItemDto Item, IReadOnlyCollection<RetroItemDto> Children)> node)
    {
        var routeSegment = $"retro/{RoomId:N}/{node.Value.Item.Id:N}".ToLowerInvariant();
        
        _currentItem = node;
        
        _items.Clear();
        foreach (var item in _currentItem.Value.Children.Append(_currentItem.Value.Item))
            ApplyRetroItemChanged(item);

        await NavRouter.MoveToRoute(routeSegment, RoutingType.Browser);
    }
    
    private async Task Connect()
    {
        var eventBuilder = ServiceProvider.GetService<RetroEventBuilder>();
        
        if (eventBuilder is not null && _eventBuilder is null)
        {
            _eventBuilder = await eventBuilder.AddAccessors(StateHasChanged, OnReconnect).Start();
            _eventListener = await StartListenEvents(eventBuilder);
        }
    }

    private async Task Reconnect()
    {
        if (_eventBuilder is null)
            return;
        
        await _eventBuilder.Start();

        await OnReconnect();
    }

    private async Task OnReconnect()
    {
        if (_eventBuilder is null)
            return;
        
        await Load(LoadingState.Wrap(_state, StateHasChanged));

        _eventListener?.Dispose();

        _eventListener = await StartListenEvents(_eventBuilder);
    }

    private async Task<IDisposable?> StartListenEvents(RetroEventBuilder eventBuilder)
    {
        return await eventBuilder.Build(
            RoomId,
            b => b.OnRetroItemChanged(async i =>
            {
                await InvokeAsync(() =>
                {
                    ApplyRetroItemChanged(i);
                    StateHasChanged();
                });
            }),
            b => b.OnRetroItemRemoved(async i =>
            {
                await InvokeAsync(() =>
                {
                    ApplyRetroItemRemovedEvent(i);
                    StateHasChanged();
                });
            }),
            b => b.OnVotesChanged(async (p, v) =>
            {
                await InvokeAsync(() =>
                {
                    ApplyVotes(p, v);
                    StateHasChanged();
                });
            }),
            b => b.OnRetroStateChanged(async (p, f, hr) =>
            {
                await InvokeAsync(() =>
                {
                    ApplyRetroState(p, f, hr);
                    StateHasChanged();
                });
            }),
            b => b.OnPersonsChanged(async p =>
            {
                await InvokeAsync(() =>
                {
                    ApplyParticipants(p);
                    StateHasChanged();
                });
            }),
            b => b.OnRetroSessionChanged(async r =>
            {
                await InvokeAsync(async () =>
                {
                    if (r.State == RetroStages.Finished)
                        await NavRouter.MoveToRoute($"retro-assessment/{r.Id:N}");
                    else
                        await Load(LoadingState.Wrap(_state, StateHasChanged), hardReset: false);
                });
            }),
            b => b.OnItemMoved(async id =>
            {
                await InvokeAsync(async () =>
                {
                    var item = _orderedItems.Find(i => i.Item.Id == id);
                    if (item is not null)
                        await MoveItem(item);

                    StateHasChanged();
                });
            }),
            b => b.OnActionItemChanged(async a =>
            {
                await InvokeAsync(() =>
                {
                    ApplyActionItemChanged(a);
                    StateHasChanged();
                });
            }),
            b => b.OnActionItemRemoved(async a =>
            {
                await InvokeAsync(() =>
                {
                    ApplyActionItemRemovedEvent(a);
                    StateHasChanged();
                });
            }),
            b => b.OnTimerChanged(async t =>
            {
                await InvokeAsync(() =>
                {
                    _currentTimer = t;
                    StateHasChanged();
                });
            }),
            b => b.OnRetroPropertiesChanged(async () =>
            {
                await InvokeAsync(async () =>
                {
                    await Load(LoadingState.Wrap(_state, StateHasChanged), hardReset: false);
                });
            })
        );
    }

    private async Task OnRetroStarted()
    {
        await RequestProcessor.Process(
            () => RetroService.StartRetro(new StartRetroCommand(RoomId)),
            _state);
    }
    
    private async Task OnToNextMoved(Guid id)
    {
        if (IsDiscussing)
        {
            if (_currentItem?.Next is not null)
            {
                if (_eventBuilder is not null)
                    await _eventBuilder.MoveItem(RoomId, _currentItem.Next.Value.Item.Id);
                
                await MoveItem(_currentItem.Next);
            }
            else if (_activeSession?.Id is not null)
                await RequestProcessor.Process(
                    () => RetroService.MoveToNextRetroState(new MoveToNextRetroStateCommand(id, RoomId)),
                    _state);
        }
        else
        {
            await RequestProcessor.Process(
                () => RetroService.MoveToNextRetroState(new MoveToNextRetroStateCommand(id, RoomId)),
                _state);
            
            await Load(_state, hardReset: false);
        }
    }

    private async Task OnToPreviousMoved()
    {
        if (_currentItem?.Previous is not null)
        {
            if (_eventBuilder is not null)
                await _eventBuilder.MoveItem(RoomId, _currentItem.Previous.Value.Item.Id);
            
            await MoveItem(_currentItem.Previous);
        }
    }

    private async Task OnRetroItemCreated(Guid columnId)
    {
        if (_eventBuilder is null)
            return;
        
        _isCreating = true;

        try
        {
            await _eventBuilder.CreateRetroItem(new CreateRetroItemCommand(RoomId, columnId, Text: null));
        }
        finally
        {
            _isCreating = false;
        }
    }

    private void OnActionItemCreated()
    {
        if (_currentItem is null)
            return;
        
        _actionItems.Add(new ActionItemViewModel(
            Guid.CreateVersion7(),
            _currentItem.Value.Item.Id,
            DateTimeOffset.UtcNow));
    }

    private async Task OnActionItemChanged(ActionItemViewModel item)
    {
        if (_eventBuilder is null)
            return;
        
        await _eventBuilder.ChangeActionItem(item.ToCommand(RoomId, notify: true));
    }

    private async Task OnActionItemRemoved(ActionItemViewModel item)
    {
        if (_eventBuilder is null)
            return;
        
        await _eventBuilder.RemoveActionItem(RoomId, item.Id);
    }

    private async Task OnRetroItemChanged(RetroItemViewModel item)
    {
        if (_eventBuilder is null)
            return;
        
        await _eventBuilder.UpdateRetroItem(item.ToCommand());
    }

    private void ApplyRetroItemChanged(RetroItemDto changed)
    {
        var viewItem = _items.SingleOrDefault(i => i.Id == changed.Id);
        if (viewItem is null)
            _items.Add(new RetroItemViewModel(changed.Id, changed.OwnerId).Apply(changed));
        else
            viewItem.Apply(changed);
    }

    private void ApplyActionItemChanged(ActionItemDto changed)
    {
        var viewActionItem = _actionItems.SingleOrDefault(i => i.Id == changed.Id);
        if (viewActionItem is null)
            _actionItems.Add(
                new ActionItemViewModel(changed.Id, changed.RetroItemId, DateTimeOffset.UtcNow).Apply(changed));
        else
            viewActionItem.Apply(changed);
    }

    private void ApplyVotes(long personId, int votesCount)
    {
        if (_participants.TryGetValue(personId, out var participant))
            participant.ChangeTotalVotes(votesCount);
    }
    
    private void ApplyRetroState(long personId, bool finished, bool handRaised)
    {
        if (_participants.TryGetValue(personId, out var participant))
            participant.ChangeFinished(finished).ChangeHandRaised(handRaised);
    }
    
    private void ApplyParticipants(IReadOnlyCollection<PersonStateTicket> tickets)
    {
        _participants.Clear();
        
        foreach (var ticket in tickets)
            _participants.Add(ticket.Person.Id, new ParticipantViewModel(
                ticket.Person,
                ticket.IsOnline,
                ticket.TotalVote,
                ticket.Finished,
                ticket.HandRaised));
    }
    
    private async Task OnRetroItemRemoved(RetroItemViewModel item)
    {
        if (_eventBuilder is null)
            return;

        ApplyRetroItemRemovedEvent(item.Id);
        
        if (item.ParentId.HasValue)
        {
            var command = item.ToCommand() with
            {
                ParentId = null
            };
            
            await _eventBuilder.UpdateRetroItem(command);
        }
        else
            await _eventBuilder.RemoveRetroItem(item.Id);
    }

    private async Task OnItemMoved((RetroItemViewModel Parent, RetroItemViewModel Child) data)
    {
        if (_eventBuilder is null)
            return;

        ApplyRetroItemRemovedEvent(data.Child.Id);
        
        var command = data.Child.ToCommand() with
        {
            ParentId = data.Parent.Id
        };
        
        await _eventBuilder.UpdateRetroItem(command);
    }

    private async Task OnItemMovedToSlot((Guid ColumnId, RetroItemViewModel Item) data)
    {
        if (_eventBuilder is null)
            return;
        
        ApplyRetroItemRemovedEvent(data.Item.Id);

        var itemWithMaxPosition = _items
            .Where(i => i.ColumnId == data.ColumnId)
            .MaxBy(i => i.Position);
        var command = data.Item.ToCommand() with
        {
            ColumnId = data.ColumnId,
            Position = (itemWithMaxPosition?.Position ?? 0) + 1
        };

        await _eventBuilder.UpdateRetroItem(command);
    }

    private async Task OnVoteChanged((Guid ItemId, int Votes) data)
    {
        if (_eventBuilder is null || _activeSession is null)
            return;
        
        var votesByPerson = _items
            .Where(i => i.Id != data.ItemId)
            .Select(i => new PersonVoteByItemDto(i.Id, i.Votes))
            .Append(new PersonVoteByItemDto(data.ItemId, data.Votes))
            .Where(i => i.Vote > 0)
            .ToArray();
        _items
            .Single(i => i.Id == data.ItemId)
            .ChangeVotes(data.Votes);

        await _eventBuilder.SetVotes(new SetVotesCommand(RoomId, _activeSession.Id, votesByPerson));
    }

    private async Task OnFinished(long personId)
    {
        if (_eventBuilder is null)
            return;

        if (_participants.TryGetValue(personId, out var participant))
            await _eventBuilder.SetRetroState(participant.ChangeFinished(!participant.Finished).ToCommand(RoomId));
    }

    private async Task OnHandRaised(long personId)
    {
        if (_eventBuilder is null)
            return;

        if (_participants.TryGetValue(personId, out var participant))
            await _eventBuilder.SetRetroState(participant.ChangeHandRaised(!participant.HandRaised).ToCommand(RoomId));
    }

    private async Task OnHandLowered(long personId)
    {
        if (_eventBuilder is null)
            return;

        if (_participants.TryGetValue(personId, out var participant))
            await _eventBuilder.SetRetroState(participant.ChangeHandRaised(false).ToCommand(RoomId));
    }

    public async Task OnTimerChanged(TimeSpan? changed)
    {
        if (_eventBuilder is null)
            return;

        var timerChanged = new [] { _currentTimer, changed }.Count(t => t.HasValue) == 1;
        if (timerChanged)
            await _eventBuilder.ChangeTimer(new ChangeTimerCommand(RoomId, changed));
        else
            _currentTimer = changed;
    }

    public async Task FacilitatorGiven()
    {
        if (_eventBuilder is null)
            return;

        await _eventBuilder.GiveFacilitator(ChangeRoomPropertiesCommand.ChangeFacilitator(RoomId));
    }

    private void ApplyRetroItemRemovedEvent(Guid itemId)
    {
        var viewItem = _items.SingleOrDefault(i => i.Id == itemId);
        if (viewItem is not null)
            _items.Remove(viewItem);
    }

    private void ApplyActionItemRemovedEvent(Guid itemId)
    {
        var viewItem = _actionItems.SingleOrDefault(i => i.Id == itemId);
        if (viewItem is not null)
            _actionItems.Remove(viewItem);
    }
    
    private async Task OnRoomPropertiesChanged()
    {
        if (_eventBuilder is null)
            return;

        await _eventBuilder.NotifyRetroPropertiesChanged(RoomId);
        
        _roomPropertiesEditor?.Close();
    }

    private void OnRoomPropertiesOpened() => _roomPropertiesEditor?.Open();
    
    public async ValueTask DisposeAsync()
    {
        if (_eventListener is not null)
        {
            _eventListener.Dispose();
            _eventListener = null;
        }
        
        if (_eventBuilder is not null)
        {
            await _eventBuilder.DisposeAsync();
            _eventBuilder = null;
        }
    }
}