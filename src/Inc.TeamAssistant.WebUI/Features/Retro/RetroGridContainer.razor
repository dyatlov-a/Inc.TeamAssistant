@page "/retro/{TeamId:guid}"
@page "/ru/retro/{TeamId:guid}"
@page "/en/retro/{TeamId:guid}"

@attribute [Authorize]

@implements IAsyncDisposable

@inject TenantStore TenantStore
@inject IRetroService RetroService
@inject RequestProcessor RequestProcessor
@inject IServiceProvider ServiceProvider

<MetaDataModule />

<AuthorizeView>
    <Authorized>
        @if (Team is not null)
        {
            <RetroStatePanel
                Session="_activeSession"
                MovedToGrouping="MoveToGrouping" />
            
            <RetroGrid
                Team="@Team"
                State="_state"
                Columns="Columns"
                CurrentUserId="context.User.ToPerson().Id"
                Session="_activeSession"
                CanCreate="_canCreate"
                Retry="@(() => Load())"
                ItemCreated="CreateRetroItem"
                ItemChanged="ChangeRetroItem"
                ItemRemoved="RemoveRetroItem" />
        }
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public Guid TeamId { get; set; }

    private TenantTeamDto? Team => TenantStore.Teams.SingleOrDefault(t => t.Id == TeamId);
    private IEnumerable<RetroColumnViewModel> Columns => _columns.Values;

    private bool _canCreate = true;
    private readonly LoadingState _state = LoadingState.Done();
    private RetroEventBuilder? _eventBuilder;
    private IAsyncDisposable? _eventListener;
    private readonly IReadOnlyDictionary<string, RetroColumnViewModel> _columns = new Dictionary<string, RetroColumnViewModel>
    {
        ["Start"] = new("Start", 1, "Start", ItemColor: "#FF8C00", new()),
        ["Stop"] = new("Stop", 2, "Stop", ItemColor: "#B22222", new()),
        ["Continue"] = new("Continue", 3, "Continue", ItemColor: "#3CB371", new())
    };

    private RetroSessionDto? _activeSession;
    
    protected override async Task OnParametersSetAsync() => await Load();
    
    private async Task Load(bool hardReset = true)
    {
        if (hardReset)
            await TenantStore.Initialize(TeamId, _state);
        
        var result = await RequestProcessor.Process(
            async () => await RetroService.GetRetroState(TeamId),
            nameof(RetroGridContainer),
            _state);

        _activeSession = result.ActiveSession;
        foreach (var item in result.Items)
            ApplyChangedEvent(item);
        
        if (hardReset)
            await Reconnect();
    }
    
    private async Task Reconnect()
    {
        if (_eventListener is not null)
            await _eventListener.DisposeAsync();
        
        var eventBuilder = ServiceProvider.GetService<RetroEventBuilder>();
        if (eventBuilder is not null)
            _eventBuilder ??= await eventBuilder.Start();
        
        _eventListener = await StartListenEvents();
    }
    
    private async Task<IAsyncDisposable?> StartListenEvents()
    {
        if (_eventBuilder is null)
            return null;

        return await _eventBuilder.Build(
            TeamId,
            b => b.OnRetroItemChanged(async i =>
            {
                await InvokeAsync(() =>
                {
                    ApplyChangedEvent(i);
                    StateHasChanged();
                });
            }),
            b => b.OnRetroItemRemoved(async i =>
            {
                await InvokeAsync(() =>
                {
                    ApplyRemovedEvent(i.Type, i.Id);
                    StateHasChanged();
                });
            }),
            b => b.OnRetroSessionChanged(async _ =>
            {
                await InvokeAsync(async () =>
                {
                    await Load(hardReset: false);
                    StateHasChanged();
                });
            }));
    }

    private async Task MoveToGrouping()
    {
        await RequestProcessor.Process(
            () => RetroService.StartRetro(new StartRetroCommand(TeamId)),
            _state);

        await Load(hardReset: false);
    }

    private async Task CreateRetroItem(string type)
    {
        _canCreate = false;

        try
        {
            if (_eventBuilder is not null)
                await _eventBuilder.CreateRetroItem(new CreateRetroItemCommand(TeamId, type, Text: null));
        }
        finally
        {
            _canCreate = true;
        }
    }

    private async Task ChangeRetroItem(RetroItemViewModel item)
    {
        if (_eventBuilder is not null)
            await _eventBuilder.UpdateRetroItem(item.ToCommand());
    }

    private void ApplyChangedEvent(RetroItemDto item)
    {
        if (!_columns.TryGetValue(item.Type, out var column))
            return;
        
        var viewItem = column.Items.SingleOrDefault(i => i.Id == item.Id);
        if (viewItem is null)
            column.Items.Add(RetroItemViewModel.Create(item.Id, item.OwnerId, item.Type).Apply(item));
        else
            viewItem.Apply(item);
    }
    
    private async Task RemoveRetroItem(RetroItemViewModel item)
    {
        if (_eventBuilder is not null)
            await _eventBuilder.RemoveRetroItem(item.Id);
    }

    private void ApplyRemovedEvent(string type, Guid itemId)
    {
        if (!_columns.TryGetValue(type, out var column))
            return;
        
        var viewItem = column.Items.SingleOrDefault(i => i.Id == itemId);
        if (viewItem is not null)
            column.Items.Remove(viewItem);
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_eventListener is not null)
        {
            await _eventListener.DisposeAsync();
            _eventListener = null;
        }
        
        if (_eventBuilder is not null)
        {
            await _eventBuilder.DisposeAsync();
            _eventBuilder = null;
        }
    }
}