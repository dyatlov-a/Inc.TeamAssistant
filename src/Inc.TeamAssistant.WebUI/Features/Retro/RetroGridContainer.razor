@page "/retro/{TeamId:guid}"
@page "/ru/retro/{TeamId:guid}"
@page "/en/retro/{TeamId:guid}"

@attribute [Authorize]

@inject TenantStore TenantStore
@inject IRetroService RetroService
@inject RequestProcessor RequestProcessor

<MetaDataModule />

@if (Team is not null)
{
    <RetroGrid
        Team="@Team"
        State="_state"
        Columns="Columns"
        CanCreate="_canCreate"
        Retry="Load"
        ItemCreated="CreateRetroItem"
        ItemChanged="ChangeRetroItem" />
}

@code {
    [Parameter]
    public Guid TeamId { get; set; }

    private TenantTeamDto? Team => TenantStore.Teams.SingleOrDefault(t => t.Id == TeamId);

    private bool _canCreate = true;
    private readonly LoadingState _state = LoadingState.Done();
    private readonly IReadOnlyDictionary<int, RetroColumnViewModel> _columns = new Dictionary<int, RetroColumnViewModel>
    {
        [1] = new("Stop", 1, ItemColor: "#B22222", new Dictionary<Guid, RetroItemViewModel>()),
        [2] = new("Start", 2, ItemColor: "#FF8C00", new Dictionary<Guid, RetroItemViewModel>()),
        [3] = new("Continue", 3, ItemColor: "#3CB371", new Dictionary<Guid, RetroItemViewModel>())
    };

    private IEnumerable<RetroColumnViewModel> Columns => _columns.Values;
    
    protected override async Task OnParametersSetAsync() => await Load();

    private async Task Load()
    {
        await TenantStore.Initialize(TeamId, _state);
        
        var result = await RequestProcessor.Process(
            async () => await RetroService.GetItems(TeamId),
            nameof(RetroGridContainer),
            _state);
        
        Bind(result);
    }

    private void Bind(GetRetroItemsResult result)
    {
        foreach (var group in result.Items.GroupBy(i => i.Type))
        {
            if (!_columns.TryGetValue(group.Key, out var column))
                continue;

            foreach (var item in group)
            {
                if (column.Items.TryGetValue(item.Id, out var viewItem))
                    viewItem.Apply(item);
                else
                    column.Items.Add(item.Id, new RetroItemViewModel().Apply(item));
            }
        }
    }

    private async Task CreateRetroItem(int type)
    {
        if (!_columns.TryGetValue(type, out var column))
            return;
        
        _canCreate = false;

        try
        {
            var command = new CreateRetroItemCommand(TeamId, type, Text: null);
            var result = await RequestProcessor.Process(
                async () => await RetroService.CreateRetroItem(command),
                _state,
                showLoading: false);
            var itemId = result.Id;

            column.Items.Add(itemId, RetroItemViewModel.Create(itemId, 0, type));
        }
        finally
        {
            _canCreate = true;
        }
    }

    private async Task ChangeRetroItem(RetroItemViewModel item)
    {
        await RequestProcessor.Process(
            async () => await RetroService.UpdateRetroItem(item.ToCommand()),
            _state,
            showLoading: false);

        if (_columns.TryGetValue(item.Type, out var column) && column.Items.TryGetValue(item.Id, out var value))
            value.Text = item.Text;
    }
}