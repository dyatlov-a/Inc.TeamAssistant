@inject IStringLocalizer<RetroResources> Localizer

<ConfirmDialog @ref="_confirmDialog">
    @Localizer["ConfirmMoveToDiscussing"]
</ConfirmDialog>

<div class="retro-state-panel">
    @if (CanMoveToPrevious)
    {
        <a
            href="#"
            class="retro__link retro__link_active"
            @onclick="OnMoveToPrevious"
            @onclick:preventDefault="true">
            <CaretLeftIcon Size="30px"/> @Localizer["Previous"]
        </a>
    }
    <a
        href="#"
        class="retro__link @MoveNextActiveCss retro__link_right"
        @onclick="OnMoveNext"
        @onclick:preventDefault="true">
        @Localizer["Next"] <CaretRightIcon Size="30px"/>
    </a>
</div>

@code {
    /// <summary>
    /// Retro session.
    /// </summary>
    [Parameter, EditorRequired]
    public RetroSessionDto? Session { get; set; }

    /// <summary>
    /// Start retro action.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback StartRetro { get; set; }
    
    /// <summary>
    /// Move to next action.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<Guid> MoveToNext { get; set; }
    
    /// <summary>
    /// Move to previous action.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback MoveToPrevious { get; set; }
    
    /// <summary>
    /// Is prioritizing state.
    /// </summary>
    [Parameter, EditorRequired]
    public bool IsPrioritizing { get; set; }
    
    /// <summary>
    ///  Is discussing state.
    /// </summary>
    [Parameter, EditorRequired]
    public bool IsDiscussing { get; set; }
    
    /// <summary>
    /// Is facilitator flag.
    /// </summary>
    [Parameter, EditorRequired]
    public bool IsFacilitator { get; set; }
    
    private ConfirmDialog? _confirmDialog;
    private bool CanMoveToPrevious => IsDiscussing && IsFacilitator;
    private bool CanMoveNext => Session is null || IsFacilitator;
    private string MoveNextActiveCss => CanMoveNext ? "retro__link_active" : string.Empty;

    private async Task OnMoveNext()
    {
        if (Session is null)
        {
            await StartRetro.InvokeAsync();
            return;
        }
        
        if (!IsFacilitator)
            return;
            
        if (IsPrioritizing && _confirmDialog is not null && !await _confirmDialog.IsConfirmed())
            return;
        
        await MoveToNext.InvokeAsync(Session.Id);
    }

    private async Task OnMoveToPrevious()
    {
        if (!IsFacilitator)
            return;
        
        await MoveToPrevious.InvokeAsync();
    }
}