@inherits InputBase<int>

<div class="vote-items @CssClass">
    @foreach (var i in Enumerable.Range(1, VotesTotal).Reverse())
    {
        <i class="vote @SelectedCssClass(i) @ActiveCssClass(i)" @onclick="@(() => OnVoteClick(i))"></i>
    }
</div>

@code {
    /// <summary>
    /// Maximum number of votes.
    /// </summary>
    [Parameter, EditorRequired]
    public int VotesTotal { get; set; }
    
    /// <summary>
    /// Remaining votes.
    /// </summary>
    [Parameter, EditorRequired]
    public int RemainingVotes { get; set; }
    
    /// <summary>
    /// Can the user vote
    /// </summary>
    [Parameter, EditorRequired]
    public bool CanVote { get; set; }
    
    private int AvailableVotes => RemainingVotes + _value;
    
    private string SelectedCssClass(int value) => value <= _value
        ? "vote_selected"
        : string.Empty;
    
    private string ActiveCssClass(int value) => CanVote && value <= AvailableVotes
        ? "vote_active"
        : string.Empty;

    private int _value;
    
    protected override void OnParametersSet()
    {
        _value = CurrentValue;
    }

    private bool CheckVote(int vote)
    {
        if (vote == _value)
            _value = 0;
        else if (vote <= AvailableVotes)
            _value = vote;
        else
            return false;

        return true;
    }
    
    private async Task OnVoteClick(int vote)
    {
        if (CanVote && CheckVote(vote))
            await ValueChanged.InvokeAsync(_value);
    }
    
    protected override bool TryParseValueFromString(
        string? value, 
        out int result,
        out string validationErrorMessage)
    {
        throw new NotImplementedException();
    }
}