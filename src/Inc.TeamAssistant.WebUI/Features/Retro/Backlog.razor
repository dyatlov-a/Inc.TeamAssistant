@inject IStringLocalizer<RetroResources> Localizer

<DashboardGrid>
    <Toolbar>
        <RoomStatePanel
            HasPrevious="false"
            HasNext="false"
            HasFinish="false"
            HasRaiseHand="false"
            CanChangeProperties="IsFacilitator"
            CurrentUserId="CurrentUserId"
            FacilitatorGiven="FacilitatorGiven"
            RoomPropertiesOpened="RoomPropertiesOpened" />
        <RoomNavbarContainer RoomId="RoomId"/>
    </Toolbar>
    <Content>
        <Loading State="State" Retry="Retry">
            <p class="backlog__text">@Localizer["BacklogText"]</p>
            <div class="backlog-grid__columns">
                @foreach (var stage in ActionItemStages.All)
                {
                    <div class="backlog-grid__column">
                        <Panel
                            Header="@GetTitle(stage)"
                            IsOpen="true"
                            HasActions="true">
                            <Actions>
                                <Hint Text="@GetHint(stage)"/>
                            </Actions>
                            <Content>
                                <div class="backlog-grid__column-items">
                                    @foreach (var item in ActionItems
                                                  .Where(i => i.State == stage)
                                                  .OrderByDescending(i => i.Modified ?? i.Created))
                                    {
                                        <ActionItem
                                            @key="item.Id"
                                            CanEdit="CanEdit(stage)"
                                            CanRemove="false"
                                            CanMoveToState="CanEdit(stage)"
                                            Value="item"
                                            DebounceDelay="DebounceDelay"
                                            ValueChanged="SendActionItemChanged"
                                            ItemRemoved="@(_ => { })"/>
                                    }
                                    @if (stage != ActionItemStages.New && Loaders.TryGetValue(stage, out var loader))
                                    {
                                        var load = () => SendLoadHistory(stage);
                                            
                                        <Loading State="loader" Retry="load">
                                            <div class="backlog-grid__column-more">
                                                <Button ButtonMode="ButtonMode.Small" OnClick="load">
                                                    @Localizer["More"]
                                                </Button>
                                            </div>
                                        </Loading>
                                    }
                                </div>
                            </Content>
                        </Panel>
                    </div>
                }
            </div>
        </Loading>
    </Content>
</DashboardGrid>

@code {
    /// <summary>
    /// Room identifier.
    /// </summary>
    [Parameter, EditorRequired]
    public Guid RoomId { get; set; }
    
    /// <summary>
    /// Page size for the backlog.
    /// </summary>
    [Parameter, EditorRequired]
    public int PageSize { get; set; }
    
    /// <summary>
    /// Component state.
    /// </summary>
    [Parameter, EditorRequired]
    public LoadingState State { get; set; } = default!;
    
    /// <summary>
    /// Loaders for different action item stages.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyDictionary<string, LoadingState> Loaders { get; set; } = default!;
    
    /// <summary>
    /// Action items for the backlog.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyCollection<ActionItemViewModel> ActionItems { get; set; } = default!;
    
    /// <summary>
    /// Current user id.
    /// </summary>
    [Parameter, EditorRequired]
    public long CurrentUserId { get; set; }
    
    /// <summary>
    /// Facilitator id.
    /// </summary>
    [Parameter, EditorRequired]
    public long? FacilitatorId { get; set; }
    
    /// <summary>
    /// Action for retry.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Task> Retry { get; set; } = default!;
    
    /// <summary>
    /// Action item changed callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<ActionItemViewModel> ActionItemChanged { get; set; }
    
    /// <summary>
    /// Facilitator given action.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback FacilitatorGiven { get; set; }
    
    /// <summary>
    /// Retro properties opened action.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback RoomPropertiesOpened { get; set; }
    
    /// <summary>
    /// Load action items history callback.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<string> LoadHistory { get; set; }

    private const int DebounceDelay = 500;
    
    private bool IsFacilitator => CurrentUserId == FacilitatorId;
    
    private bool CanEdit(string stage) => stage == ActionItemStages.New && FacilitatorId == CurrentUserId;
    private string GetTitle(string stage) => Localizer[$"ActionItemStage{stage}Title"];
    private string GetHint(string stage) => Localizer[$"ActionItemStage{stage}Hint"];
    private async Task SendActionItemChanged(ActionItemViewModel item) => await ActionItemChanged.InvokeAsync(item);
    private async Task SendLoadHistory(string stage) => await LoadHistory.InvokeAsync(stage);
}