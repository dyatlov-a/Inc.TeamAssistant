@implements IAsyncDisposable

@inject LanguageManager LanguageManager
@inject IRenderContext RenderContext
@inject IJSRuntime JsRuntime

@if (_isShow)
{
    <div class="inline-dialog cookie-warning">
        <div class="inline-dialog__content">
            <p>@_viewModel.Message</p>
        </div>
        <div class="inline-dialog__actions">
            <a href="#" @onclick="Accept" @onclick:preventDefault="true" class="button button_white">@_viewModel.ButtonText</a>
        </div>
    </div>
}

@code {
    private IJSObjectReference? _cookieModule;
    
    private bool _isShow;
    private AcceptCookieDialogViewModel _viewModel = AcceptCookieDialogViewModel.Empty;
    
    private readonly string _rightsCookieName = "rights";
    private readonly string _rightsCookieValue = "accept";
    private readonly int _rightsCookieLifetime = 365;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && RenderContext.IsBrowser)
        {
            _cookieModule = await JsRuntime.InvokeAsync<IJSObjectReference>(
                "import",
                "./Features/Dialogs/AcceptCookieDialog.razor.js");
            
            var resources = await LanguageManager.GetResource();

            _viewModel = new AcceptCookieDialogViewModel(
                resources[Messages.GUI_AcceptCookieText],
                resources[Messages.GUI_AcceptCookieButton]);

            var rightsValue = await _cookieModule.InvokeAsync<string>("readCookie", _rightsCookieName);
            if (!_rightsCookieValue.Equals(rightsValue, StringComparison.InvariantCultureIgnoreCase))
                _isShow = true;

            StateHasChanged();
        }
    }

    private async Task Accept()
    {
        if (_cookieModule is null)
            return;
        
        await _cookieModule.InvokeVoidAsync(
            "writeCookie",
            _rightsCookieName,
            _rightsCookieValue,
            _rightsCookieLifetime);

        _isShow = false;
    }

    public async ValueTask DisposeAsync()
    {
        if (_cookieModule is not null)
            await _cookieModule.DisposeAsync();
    }
}