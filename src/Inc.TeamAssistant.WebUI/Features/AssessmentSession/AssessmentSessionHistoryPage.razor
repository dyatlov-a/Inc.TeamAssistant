@page "/assessment-session/{teamId:guid}/{date}"
@page "/en/assessment-session/{teamId:guid}/{date}"
@page "/ru/assessment-session/{teamId:guid}/{date}"

@inherits PersistentComponent<AssessmentSessionHistoryPageViewModel>

@inject IAppraiserService AppraiserService

<div class="wrapper">
    <main class="main">
        <div class="assessment-history-header white">
            <div class="assessment-history-header__container">
                <a href="@MoveToBack()" class="link link_black assessment-history__link">@ViewModel.LinkToBackText</a>
                <h1 class="title">@ViewModel.StoryList @Date</h1>
            </div>
        </div>
        @if (ViewModel.Data is not null)
        {
            foreach (var story in ViewModel.Data.Items)
            {
                <div class="assessment-history-content">
                    <div class="assessment-history-content__container">
                        <Story Item="story" AverageRating="@ViewModel.AverageRating"/>
                    </div>
                </div>
            }
        }
    </main>
</div>

@code {
    [Parameter, EditorRequired]
    public Guid TeamId { get; set; }

    [Parameter, EditorRequired]
    public string Date { get; set; } = default!;

    private string MoveToBack() => LinkBuilder($"assessment-session/{TeamId:N}");
    
    protected override async Task<AssessmentSessionHistoryPageViewModel> Initialize(
        Dictionary<string, string> resources)
    {
        var getStoriesResult = await AppraiserService.GetStories(TeamId, DateOnly.Parse(Date));
        
        return new AssessmentSessionHistoryPageViewModel(
            resources[Messages.GUI_Back],
            resources[Messages.GUI_StoryList],
            resources[Messages.GUI_AverageRating],
            getStoriesResult.Result);
    }
}