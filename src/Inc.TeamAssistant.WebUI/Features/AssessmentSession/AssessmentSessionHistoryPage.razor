@page "/assessment-history/{teamId:guid}/{date}"
@page "/en/assessment-history/{teamId:guid}/{date}"
@page "/ru/assessment-history/{teamId:guid}/{date}"
@page "/assessment-history/{teamId:guid}/{date}/{View}"
@page "/en/assessment-history/{teamId:guid}/{date}/{View}"
@page "/ru/assessment-history/{teamId:guid}/{date}/{View}"

@inject IAppraiserService AppraiserService
@inject ResourcesManager Resources
@inject NavRouter NavRouter
@inject RequestProcessor RequestProcessor

<MetaDataModule
    WebsiteSection="WebsiteSection.Assessment"
    MetaOverrideTitle="@Resources[Messages.GUI_StoryList]" />

<main class="main">
    <div class="assessment-history-header">
        <div class="assessment-history-header__container">
            <Breadcrumbs Items="_breadcrumbs" />
            <h1 class="assessment-history__title">@Resources[Messages.GUI_StoryList]</h1>
        </div>
    </div>
    <div class="assessment-history-switcher">
        <div class="assessment-history-switcher__container">
            <ViewSwitcher View="_currentView" ViewChanged="OnViewChanged"/>
        </div>
    </div>
    <Loading State="_state" Retry="Load">
        <Content>
            @foreach (var item in _items)
            {
                <div class="assessment-history-content">
                    <div class="assessment-history-content__container">
                        <DynamicComponent
                            Type="CurrentViewType"
                            Parameters="@(new Dictionary<string, object> { ["Story"] = item, ["HasAcceptedValue"] = true })"/>
                    </div>
                </div>
            }
        </Content>
    </Loading>
</main>
<MainFooter />
        
@code {
    [Parameter, EditorRequired]
    public Guid TeamId { get; set; }

    [Parameter, EditorRequired]
    public string Date { get; set; } = string.Empty;
    
    [Parameter]
    public string View { get; set; } = string.Empty;
    
    private AssessmentType _currentView = Enum.GetValues<AssessmentType>().Last();
    private Type CurrentViewType => _currentView switch
    {
        AssessmentType.Individual => typeof(AssessmentIndividual),
        _ => typeof(AssessmentGroup)
    };

    private LoadingState _state = LoadingState.Done();
    private IReadOnlyDictionary<string, string> _breadcrumbs = new Dictionary<string, string>();
    private IReadOnlyCollection<StoryDto> _items = Array.Empty<StoryDto>();

    protected override async Task OnParametersSetAsync()
    {
        if (Enum.TryParse<AssessmentType>(View, ignoreCase: true, out var value))
            _currentView = value;

        _breadcrumbs = new Dictionary<string, string>
        {
            [Resources[Messages.GUI_AssessmentSession]] = NavRouter.CreateRoute($"assessment-session/{TeamId:N}"),
            [Date] = NavRouter.CreateRoute($"assessment-history/{TeamId:N}/{Date}")
        };
        
        await Load();
    }
    
    private async Task OnViewChanged(AssessmentType assessmentType)
    {
        var routeSegment = $"assessment-history/{TeamId:N}/{Date}/{assessmentType}".ToLowerInvariant();
        
        _currentView = assessmentType;

        await NavRouter.MoveToRoute(routeSegment, RoutingType.Browser);
    }

    private async Task Load()
    {
        await RequestProcessor.Process(
            () => AppraiserService.GetStories(TeamId, DateOnly.Parse(Date)),
            nameof(AssessmentSessionHistory),
            r => _items = r.Items,
            s =>
            {
                _state = s;
                StateHasChanged();
            });
    }
}