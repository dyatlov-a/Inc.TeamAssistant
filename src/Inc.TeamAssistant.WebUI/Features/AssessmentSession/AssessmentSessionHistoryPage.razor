@page "/assessment-history/{teamId:guid}/{date}"
@page "/en/assessment-history/{teamId:guid}/{date}"
@page "/ru/assessment-history/{teamId:guid}/{date}"

@using Inc.TeamAssistant.Appraiser.Model.Common

@inject IAppraiserService AppraiserService
@inject ResourcesManager Resources
@inject LinkBuilder LinkBuilder
@inject RequestProcessor RequestProcessor

<MetaDataModule WebsiteSection="WebsiteSection.Assessment" MetaOverrideTitle="@Resources[Messages.GUI_StoryList]" />

<main class="main">
    <div class="assessment-history-header">
        <div class="assessment-history-header__container">
            <Breadcrumbs Items="_breadcrumbs" />
            <h1 class="title">@Resources[Messages.GUI_StoryList]</h1>
        </div>
    </div>
    <Loading State="_state">
        <Content>
            @foreach(var item in _items)
            {
                <div class="assessment-history-content">
                    <div class="assessment-history-content__container">
                        <AssessmentIndividual Item="item" MeanRating="@Resources[Messages.GUI_MeanRating]"/>
                    </div>
                </div>
            }
        </Content>
    </Loading>
</main>
<MainFooter />
        
@code {
    [Parameter, EditorRequired]
    public Guid TeamId { get; set; }

    [Parameter, EditorRequired]
    public string Date { get; set; } = default!;

    private RequestState _state = RequestState.Done();
    private IReadOnlyCollection<BreadcrumbItem> _breadcrumbs = Array.Empty<BreadcrumbItem>();
    private IReadOnlyCollection<StoryDto> _items = Array.Empty<StoryDto>();

    protected override async Task OnParametersSetAsync()
    {
        _breadcrumbs =
        [
            new(Resources[Messages.GUI_AssessmentSession], LinkBuilder.Build($"assessment-session/{TeamId:N}")),
            new(Date, LinkBuilder.Build($"assessment-history/{TeamId:N}/{Date}"))
        ];

        await Load();
    }

    private async Task Load()
    {
        _state = await RequestProcessor.Process(
            () => AppraiserService.GetStories(TeamId, DateOnly.Parse(Date)),
            nameof(AssessmentSessionHistory),
            r =>
            {
                _items = r.Items;
                _state = RequestState.Done();
                StateHasChanged();
            });
    }
}