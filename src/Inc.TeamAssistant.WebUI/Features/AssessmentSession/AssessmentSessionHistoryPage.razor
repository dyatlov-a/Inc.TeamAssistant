@page "/assessment-history/{teamId:guid}/{date}"
@page "/en/assessment-history/{teamId:guid}/{date}"
@page "/ru/assessment-history/{teamId:guid}/{date}"

@inherits PersistentComponent<AssessmentSessionHistoryPageViewModel>

@inject IAppraiserService AppraiserService

<div class="assessment-history-header white">
    <div class="assessment-history-header__container">
        <Breadcrumbs Items="ViewModel.Items" />
        <h1 class="title">@ViewModel.StoryList</h1>
    </div>
</div>
@if (ViewModel.Data is not null)
{
    var index = 0;
    
    foreach (var story in ViewModel.Data.Items)
    {
        index++;
        var isDark = index % 2 == 0;
        var cssClass = isDark ? "assessment-history-content_dark" : string.Empty;
        
        <div class="assessment-history-content @cssClass">
            <div class="assessment-history-content__container">
                <AssessmentIndividual Item="story" IsDarkTheme="isDark" MeanRating="@ViewModel.MeanRating"/>
            </div>
        </div>
    }
}
        
@code {
    [Parameter, EditorRequired]
    public Guid TeamId { get; set; }

    [Parameter, EditorRequired]
    public string Date { get; set; } = default!;
    
    protected override async Task<AssessmentSessionHistoryPageViewModel> Initialize(
        Dictionary<string, string> resources)
    {
        var getStoriesResult = await AppraiserService.GetStories(TeamId, DateOnly.Parse(Date));
        
        return new AssessmentSessionHistoryPageViewModel(
            resources[Messages.GUI_StoryList],
            resources[Messages.GUI_MeanRating],
            new BreadcrumbItem[]
            {
                new (resources[Messages.GUI_AssessmentSession], LinkBuilder($"assessment-session/{TeamId:N}")),
                new (Date, LinkBuilder($"assessment-history/{TeamId:N}/{Date}"))
            },
            getStoriesResult.Result);
    }
}