<div class="estimate">
    <StoryDetails Story="Story" />
    <div class="estimate-group-container">
        @if (Story.EstimateEnded)
        {
            foreach (var group in EstimatesByGroup.OrderByDescending(g => g.Key.ValueGroup))
            {
                <div class="estimate-group">
                    <div>
                        <div class="estimate-group__title">@group.Key.DisplayValue</div>
                    </div>
                    <div class="estimate-group__content">
                        <div class="estimate__items">
                            @foreach (var storyForEstimate in group.OrderBy(i => i.ParticipantName))
                            {
                                <EstimateCard
                                    PersonId="storyForEstimate.ParticipantId"
                                    Name="@storyForEstimate.ParticipantName"/>
                            }
                        </div>
                    </div>
                    <div>
                        <div class="estimate-group__summary">@CalculatePercents(group.Count()).ToString("#")%</div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="estimate-group">
                <div>
                    <div class="estimate-group__title">-</div>
                </div>
                <div class="estimate-group__content">
                    <div class="estimate__items">
                        @foreach (var storyForEstimate in Estimates.OrderBy(i => i.ParticipantName))
                        {
                            <EstimateCard
                                PersonId="storyForEstimate.ParticipantId"
                                Name="@storyForEstimate.ParticipantName"/>
                        }
                    </div>
                </div>
                <div>
                    <div class="estimate-group__summary">-</div>
                </div>
            </div>
        }
    </div>
    <StoryTotal Story="Story" />
</div>

@code {
    [Parameter, EditorRequired]
    public StoryDto Story { get; set; } = default!;

    private ILookup<(int ValueGroup, string DisplayValue), StoryForEstimateDto> EstimatesByGroup => Story
        .StoryForEstimates
        .Where(s => s.ValueGroup.HasValue)
        .ToLookup(s => (s.ValueGroup!.Value, s.DisplayValue));

    private IEnumerable<StoryForEstimateDto> Estimates => Story.StoryForEstimates.Where(s => s.ValueGroup.HasValue);

    private decimal CalculatePercents(int countInGroup) => countInGroup / (decimal)Story.StoryForEstimates.Count * 100;
}