@page "/assessment-session/{id:guid}"
@page "/en/assessment-session/{id:guid}"
@page "/ru/assessment-session/{id:guid}"
@page "/assessment-session/{id:guid}/{View}"
@page "/en/assessment-session/{id:guid}/{View}"
@page "/ru/assessment-session/{id:guid}/{View}"

@implements IAsyncDisposable

@inject IAppraiserService AppraiserService
@inject IServiceProvider ServiceProvider
@inject IStringLocalizer<AssessmentSessionResources> Localizer
@inject NavRouter NavRouter
@inject RequestProcessor RequestProcessor

<MetaDataModule
    WebsiteSection="WebsiteSection.Assessment"
    MetaOverrideTitle="@Localizer["TaskAssess"]" />

<AssessmentSession
    TeamId="Id"
    Item="_item"
    CurrentView="_currentView"
    State="_state"
    Retry="@(() => Load())"
    LinkFactory="s => NavRouter.CreateRoute(s).ToString()"
    ViewChanged="OnViewChanged">
    <Footer>
        <AssessmentSessionHistorySummaryContainer TeamId="Id" />
    </Footer>
</AssessmentSession>

@code {
    [Parameter, EditorRequired]
    public Guid Id { get; set; }
    
    [Parameter]
    public string View { get; set; } = string.Empty;
    
    private AssessmentType _currentView = Enum.GetValues<AssessmentType>().First();
    private readonly LoadingState _state = LoadingState.Done();
    private GetActiveStoryResult _item = GetActiveStoryResult.Empty;
    private AssessmentSessionEventBuilder? _eventBuilder;
    private IAsyncDisposable? _eventListener;
    
    protected override async Task OnParametersSetAsync()
    {
        if (Enum.TryParse<AssessmentType>(View, ignoreCase: true, out var value))
            _currentView = value;

        await Load();

        await Connect();
    }

    private async Task Connect()
    {
        var eventBuilder = ServiceProvider.GetService<AssessmentSessionEventBuilder>();

        if (eventBuilder is not null && _eventListener is null)
        {
            _eventBuilder = await eventBuilder.Start();
            _eventListener = await StartListenEvents();
        }
    }

    private async Task<IAsyncDisposable?> StartListenEvents()
    {
        if (_eventBuilder is null)
            return null;
        
        var reload = async () => await InvokeAsync(async () =>
        {
            await Load(showLoading: false);
            StateHasChanged();
        });

        return await _eventBuilder.Build(
            Id,
            b => b.OnStoryChanged(reload),
            b => b.OnStoryAccepted(async v =>
            {
                var notificationsService = ServiceProvider.GetRequiredService<INotificationsService>();
                var message = string.Format(Localizer["EstimationAcceptedTemplate"], v);

                notificationsService.Publish(Notification.Info(message));

                await reload();
            }));
    }

    private async Task Load(bool showLoading = true)
    {
        _item = await RequestProcessor.Process(
            () => AppraiserService.GetActiveStory(Id, "000", "dfdfdf"),
            nameof(AssessmentSessionContainer),
            _state,
            showLoading);
    }
    
    private async Task OnViewChanged(AssessmentType assessmentType)
    {
        var routeSegment = $"assessment-session/{Id:N}/{assessmentType}".ToLowerInvariant();
        
        _currentView = assessmentType;

        await NavRouter.MoveToRoute(routeSegment, RoutingType.Browser);
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_eventListener is not null)
        {
            await _eventListener.DisposeAsync();
            _eventListener = null;
        }

        if (_eventBuilder is not null)
        {
            await _eventBuilder.DisposeAsync();
            _eventBuilder = null;
        }
    }
}