@page "/assessment-session/{id:guid}"
@page "/en/assessment-session/{id:guid}"
@page "/ru/assessment-session/{id:guid}"
@page "/assessment-session/{id:guid}/{View}"
@page "/en/assessment-session/{id:guid}/{View}"
@page "/ru/assessment-session/{id:guid}/{View}"

@using Inc.TeamAssistant.Appraiser.Model.Queries.GetActiveStory

@implements IAsyncDisposable

@inject IAppraiserService AppraiserService
@inject IServiceProvider ServiceProvider
@inject ResourcesManager Resources
@inject LinkBuilder LinkBuilder
@inject RequestProcessor RequestProcessor

<MetaDataModule WebsiteSection="WebsiteSection.Assessment" MetaOverrideTitle="@Resources[Messages.GUI_TaskAssess]" />

<main class="main">
    <div class="assessment-session-header">
        <div class="assessment-session-header__container">
            <div class="assessment-session__header">
                <div class="assessment-session__about">
                    <Breadcrumbs Items="_breadcrumbs" />
                    <h1 class="title">@Resources[Messages.GUI_TaskAssess]</h1>
                    <p class="assessment-session__text text">
                        @string.Format(Resources[Messages.GUI_AssessmentSessionAbout], _item.TeamName)
                    </p>
                    <p class="assessment-session__text text">@Resources[Messages.GUI_AssessmentSessionConnect]</p>
                </div>
                <div class="assessment-session__link">
                    @((MarkupString)_item.CodeForConnect)
                </div>
            </div>
        </div>
    </div>
    <div class="assessment-session-content">
        <div class="assessment-session-content__container">
            <div class="view-controls">
                @foreach (var assessmentType in Enum.GetValues<AssessmentType>())
                {
                    <a
                        href="@MoveToView(assessmentType)"
                        class="view-controls__item @ViewControlsItemCss(assessmentType)">
                        <DynamicComponent Type="GetViewIconType(assessmentType)" Parameters="ViewIconParameters" />
                    </a>
                }
            </div>
            <Loading State="_state">
                <Content>
                    @if (_item.Story is not null)
                    {
                        <DynamicComponent Type="ViewType" Parameters="ViewParameters"/>
                    }
                    else
                    {
                        <h2 class="text">@Resources[Messages.GUI_AssessmentSessionHasNotTasks]</h2>
                    }
                </Content>
            </Loading>
            
        </div>
    </div>
</main>
<div class="assessment-session-footer">
    <div class="assessment-session-footer__container">
        <AssessmentSessionHistory TeamId="Id" />
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public Guid Id { get; set; }
    
    [Parameter]
    public string View { get; set; } = default!;

    private RequestState _state = RequestState.Done();
    private IReadOnlyCollection<BreadcrumbItem> _breadcrumbs = Array.Empty<BreadcrumbItem>();
    private GetActiveStoryResult _item = new(string.Empty, string.Empty, Story: null);
    
    private AssessmentType SelectedView => Enum.TryParse<AssessmentType>(View, ignoreCase: true, out var value)
        ? value
        : Enum.GetValues<AssessmentType>().First();

    private Type ViewType => SelectedView switch
    {
        AssessmentType.Individual => typeof(AssessmentIndividual),
        _ => typeof(AssessmentGroup)
    };

    private Type GetViewIconType(AssessmentType assessmentType) => assessmentType switch
    {
        AssessmentType.Individual => typeof(GridHorizontalIcon),
        _ => typeof(GridDividersIcon)
    };
    
    private Dictionary<string, object> ViewParameters => new()
    {
        ["Item"] = _item.Story!,
        ["MeanRating"] = Resources[Messages.GUI_MeanRating],
        ["MedianRating"] = Resources[Messages.GUI_MedianRating]
    };
    
    private Dictionary<string, object> ViewIconParameters => new()
    {
        ["Size"] = "40px"
    };
    
    private EventsProvider? _eventsProvider;
    
    protected override async Task OnParametersSetAsync()
    {
        var date = DateTimeOffset.UtcNow.ToString("yyyy-MM-dd");
        _breadcrumbs = new BreadcrumbItem[]
        {
            new(Resources[Messages.GUI_AssessmentSession], LinkBuilder.Build($"assessment-session/{Id:N}")),
            new(date, LinkBuilder.Build($"assessment-history/{Id:N}/{date}"))
        };
        
        await Load();
        
        var eventsProvider = ServiceProvider.GetService<EventsProvider>();
        if (eventsProvider is not null)
            _eventsProvider ??= await eventsProvider.OnStoryChanged(Id, Load);
    }
    
    private async Task Load()
    {
        _state = await RequestProcessor.Process(
            () => AppraiserService.GetActiveStory(Id, "000", "dfdfdf"),
            nameof(AssessmentSessionPage),
            r =>
            {
                _item = r;
                _state = RequestState.Done();
                StateHasChanged();
            });
    }

    private string MoveToView(AssessmentType assessmentType)
    {
        var view = assessmentType.ToString().ToLower();
        
        return LinkBuilder.Build($"assessment-session/{Id}/{view}");
    }

    private string ViewControlsItemCss(AssessmentType assessmentType)
    {
        return assessmentType == SelectedView ? "view-controls__item_active" : string.Empty;
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_eventsProvider is not null)
            await _eventsProvider.DisposeAsync();
    }
}