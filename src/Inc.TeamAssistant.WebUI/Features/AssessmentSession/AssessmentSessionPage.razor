@page "/assessment-session/{id:guid}"
@page "/en/assessment-session/{id:guid}"
@page "/ru/assessment-session/{id:guid}"
@page "/assessment-session/{id:guid}/{View}"
@page "/en/assessment-session/{id:guid}/{View}"
@page "/ru/assessment-session/{id:guid}/{View}"

@implements IAsyncDisposable

@inject IAppraiserService AppraiserService
@inject IServiceProvider ServiceProvider
@inject ResourcesManager Resources
@inject NavRouter NavRouter
@inject RequestProcessor RequestProcessor
@inject IJSRuntime JsRuntime

<MetaDataModule
    WebsiteSection="WebsiteSection.Assessment"
    MetaOverrideTitle="@Resources[Messages.GUI_TaskAssess]" />

<main class="main">
    <div class="assessment-session-header">
        <div class="assessment-session-header__container">
            <div class="assessment-session__header">
                <div class="assessment-session__about">
                    <Breadcrumbs Items="_breadcrumbs" />
                    <h1 class="title">@Resources[Messages.GUI_TaskAssess]</h1>
                    <p class="assessment-session__text text">
                        @string.Format(Resources[Messages.GUI_AssessmentSessionAbout], _item.TeamName)
                    </p>
                    <p class="assessment-session__text text">@Resources[Messages.GUI_AssessmentSessionConnect]</p>
                </div>
                <div class="assessment-session__link">
                    <Loading State="_state" IsDark="true" Retry="() => Load()">
                        <Content>
                            @((MarkupString)_item.CodeForConnect)
                        </Content>
                    </Loading>
                </div>
            </div>
        </div>
    </div>
    <div class="assessment-session-switcher">
        <div class="assessment-session-switcher__container">
            <ViewSwitcher View="_currentView" ViewChanged="OnViewChanged"/>
        </div>
    </div>
    <div class="assessment-session-content">
        <div class="assessment-session-content__container">
            <div>
                <Loading State="_state" Retry="() => Load()">
                    <Content>
                        @if (_item.Story is not null)
                        {
                            <DynamicComponent
                                Type="CurrentViewType"
                                Parameters="@(new Dictionary<string, object>{["Story"] = _item.Story})"/>
                        }
                        else
                        {
                            <NoData/>
                        }
                    </Content>
                </Loading>
            </div>
        </div>
    </div>
</main>
<div class="assessment-session-footer">
    <div class="assessment-session-footer__container">
        <AssessmentSessionHistory TeamId="Id" />
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public Guid Id { get; set; }
    
    [Parameter]
    public string View { get; set; } = string.Empty;
    
    private AssessmentType _currentView = Enum.GetValues<AssessmentType>().First();
    private Type CurrentViewType => _currentView switch
    {
        AssessmentType.Individual => typeof(AssessmentIndividual),
        _ => typeof(AssessmentGroup)
    };
    
    private LoadingState _state = LoadingState.Done();
    private IReadOnlyCollection<SelectItem<NavRoute>> _breadcrumbs = Array.Empty<SelectItem<NavRoute>>();
    private GetActiveStoryResult _item = new(string.Empty, string.Empty, Story: null);
    private IAsyncDisposable? _eventListener;
    
    protected override async Task OnParametersSetAsync()
    {
        if (Enum.TryParse<AssessmentType>(View, ignoreCase: true, out var value))
            _currentView = value;
        
        var date = DateTimeOffset.UtcNow.ToString("yyyy-MM-dd");
        _breadcrumbs =
        [
            new(Resources[Messages.GUI_AssessmentSession], NavRouter.CreateRoute($"assessment-session/{Id:N}")),
            new(date, NavRouter.CreateRoute($"assessment-history/{Id:N}/{date}"))
        ];
        
        await Load();
        
        await StartListenEvents();
    }

    private async Task StartListenEvents()
    {
        var showLoading = false;
        var eventsProvider = ServiceProvider.GetService<EventsProvider>();
        
        if (eventsProvider is not null)
            _eventListener = await eventsProvider.OnStoryChanged(
                Id,
                b => b.OnStoryChanged(() => Load(showLoading)),
                b => b.OnStoryAccepted(async v =>
                {
                    var notificationsService = ServiceProvider.GetRequiredService<INotificationsService>();
                    var message = string.Format(Resources[Messages.GUI_EstimationAcceptedTemplate], v);

                    notificationsService.Publish(Notification.Info(message));

                    await Load(showLoading);
                }));
    }

    private async Task Load(bool showLoading = true)
    {
        await RequestProcessor.Process(
            () => AppraiserService.GetActiveStory(Id, "000", "dfdfdf"),
            nameof(AssessmentSessionPage),
            r => _item = r,
            s =>
            {
                if (showLoading || !s.IsLoading)
                {
                    _state = s;
                    StateHasChanged();
                }
            });
    }
    
    private async Task OnViewChanged(AssessmentType assessmentType)
    {
        var url = NavRouter.CreateRoute($"assessment-session/{Id:N}/{assessmentType}".ToLowerInvariant());
        
        _currentView = assessmentType;
        
        await JsRuntime.Execute(NavRouter.ChangeUrl(url));
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_eventListener is not null)
            await _eventListener.DisposeAsync();
    }
}