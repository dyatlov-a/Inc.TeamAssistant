@page "/assessment-session/{id:guid}"
@page "/en/assessment-session/{id:guid}"
@page "/ru/assessment-session/{id:guid}"
@page "/assessment-session/{id:guid}/{View}"
@page "/en/assessment-session/{id:guid}/{View}"
@page "/ru/assessment-session/{id:guid}/{View}"

@using Inc.TeamAssistant.WebUI.Services.ClientCore
@inherits PersistentComponent<AssessmentSessionPageViewModel>

@inject IAppraiserService AppraiserService
@inject IServiceProvider ServiceProvider

<PageTitle>@ViewModel.TaskAssess</PageTitle>

<main class="main">
    <div class="assessment-session-header white">
        <div class="assessment-session-header__container">
            <div class="assessment-session__header">
                <div class="assessment-session__about">
                    <Breadcrumbs Items="ViewModel.Items" />
                    <h1 class="title">@ViewModel.TaskAssess</h1>
                    <p class="assessment-session__text text">@string.Format(ViewModel.AboutTemplate, ViewModel.TeamName)</p>
                    <p class="assessment-session__text text">@ViewModel.ConnectToTeam</p>
                </div>
                <div class="assessment-session__link">
                    @((MarkupString)ViewModel.CodeForConnect)
                </div>
            </div>
        </div>
    </div>
    <div class="assessment-session-content">
        <div class="assessment-session-content__container">
            <div class="view-controls">
                @foreach (var assessmentType in Enum.GetValues<AssessmentType>())
                {
                    <a href="@MoveToView(assessmentType)" class="view-controls__item @ViewControlsItemCss(assessmentType)">
                        <DynamicComponent Type="GetViewIconType(assessmentType)" Parameters="ViewIconParameters" />
                    </a>
                }
            </div>
            @if (ViewModel.Story is not null)
            {
                <DynamicComponent Type="ViewType" Parameters="ViewParameters"/>
            }
            else
            {
                <h2 class="text">@ViewModel.HasNotTasks</h2>
            }
        </div>
    </div>
</main>
<div class="assessment-session-footer white">
    <div class="assessment-session-footer__container">
        <AssessmentSessionHistory TeamId="Id" />
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public Guid Id { get; set; }
    
    [Parameter]
    public string View { get; set; } = default!;
    
    private AssessmentType SelectedView => Enum.TryParse<AssessmentType>(View, ignoreCase: true, out var value)
        ? value
        : Enum.GetValues<AssessmentType>().First();

    private Type ViewType => SelectedView switch
    {
        AssessmentType.Individual => typeof(AssessmentIndividual),
        _ => typeof(AssessmentGroup)
    };

    private Type GetViewIconType(AssessmentType assessmentType) => assessmentType switch
    {
        AssessmentType.Individual => typeof(GridHorizontalIcon),
        _ => typeof(GridDividersIcon)
    };
    
    private Dictionary<string, object> ViewParameters => new()
    {
        ["Item"] = ViewModel.Story!,
        ["MeanRating"] = ViewModel.MeanRating,
        ["MedianRating"] = ViewModel.MedianRating,
        ["IsDarkTheme"] = false
    };
    
    private Dictionary<string, object> ViewIconParameters => new()
    {
        ["Size"] = "40px",
        ["Color"] = "#fff"
    };
    
    private EventsProvider? _eventsProvider;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        
        var eventsProvider = ServiceProvider.GetService<EventsProvider>();
        if (eventsProvider is not null)
            _eventsProvider ??= await eventsProvider.OnStoryChanged(Id, Update);
    }

    protected override async Task<AssessmentSessionPageViewModel> Initialize(Dictionary<string, string> resources)
    {
        var date = DateTimeOffset.UtcNow.ToString("yyyy-MM-dd");
        var newStoryState = await AppraiserService.GetActiveStory(Id);

        return new(
            resources[Messages.GUI_TaskAssess],
            resources[Messages.GUI_MeanRating],
            resources[Messages.GUI_MedianRating],
            resources[Messages.GUI_AssessmentSessionAbout],
            resources[Messages.GUI_AssessmentSessionConnect],
            resources[Messages.GUI_AssessmentSessionHasNotTasks],
            newStoryState.Result.TeamName,
            newStoryState.Result.CodeForConnect,
            new BreadcrumbItem[]
            {
                new (resources[Messages.GUI_AssessmentSession], LinkBuilder($"assessment-session/{Id:N}")),
                new (date, LinkBuilder($"assessment-history/{Id:N}/{date}"))
            },
            newStoryState.Result.Story);
    }

    private string MoveToView(AssessmentType assessmentType)
    {
        var view = assessmentType.ToString().ToLower();
        
        return LinkBuilder($"assessment-session/{Id}/{view}");
    }

    private string ViewControlsItemCss(AssessmentType assessmentType)
    {
        return assessmentType == SelectedView ? "view-controls__item_active" : string.Empty;
    }
    
    public override async ValueTask DisposeAsync()
    {
        if (_eventsProvider is not null)
            await _eventsProvider.DisposeAsync();

        await base.DisposeAsync();
    }
}