@page "/assessment-session/{id:guid}"
@page "/en/assessment-session/{id:guid}"
@page "/ru/assessment-session/{id:guid}"

@inherits PersistentComponent<AssessmentSessionPageViewModel>

@inject IAppraiserService AppraiserService
@inject IServiceProvider ServiceProvider

<PageTitle>@ViewModel.TaskAssess</PageTitle>

<div class="assessment-session-header white">
    <div class="assessment-session-header__container">
        <div class="assessment-session__header">
            <div class="assessment-session__about">
                <h1 class="title">@ViewModel.TaskAssess</h1>
                <p class="assessment-session__text text">@string.Format(ViewModel.AboutTemplate, ViewModel.TeamName)</p>
                <p class="assessment-session__text text">@ViewModel.ConnectToTeam</p>
            </div>
            <div class="assessment-session__link">
                @((MarkupString)ViewModel.CodeForConnect)
            </div>
        </div>
    </div>
</div>
<div class="assessment-session-content">
    <div class="assessment-session-content__container">
        @if (ViewModel.Story is not null)
        {
            <Story Item="ViewModel.Story" AverageRating="@ViewModel.AverageRating"/>
        }
    </div>
</div>
<div class="assessment-session-footer white">
    <div class="assessment-session-footer__container">
        <AssessmentSessionHistory TeamId="Id" HistoryDepth="5" @ref="_history"/>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public Guid Id { get; set; }
    
    private EventsProvider? _eventsProvider;
    private AssessmentSessionHistory _history = default!;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        
        var eventsProvider = ServiceProvider.GetService<EventsProvider>();
        if (eventsProvider is not null && _eventsProvider is null)
            _eventsProvider = await eventsProvider.OnStoryChanged(Id, Update);
    }

    protected override async Task<AssessmentSessionPageViewModel> Initialize(Dictionary<string, string> resources)
    {
        var newStoryState = await AppraiserService.GetActiveStory(Id);

        if (ViewModel.Story?.Id != newStoryState.Result.Story?.Id)
            await _history.Update();

        return new(
            resources[Messages.GUI_TaskAssess],
            resources[Messages.GUI_AverageRating],
            resources[Messages.GUI_AssessmentSessionAbout],
            resources[Messages.GUI_AssessmentSessionConnect],
            newStoryState.Result.TeamName,
            newStoryState.Result.CodeForConnect,
            newStoryState.Result.Story);
    }
    
    public override async ValueTask DisposeAsync()
    {
        if (_eventsProvider is not null)
            await _eventsProvider.DisposeAsync();

        await base.DisposeAsync();
    }
}