@page "/assessment-session/{id:guid}"
@page "/en/assessment-session/{id:guid}"
@page "/ru/assessment-session/{id:guid}"

@using Inc.TeamAssistant.Appraiser.Model.Common

@inherits PersistentComponent<AssessmentSessionPageViewModel>

@inject IAppraiserService AppraiserService
@inject IServiceProvider ServiceProvider

<PageTitle>@ViewModel.TaskAssess</PageTitle>

<div class="assessment-session">
    <div class="assessment-session__container">
        <div class="assessment-session__body">
            <div class="assessment-session__card">
                <h1 class="assessment-session__title">@ViewModel.TaskAssess</h1>
                @if (ViewModel.Data is { State: ServiceResultState.Success, Result: not null })
                {
                    <StoryDetails Item="ViewModel.Data.Result.Story" AverageRating="@ViewModel.AverageRating" IsFullScreen="true"/>
                }
                else
                {
                    <p class="assessment-session__text">@ViewModel.StateMessage</p>
                }
            </div>
            <div class="phone phone_hidden-on-tablet">
                <div class="phone__screen">
                    <div class="phone__content">
                        <div class="qr-code">
                            @if (ViewModel.Data is { State: ServiceResultState.Success, Result: not null })
                            {
                                <div class="qr-code__content">
                                    @((MarkupString) ViewModel.Data.Result.CodeForConnect)
                                </div>
                                <span class="qr-code__text">@ViewModel.Scan</span>
                                <span class="qr-code__text qr-code__text_sub">@ViewModel.ToConnect</span>
                            }
                        </div>
                    </div>
                    <div class="phone__mockup"></div>
                </div>
            </div>
        </div>
        
        <AssessmentSessionHistory TeamId="Id" HistoryDepth="5" @ref="_history" />
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public Guid Id { get; set; }
    
    private EventsProvider? _eventsProvider;
    
    private AssessmentSessionHistory _history = default!;

    protected override async Task OnInitializedAsync()
    {
        var eventsProvider = ServiceProvider.GetService<EventsProvider>();
        if (eventsProvider is not null)
        {
            await eventsProvider.OnStoryChanged(Id, Update);
            _eventsProvider = eventsProvider;
        }
    }

    protected override async Task<AssessmentSessionPageViewModel> Initialize(Dictionary<string, string> resources)
    {
        var newStoryState = await AppraiserService.GetStoryDetails(Id);

        if (ViewModel.Data.Result is not null && ViewModel.Data.Result.Story.Id != newStoryState.Result?.Story.Id)
            await _history.Update();

        return new(
            resources[Messages.GUI_TaskAssess],
            resources[Messages.GUI_CardNotSelected],
            resources[Messages.GUI_Scan],
            resources[Messages.GUI_ToConnect],
            resources[Messages.GUI_AssessmentSessionCard],
            resources[Messages.GUI_AssessmentSessionNotFound],
            resources[Messages.GUI_Loading],
            resources[Messages.GUI_AverageRating],
            newStoryState);
    }
    
    public override async ValueTask DisposeAsync()
    {
        if (_eventsProvider is not null)
            await _eventsProvider.DisposeAsync();

        await base.DisposeAsync();
    }
}