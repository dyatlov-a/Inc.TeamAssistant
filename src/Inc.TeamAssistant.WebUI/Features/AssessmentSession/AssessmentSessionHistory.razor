@inject IStringLocalizer<AssessmentSessionResources> Localizer

<main class="main">
    <div class="assessment-history-header">
        <div class="assessment-history-header__container">
            <Breadcrumbs Items="Breadcrumbs" />
            <h1 class="assessment-history__title">@Localizer["StoryList"]</h1>
        </div>
    </div>
    <div class="assessment-history-switcher">
        <div class="assessment-history-switcher__container">
            <ViewSwitcher View="CurrentView" ViewChanged="ViewChanged"/>
        </div>
    </div>
    <Loading State="State" Retry="Retry">
        @foreach (var item in Items)
        {
            <div class="assessment-history-content">
                <div class="assessment-history-content__container">
                    <DynamicComponent
                        Type="CurrentViewType"
                        Parameters="@(new Dictionary<string, object> { ["Story"] = item, ["HasAcceptedValue"] = true })"/>
                </div>
            </div>
        }
    </Loading>
</main>
        
@code {
    /// <summary>
    /// Current TeamId.
    /// </summary>
    [Parameter, EditorRequired]
    public Guid TeamId { get; set; }

    /// <summary>
    /// Selected date.
    /// </summary>
    [Parameter, EditorRequired]
    public string Date { get; set; } = string.Empty;
    
    /// <summary>
    /// Action for retry.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Task> Retry { get; set; } = default!;
    
    /// <summary>
    /// Factory for create link for breadcrumbs.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<string, string> LinkFactory { get; set; } = default!;
    
    /// <summary>
    /// ViewChanged event.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<AssessmentType> ViewChanged { get; set; }
    
    /// <summary>
    /// Selected view.
    /// </summary>
    [Parameter, EditorRequired]
    public AssessmentType CurrentView { get; set; }

    /// <summary>
    /// Component state.
    /// </summary>
    [Parameter, EditorRequired]
    public LoadingState State { get; set; } = default!;
    
    /// <summary>
    /// Estimated stories.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyCollection<StoryDto> Items { get; set; } = default!;
    
    private Type CurrentViewType => CurrentView switch
    {
        AssessmentType.Individual => typeof(AssessmentIndividual),
        _ => typeof(AssessmentGroup)
    };

    private IReadOnlyCollection<BreadcrumbItem> Breadcrumbs =>
    [
        new(Localizer["AssessmentSession"], Selected: false, LinkFactory($"assessment-session/{TeamId:N}")),
        new(Date, Selected: true, LinkFactory($"assessment-history/{TeamId:N}/{Date}"))
    ];
}