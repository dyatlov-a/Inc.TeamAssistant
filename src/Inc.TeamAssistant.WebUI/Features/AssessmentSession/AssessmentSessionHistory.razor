@inject IAppraiserService AppraiserService
@inject IStringLocalizer<AssessmentSessionResources> Localizer
@inject NavRouter NavRouter
@inject RequestProcessor RequestProcessor

@if (_items.Any())
{
    <div class="history">
        <div class="history__title">@Localizer["History"].Value</div>
        <div class="history__body">
            @foreach (var item in _items)
            {
                <RouterLink Href="@CreateMoveToHistoryLink(item)" ComponentStyle="ComponentStyle.Secondary">
                    <Content>
                        @item.AssessmentDate.ToString("dd-MM-yyyy") - @item.StoriesCount @Localizer["Tasks"].Value
                    </Content>
                </RouterLink>
            }
        </div>
    </div>
}

@code {
    [Parameter, EditorRequired]
    public Guid TeamId { get; set; }
    
    private IReadOnlyCollection<AssessmentHistoryDto> _items = Array.Empty<AssessmentHistoryDto>();

    private string CreateMoveToHistoryLink(AssessmentHistoryDto historyItem)
        => NavRouter.CreateRoute($"assessment-history/{TeamId:N}/{historyItem.AssessmentDate:yyyy-MM-dd}");

    protected override Task OnParametersSetAsync() => Load();

    private async Task Load()
    {
        await RequestProcessor.Process(
            () => AppraiserService.GetAssessmentHistory(TeamId, limit: 3),
            nameof(AssessmentSessionHistory),
            r => _items = r.Items,
            _ => StateHasChanged());
    }
}