@inject IAppraiserService AppraiserService
@inject ResourcesManager Resources
@inject TeamAssistantRouter TeamAssistantRouter
@inject RequestProcessor RequestProcessor

@if (_items.Any())
{
    <div class="history">
        <div class="history__title">@Resources[Messages.GUI_History]</div>
        <div class="history__body">
            @foreach (var item in _items)
            {
                <a href="@MoveToItem(item)" class="link link_dark history__item">
                    @item.AssessmentDate.ToString("dd-MM-yyyy") - @item.StoriesCount @Resources[Messages.GUI_Tasks]
                </a>
            }
        </div>
    </div>
}

@code {
    [Parameter, EditorRequired]
    public Guid TeamId { get; set; }
    
    private IReadOnlyCollection<AssessmentHistoryDto> _items = Array.Empty<AssessmentHistoryDto>();

    private string MoveToItem(AssessmentHistoryDto historyItem)
    {
        if (historyItem is null)
            throw new ArgumentNullException(nameof(historyItem));

        return TeamAssistantRouter.CreateRoute($"assessment-history/{TeamId:N}/{historyItem.AssessmentDate:yyyy-MM-dd}");
    }

    protected override Task OnParametersSetAsync() => Load();

    private async Task Load()
    {
        await RequestProcessor.Process(
            () => AppraiserService.GetAssessmentHistory(TeamId, limit: 3),
            nameof(AssessmentSessionHistory),
            r => _items = r.Items,
            _ => StateHasChanged());
    }
}