@inherits InputBase<TimeOnly>

<FormFieldSet
    FieldId="@FieldId"
    Label="@Label">
    <Content>
        <div class="time-selector__hours">
            <SelectList
                FieldId="@FieldId"
                Value="_selectedHours"
                ValueChanged="@((int i) => SelectHour(i))"
                Items="_hours"
                TitleSelector="i => i.Text"
                ValueSelector="i => i.Value" />
        </div>
        <div class="time-selector__minutes">
            <SelectList
                FieldId="@($"{FieldId}-minute")"
                Value="_selectedMinutes"
                ValueChanged="@((int i) => SelectMinutes(i))"
                Items="_minutes"
                TitleSelector="i => i.Text"
                ValueSelector="i => i.Value" />
        </div>
    </Content>
</FormFieldSet>

@code {
    [Parameter, EditorRequired]
    public string FieldId { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public string Label { get; set; } = default!;
    
    private int _selectedHours;
    private int _selectedMinutes;

    private readonly IReadOnlyCollection<(string Text, int Value)> _hours = Enumerable
        .Range(0, 24)
        .Select(i => (i.ToString("D2"), i))
        .ToArray();

    private readonly IReadOnlyCollection<(string Text, int Value)> _minutes = Enumerable
        .Range(0, 12)
        .Select(i => i * 5)
        .Select(i => (i.ToString("D2"), i))
        .ToArray();
    
    protected override void OnParametersSet()
    {
        _selectedHours = CurrentValue.Hour;
        _selectedMinutes = CurrentValue.Minute;
    }
    
    private void SelectHour(int hour)
    {
        _selectedHours = hour;
        SetCurrentValue();
    }
    
    private void SelectMinutes(int minutes)
    {
        _selectedMinutes = minutes;
        SetCurrentValue();
    }
    
    private void SetCurrentValue() => CurrentValue = new TimeOnly(_selectedHours, _selectedMinutes);
    
    protected override bool TryParseValueFromString(
        string? value,
        out TimeOnly result,
        out string validationErrorMessage)
    {
        throw new NotImplementedException();
    }
}