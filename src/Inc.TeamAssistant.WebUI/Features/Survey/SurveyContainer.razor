@page "/survey/{RoomId:guid}"
@page "/ru/survey/{RoomId:guid}"
@page "/en/survey/{RoomId:guid}"
@page "/survey/{RoomId:guid}/{QuestionId:guid}"
@page "/ru/survey/{RoomId:guid}/{QuestionId:guid}"
@page "/en/survey/{RoomId:guid}/{QuestionId:guid}"

@attribute [Authorize]

@inject TenantStore TenantStore
@inject ITenantService TenantService
@inject ISurveyService SurveyService
@inject RequestProcessor RequestProcessor
@inject IStringLocalizer<SurveyResources> Localizer

<MetaDataModule />

<AuthorizeView>
    <Authorized>
        <Survey
            RoomId="RoomId"
            CurrentUserId="context.User.ToPerson().Id"
            FacilitatorId="_facilitatorId"
            Question="Question"
            MoveNext="MoveNext"
            FacilitatorGiven="FacilitatorGiven"
            RoomPropertiesOpened="OnRoomPropertiesOpened"
            State="_state"
            Retry="@(() => Load())" />
    </Authorized>
</AuthorizeView>
<ContentDialog Title="@Localizer["RoomProperties"]" @ref="_roomPropertiesEditor">
    <RoomPropertiesEditorContainer RoomId="RoomId" RoomPropertiesChanged="OnRoomPropertiesChanged" />
</ContentDialog>

@code {
    [Parameter, EditorRequired]
    public Guid RoomId { get; set; }
    
    [Parameter]
    public Guid? QuestionId { get; set; }

    private Guid? _surveyId;
    private long? _facilitatorId;
    private readonly List<SurveyQuestionViewModel> _questions = new();
    private ContentDialog? _roomPropertiesEditor;
    private SurveyQuestionViewModel? Question => _questions.SingleOrDefault(i => i.Id == QuestionId);
    
    private readonly LoadingState _state = LoadingState.Done();
    
    protected override async Task OnParametersSetAsync() => await Load();

    private async Task Load(bool hardReset = true)
    {
        if (hardReset)
            await TenantStore.Initialize(RoomId, _state);
        
        var result = await RequestProcessor.Process(
            async () => await SurveyService.GetSurveyState(RoomId),
            nameof(SurveyContainer),
            _state);

        _surveyId = result.SurveyId;
        _facilitatorId = result.FacilitatorId;
        
        _questions.Clear();
        _questions.AddRange(result.Questions.Select(i => new SurveyQuestionViewModel(i)));
    }
    
    private async Task MoveNext()
    {
        if (_surveyId.HasValue)
            await RequestProcessor.Process(
                () => SurveyService.Start(new StartSurveyCommand(RoomId)),
                _state);
        else
            await RequestProcessor.Process(
                () => SurveyService.Finish(new FinishSurveyCommand(RoomId)),
                _state);
    }

    private async Task FacilitatorGiven()
    {
        // TODO: send event to hub
        await RequestProcessor.Process(
            async () => await TenantService.ChangeRoomProperties(ChangeRoomPropertiesCommand.ChangeFacilitator(RoomId)),
            _state);

        await Load(hardReset: false);
    }

    private void OnRoomPropertiesOpened() => _roomPropertiesEditor?.Open();
    private void OnRoomPropertiesChanged() => _roomPropertiesEditor?.Close();
}