@inject IStringLocalizer<SurveyResources> Localizer

<div class="survey-summary__content">
    <ApexChart
        TItem="SurveyQuestionDto"
        Options="ApexChartBaseOptionsBuilder.BuildRadar<SurveyQuestionDto>()"
        @ref="_totalSummaryChart">
        @if (HasParticipants)
        {
            foreach (var participantAnswers in _lastParticipantAnswers)
            {
                <ApexPointSeries TItem="SurveyQuestionDto"
                                 Items="participantAnswers"
                                 SeriesType="SeriesType.Radar"
                                 XValue="@(e => Localizer[e.QuestionTitle].ToString())"
                                 YValue="@(e => e.Value)"/>
            }
        }
        @if (HasMean)
        {
            <ApexPointSeries TItem="SurveyQuestionDto"
                             Items="_lastMeanAnswers"
                             Name="survey-summary__mean"
                             SeriesType="SeriesType.Radar"
                             XValue="@(e => Localizer[e.QuestionTitle].ToString())"
                             YValue="@(e => e.Value)"/>
        }
    </ApexChart>
    @foreach (var answerByQuestion in Answers.ToLookup(a => new { a.QuestionId, a.QuestionTitle, a.QuestionText }))
    {
        var answerLookup = answerByQuestion
            .GroupBy(a => a.SurveyDate, a => a.Value)
            .ToDictionary(a => a.Key, a => a.ToArray());
        var meanLookup = answerByQuestion
            .GroupBy(a => a.SurveyDate)
            .Select(g => new Tuple<DateTimeOffset, int>(g.Key, CalculateMean(g)))
            .ToArray();
        var lastAnswerDate = answerLookup.Keys.Max();
        var lastMean = meanLookup.Single(m => m.Item1 == lastAnswerDate);
        var lastAnswers = answerLookup[lastAnswerDate]
            .GroupBy(a => a)
            .Select(a => new Tuple<int, int>(a.Key, a.Count()))
            .ToArray();
        var answerComments = Answers
            .Where(a => a.SurveyDate == _lastSurveyDate && a.QuestionId == answerByQuestion.Key.QuestionId && !string.IsNullOrWhiteSpace(a.Comment))
            .Select(a => a.Comment)
            .ToArray();
                                           
        <FormSection Title="@Localizer[answerByQuestion.Key.QuestionTitle]">
            <HelpContent>
                @(new MarkupString(Localizer[answerByQuestion.Key.QuestionText]))
            </HelpContent>
            <ChildContent>
                <div class="survey-question">
                    <div class="survey-question__summary">
                        <div title="@Localizer["MeanAnswerHint"]" class="survey-question__mean">
                            <span class="survey-question__answer @ValueToCssClass(lastMean.Item2)">
                                @ValueToDisplay(lastMean.Item2)
                            </span>
                        </div>
                        <div class="survey-question__trend" title="@Localizer["AnswersTrendHint"]">
                            <ApexChart
                                @key="answerByQuestion.Key.QuestionId"
                                TItem="Tuple<DateTimeOffset, int>"
                                Title="@Localizer["Trend"]"
                                Options="ApexChartBaseOptionsBuilder.CreateLineOptions<Tuple<DateTimeOffset, int>>()">
                                <ApexPointSeries TItem="Tuple<DateTimeOffset, int>"
                                                 Items="meanLookup"
                                                 SeriesType="SeriesType.Line"
                                                 XValue="@(e => e.Item1)"
                                                 YValue="@(e => e.Item2)"
                                                 OrderBy="e => e.X"/>
                            </ApexChart>
                        </div>
                        <div title="@Localizer["AnswersHint"]" class="survey-question__answers">
                            @foreach (var answer in lastAnswers.OrderBy(a => a.Item1))
                            {
                                <span
                                    class="survey-question__answer @ValueToCssClass(answer.Item1)"
                                    data-count="@answer.Item2">
                                    @ValueToDisplay(answer.Item1)
                                </span>
                            }
                        </div>
                    </div>
                    <div class="survey-question__comments">
                        @foreach (var answerComment in answerComments)
                        {
                            <p class="survey-question__comment">@answerComment</p>
                        }
                    </div>
                </div>
            </ChildContent>
        </FormSection>
    }
</div>

@code {
    /// <summary>
    /// Has participants
    /// </summary>
    [Parameter, EditorRequired]
    public bool HasParticipants { get; set; }
    
    /// <summary>
    /// Has mean.
    /// </summary>
    [Parameter, EditorRequired]
    public bool HasMean { get; set; }
    
    /// <summary>
    /// Last answers.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyCollection<SurveyQuestionDto> Answers { get; set; } = default!;
    
    private ApexChart<SurveyQuestionDto>? _totalSummaryChart;
    private readonly List<IReadOnlyCollection<SurveyQuestionDto>> _lastParticipantAnswers = new();
    private readonly List<SurveyQuestionDto> _lastMeanAnswers = new();
    private DateTimeOffset _lastSurveyDate;

    public async Task Update()
    {
        if (_totalSummaryChart is not null)
            await _totalSummaryChart.RenderAsync();
    }

    protected override void OnParametersSet()
    {
        _lastSurveyDate = Answers.Any()
            ? Answers.Max(a => a.SurveyDate)
            : DateTimeOffset.UtcNow;
        var lastAnswers = Answers
            .Where(a => a.SurveyDate == _lastSurveyDate)
            .ToArray();
        var lastParticipantAnswers = lastAnswers
            .GroupBy(k => k.ResponderId.ToString())
            .Select(v => v.OrderBy(a => a.QuestionTitle).ToArray());
        var lastMeanAnswers = lastAnswers
            .GroupBy(k => new { k.QuestionId, k.QuestionTitle, k.QuestionText })
            .Select(a => new SurveyQuestionDto(
                a.Key.QuestionId,
                a.Key.QuestionTitle,
                a.Key.QuestionText,
                _lastSurveyDate,
                ResponderId: 0,
                Value: CalculateMean(a),
                Comment: null))
            .OrderBy(a => a.QuestionTitle);

        _lastParticipantAnswers.Clear();
        _lastParticipantAnswers.AddRange(lastParticipantAnswers);
        
        _lastMeanAnswers.Clear();
        _lastMeanAnswers.AddRange(lastMeanAnswers);
    }
    
    private string ValueToCssClass(int value) => value > 3
        ? "survey-question__answer_positive"
        : "survey-question__answer_negative";

    private string ValueToDisplay(int value) => value == 0 ? "-" : value.ToString();
    
    private int CalculateMean(IEnumerable<SurveyQuestionDto> items)
    {
        var values = items.Where(i => i.Value > 0).ToArray();

        return values.Any()
            ? (int)Math.Round(values.Sum(i => i.Value) / (decimal)values.Length)
            : 0;
    }
}