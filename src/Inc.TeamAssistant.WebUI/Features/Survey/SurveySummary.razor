@inject IStringLocalizer<SurveyResources> Localizer

<DashboardGrid>
    <Toolbar>
        <RoomNavbarContainer RoomId="RoomId" />
    </Toolbar>
    <Content>
        <Loading Retry="Retry" State="State">
            <div class="survey-total-summary">
                <div class="survey-total-summary__content">
                    <div class="survey-total-summary__main">
                        <ApexChart
                            TItem="PersonAnswerDto"
                            Options="ApexChartBaseOptionsBuilder.BuildRadar<PersonAnswerDto>()"
                            @ref="_totalSummaryChart">
                            @foreach (var item in TotalSummary)
                            {
                                <ApexPointSeries TItem="PersonAnswerDto"
                                                 Items="item.Value"
                                                 SeriesType="SeriesType.Radar"
                                                 XValue="@(e => Localizer[e.QuestionKey].ToString())"
                                                 YValue="@(e => e.Value)" />
                            }
                        </ApexChart>
                        @foreach (var answerByQuestion in AnswerByQuestions)
                        {
                            var answerLookup = answerByQuestion.Answers
                                .GroupBy(a => a.Created, a => a.Value)
                                .ToDictionary(a => a.Key, a => a.ToArray());
                            var meanLookup = answerByQuestion.Answers
                                .GroupBy(a => a.Created)
                                .Select(g => new Tuple<DateTimeOffset, int>(g.Key, g.Sum(i => i.Value) / g.Count()))
                                .ToArray();
                            var lastAnswerDate = answerLookup.Keys.Max();
                            var lastMean = meanLookup.Single(m => m.Item1 == lastAnswerDate);
                            var lastAnswers = answerLookup[lastAnswerDate]
                                .GroupBy(a => a)
                                .Select(a => new Tuple<int, int>(a.Key, a.Count()))
                                .ToArray();
                            var answerComments = Answers
                                .Where(a => a.QuestionId == answerByQuestion.Id && !string.IsNullOrWhiteSpace(a.Comment))
                                .Select(a => a.Comment).ToArray();
                                           
                            <FormSection Title="@Localizer[answerByQuestion.Title]">
                                <HelpContent>
                                    @(new MarkupString(Localizer[answerByQuestion.Text]))
                                </HelpContent>
                                <ChildContent>
                                    <div class="survey-question">
                                        <div class="survey-question__stats">
                                            <div title="@Localizer["MeanAnswerHint"]" class="survey-question__mean">
                                                <span class="survey-question__answer @CssClass(lastMean.Item2)">
                                                    @lastMean.Item2
                                                </span>
                                            </div>
                                            <div title="@Localizer["AnswersTrendHint"]">
                                                <ApexChart
                                                    @key="answerByQuestion.Id"
                                                    TItem="Tuple<DateTimeOffset, int>"
                                                    Title="@Localizer["Trend"]"
                                                    Options="ApexChartBaseOptionsBuilder.CreateLineOptions<Tuple<DateTimeOffset, int>>()">
                                                    <ApexPointSeries TItem="Tuple<DateTimeOffset, int>"
                                                                     Items="meanLookup"
                                                                     SeriesType="SeriesType.Line"
                                                                     XValue="@(e => e.Item1)"
                                                                     YValue="@(e => e.Item2)"
                                                                     OrderBy="e => e.X"/>
                                                </ApexChart>
                                            </div>
                                            <div title="@Localizer["AnswersHint"]" class="survey-question__answers">
                                                @foreach (var answer in lastAnswers.OrderBy(a => a.Item1))
                                                {
                                                    <span
                                                        class="survey-question__answer @CssClass(answer.Item1)"
                                                        data-count="@answer.Item2">
                                                        @answer.Item1
                                                    </span>
                                                }
                                            </div>
                                        </div>
                                        <div class="survey-question__comments">
                                            @foreach (var answerComment in answerComments)
                                            {
                                                <p class="survey-question__comment">@answerComment</p>
                                            }
                                        </div>
                                    </div>
                                </ChildContent>
                            </FormSection>
                        }
                    </div>
                </div>
                <div class="survey-total-summary__panel">
                    <FormSection
                        Title="@Localizer["TotalSummaryControls"]"
                        HelpText="@Localizer["TotalSummaryControlsHelp"]"
                        AsRows="true">
                        <FormFieldSet
                            FieldId="hasParticipants"
                            Label="@Localizer["HasParticipants"]">
                            <InputCheckbox
                                id="hasParticipants"
                                Value="_hasParticipants"
                                ValueExpression="@(() => _hasParticipants)"
                                ValueChanged="@(v => ChangeTotalSummaryView(v, null))" />
                        </FormFieldSet>
                        <FormFieldSet
                            FieldId="hasMean"
                            Label="@Localizer["HasMean"]">
                            <InputCheckbox
                                id="hasMean"
                                Value="_hasMean"
                                ValueExpression="@(() => _hasMean)"
                                ValueChanged="@(v => ChangeTotalSummaryView(null, v))" />
                        </FormFieldSet>
                    </FormSection>
                </div>
            </div>
        </Loading>
    </Content>
</DashboardGrid>

@code {
    /// <summary>
    /// Room identifier.
    /// </summary>
    [Parameter, EditorRequired]
    public Guid RoomId { get; set; }
    
    /// <summary>
    /// Last answers
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyCollection<PersonAnswerDto> Answers { get; set; } = default!;
    
    /// <summary>
    /// Answer by questions
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyCollection<SurveyQuestionDto> AnswerByQuestions { get; set; } = default!;

    /// <summary>
    /// Component state.
    /// </summary>
    [Parameter, EditorRequired]
    public LoadingState State { get; set; } = default!;
    
    /// <summary>
    /// Action for retry.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Task> Retry { get; set; } = default!;

    private ApexChart<PersonAnswerDto>? _totalSummaryChart;
    private bool _hasParticipants = true;
    private bool _hasMean = true;
    
    private Dictionary<string, IReadOnlyCollection<PersonAnswerDto>> TotalSummary
    {
        get
        {
            var items = new Dictionary<string, IReadOnlyCollection<PersonAnswerDto>>();

            if (_hasParticipants)
                foreach (var answer in Answers.GroupBy(k => k.PersonId.ToString()))
                    items.Add(answer.Key, answer.OrderBy(a => a.QuestionKey).ToArray());
            
            if (_hasMean)
                items.Add(nameof(_hasMean), Answers
                    .GroupBy(k => new {k.QuestionId, k.QuestionKey})
                    .Select(a => new PersonAnswerDto(
                        a.Key.QuestionId,
                        a.Key.QuestionKey,
                        long.MaxValue,
                        a.Sum(v => v.Value) / a.Count(),
                        null))
                    .OrderBy(a => a.QuestionKey)
                    .ToArray());
            
            return items;
        }
    }

    private async Task ChangeTotalSummaryView(bool? hasParticipants, bool? hasMean)
    {
        if (hasParticipants.HasValue)
            _hasParticipants = hasParticipants.Value;
        
        if (hasMean.HasValue)
            _hasMean = hasMean.Value;

        if (!_hasParticipants && !_hasMean)
        {
            _hasParticipants = true;
            _hasMean = true;
        }

        if (_totalSummaryChart is not null)
            await _totalSummaryChart.RenderAsync();
    }

    private string CssClass(int value)
    {
        return value > 3 ? "survey-question__answer_positive" : "survey-question__answer_negative";
    }
}