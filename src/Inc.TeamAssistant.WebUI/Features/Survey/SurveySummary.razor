@inject IStringLocalizer<SurveyResources> Localizer

<DashboardGrid>
    <Toolbar>
        <RoomNavbarContainer RoomId="RoomId" />
        <div class="survey-summary__controls">
            <FormSection
                Title="@Localizer["TotalSummaryControls"]"
                HelpText="@Localizer["TotalSummaryControlsHelp"]"
                AsRows="true">
                <FormFieldSet
                    FieldId="hasParticipants"
                    Label="@Localizer["HasParticipants"]">
                    <InputCheckbox
                        id="hasParticipants"
                        Value="_hasParticipants"
                        ValueExpression="@(() => _hasParticipants)"
                        ValueChanged="@(v => ChangeTotalSummaryView(v, null))" />
                </FormFieldSet>
                <FormFieldSet
                    FieldId="hasMean"
                    Label="@Localizer["HasMean"]">
                    <InputCheckbox
                        id="hasMean"
                        Value="_hasMean"
                        ValueExpression="@(() => _hasMean)"
                        ValueChanged="@(v => ChangeTotalSummaryView(null, v))" />
                </FormFieldSet>
            </FormSection>
        </div>
    </Toolbar>
    <Content>
        <Loading Retry="Retry" State="State">
            <SurveySummaryContent
                HasParticipants="_hasParticipants"
                HasMean="_hasMean"
                Answers="Answers"
                @ref="_content" />
        </Loading>
    </Content>
</DashboardGrid>

@code {
    /// <summary>
    /// Room identifier.
    /// </summary>
    [Parameter, EditorRequired]
    public Guid RoomId { get; set; }
    
    /// <summary>
    /// Last answers.
    /// </summary>
    [Parameter, EditorRequired]
    public IReadOnlyCollection<SurveyQuestionDto> Answers { get; set; } = default!;

    /// <summary>
    /// Component state.
    /// </summary>
    [Parameter, EditorRequired]
    public LoadingState State { get; set; } = default!;
    
    /// <summary>
    /// Retry event.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback Retry { get; set; }

    private SurveySummaryContent? _content;
    private bool _hasParticipants = true;
    private bool _hasMean = true;

    private async Task ChangeTotalSummaryView(bool? hasParticipants, bool? hasMean)
    {
        if (hasParticipants.HasValue)
            _hasParticipants = hasParticipants.Value;
        
        if (hasMean.HasValue)
            _hasMean = hasMean.Value;

        if (!_hasParticipants && !_hasMean)
        {
            _hasParticipants = true;
            _hasMean = true;
        }

        if (_content is not null)
            await _content.Update();
    }
}