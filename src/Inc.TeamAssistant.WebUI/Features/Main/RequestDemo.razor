@using Inc.TeamAssistant.Primitives

@implements IDisposable

@inject PersistentComponentState ApplicationState
@inject LanguageManager LanguageManager

<div class="feedback__body">
    <div class="feedback-text">
        <h1 class="feedback-text__header">
            <span class="text-item">@_viewModel.Header</span><br/><span class="text-item">@_viewModel.SubHeader</span>
        </h1>
        <br/>
        <p class="feedback-text__description">
            <span class="text-item">üëå @_viewModel.ToolAppraiser<br/></span>
            <span class="text-item">ü§ù @_viewModel.ToolReviewer<br/></span>
            <span class="text-item">üí¨ @_viewModel.ToolRandomCoffee</span>
        </p>
        <br/>
        <a href="mailto:@(GlobalSettings.FeedbackTo)?body=@(_viewModel.RequestDemoBody)&subject=@(_viewModel.RequestDemoSubject)" class="button button_black">@_viewModel.RequestDemo</a>
    </div>
</div>

@code {
    private const string StateKey = nameof(RequestDemo);
    private PersistingComponentStateSubscription _persistingSubscription;
    
    private RequestDemoViewModel _viewModel = RequestDemoViewModel.Empty;

    protected override async Task OnInitializedAsync()
    {
        _persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        if (ApplicationState.TryTakeFromJson<RequestDemoViewModel>(StateKey, out var restored) && restored is not null)
            _viewModel = restored;
        else
            await Initialize();
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(StateKey, _viewModel);

        return Task.CompletedTask;
    }

    private async Task Initialize()
    {
        var resources = await LanguageManager.GetResource();
        var requestDemo = resources[Messages.GUI_RequestDemo];

        _viewModel = new RequestDemoViewModel(
            requestDemo,
            $"{requestDemo} [TeamAssistant]",
            resources[Messages.GUI_RequestDemoBody],
            resources[Messages.GUI_MainHeader],
            resources[Messages.GUI_MainSubHeader],
            resources[Messages.GUI_ToolAppraiser],
            resources[Messages.GUI_ToolReviewer],
            resources[Messages.GUI_ToolRandomCoffee]);
    }

    public void Dispose() => _persistingSubscription.Dispose();
}