@page "/en/map/{id:guid}"
@page "/ru/map/{id:guid}"

@using Inc.TeamAssistant.Appraiser.Model.Common
@using Inc.TeamAssistant.CheckIn.Model
@using Inc.TeamAssistant.CheckIn.Model.Queries.GetLocations
@using Inc.TeamAssistant.WebUI.Pages.Annotations
@using Inc.TeamAssistant.WebUI.Services.Render

@inject ICheckInService CheckInService
@inject ILocationBuilder LocationBuilder
@inject LanguageManager LanguageManager

@layout MapLayout

<PageTitle>@_annotation.PageTitle</PageTitle>

<div id="map" class="map"></div>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private MapAnnotation _annotation = MapAnnotation.Empty;

    private ServiceResult<GetLocationsResult?> _model = ServiceResult<GetLocationsResult?>.Empty;

    protected override async Task OnInitializedAsync()
    {
        var resources = await LanguageManager.GetResource();

        _annotation = new(
            resources[Messages.CheckIn_PageTitle],
            resources[Messages.CheckIn_DefaultLayerTitle]);
        _model = await CheckInService.GetLocations(Id);

        if (_model.State == ServiceResultState.Success)
            await Build(_model.Result!);

        await InvokeAsync(StateHasChanged);
    }

    private async Task Build(GetLocationsResult data)
    {
        if (data is null)
            throw new ArgumentNullException(nameof(data));

        var index = 0;
        foreach (var locations in data.OrderedLocations())
        {
            index++;
            await LocationBuilder.AddMarker(locations.Value.First(), data.HasHistory(locations.Value), index);
        }

        await LocationBuilder.AddLayer(_annotation.DefaultLayerTitle);

        foreach (var locations in data.OrderedLocations())
        {
            using var source = locations.Value.GetEnumerator();

            source.MoveNext();
            await LocationBuilder.AddMarker(source.Current, data.HasHistory(locations.Value));

            while (source.MoveNext())
                await LocationBuilder.AddMarker(source.Current, data.HasHistory(locations.Value), isActual: false);

            await LocationBuilder.AddRoute(locations.Key);
        }

        await LocationBuilder.Build();
    }
}