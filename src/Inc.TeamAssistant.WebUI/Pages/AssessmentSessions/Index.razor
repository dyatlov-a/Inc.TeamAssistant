@page "/en/assessment-session/{id:guid}"
@page "/ru/assessment-session/{id:guid}"

@using Inc.TeamAssistant.Appraiser.Model.Queries.GetStoryDetails
@using Inc.TeamAssistant.Appraiser.Model.Common
@using Inc.TeamAssistant.WebUI.Pages.Annotations
@using Inc.TeamAssistant.WebUI.Services.Render

@implements IAsyncDisposable

@inject IAppraiserService Service
@inject IEventsProvider EventsProvider
@inject LanguageManager LanguageManager

<PageTitle>@_annotation.TaskAssess</PageTitle>

<div class="assessment-session">
    <div class="assessment-session__container">
        <div class="assessment-session__body">
            <div class="assessment-session__card">
                <h1 class="assessment-session__title">@_annotation.TaskAssess</h1>
                @if (_model is { State: ServiceResultState.Success, Result: not null })
                {
                    <StoryDetails Item="_model.Result.Story" IsFullScreen="true"/>
                }
                else
                {
                    <p class="assessment-session__text">@StateMessage</p>
                }
            </div>
            <div class="phone phone_hidden-on-tablet">
                <div class="phone__screen">
                    <div class="phone__content">
                        <div class="qr-code">
                            @if (_model is { State: ServiceResultState.Success, Result: not null })
                            {
                                <div class="qr-code__content">
                                    @((MarkupString) _model.Result.CodeForConnect)
                                </div>
                                <span class="qr-code__text">@_annotation.Scan</span>
                                <span class="qr-code__text qr-code__text_sub">@_annotation.ToConnect</span>
                            }
                        </div>
                    </div>
                    <div class="phone__mockup"></div>
                </div>
            </div>
        </div>
        
        <History TeamId="Id" />
    </div>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private AssessmentSessionAnnotation _annotation = AssessmentSessionAnnotation.Empty;

    private MarkupString StateMessage => _model.State switch
    {
        ServiceResultState.NotFound => _annotation.AssessmentSessionNotFound,
        ServiceResultState.Failed => (MarkupString)_model.ErrorMessage,
        _ => _annotation.Loading
    };

    private ServiceResult<GetStoryDetailsResult?> _model = ServiceResult<GetStoryDetailsResult?>.Empty;

    protected override async Task OnInitializedAsync()
    {
        var resources = await LanguageManager.GetResource();

        _annotation = new(
            resources[Messages.GUI_TaskAssess],
            resources[Messages.GUI_CardNotSelected],
            resources[Messages.GUI_Scan],
            resources[Messages.GUI_ToConnect],
            resources[Messages.GUI_AssessmentSessionCard],
            resources[Messages.GUI_AssessmentSessionNotFound],
            resources[Messages.GUI_Loading]);
        
        await EventsProvider.OnStoryChanged(Id, StoryChanged);

        await StoryChanged();
    }

    private async Task StoryChanged()
    {
        _model = await Service.GetStoryDetails(Id);

        await InvokeAsync(StateHasChanged);
    }

    public ValueTask DisposeAsync() => EventsProvider.DisposeAsync();
}