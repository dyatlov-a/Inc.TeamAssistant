@attribute [Stories("Features/Dashboard/Widgets")]

@inject WidgetsDataFactory WidgetsDataFactory

<Stories TComponent="Dashboard" Layout="typeof(DarkLayout)">
    <Story Name="Without bots">
        <Template>
            <Dashboard
                BotId="null"
                State="LoadingState.Done()"
                Widgets="Array.Empty<Type>()"
                Retry="() => Task.CompletedTask"
                WidgetParametersFactory="CreateWidgetParameters">
                <Toolbar>
                    <DashboardTeamSelector
                        BotId="null"
                        TeamId="null"
                        State="LoadingState.Done()"
                        Bots="Array.Empty<BotDto>()"
                        Retry="() => Task.CompletedTask"
                        BotChanged="_ => { }"
                        TeamChanged="_ => { }" />
                </Toolbar>
            </Dashboard>
        </Template>
    </Story>
    <Story Name="With all widgets">
        <Template>
            <Dashboard
                BotId="BotId"
                State="LoadingState.Done()"
                Widgets="_allWidgets"
                Retry="() => Task.CompletedTask"
                WidgetParametersFactory="CreateWidgetParameters">
                <Toolbar>
                    <DashboardTeamSelector
                        BotId="BotId"
                        TeamId="TeamId"
                        State="LoadingState.Done()"
                        Bots="_bots"
                        Retry="() => Task.CompletedTask"
                        BotChanged="_ => { }"
                        TeamChanged="_ => { }"/>
                    <DashboardTeamConnector
                        Team="_team"
                        State="LoadingState.Done()"
                        Retry="() => Task.CompletedTask"/>
                </Toolbar>
            </Dashboard>
        </Template>
    </Story>
    <Story Name="With Reviewer widgets">
        <Template>
            <Dashboard
                BotId="BotId"
                State="LoadingState.Done()"
                Widgets="_reviewerWidgets"
                Retry="() => Task.CompletedTask"
                WidgetParametersFactory="CreateWidgetParameters">
                <Toolbar>
                    <DashboardTeamSelector
                        BotId="BotId"
                        TeamId="TeamId"
                        State="LoadingState.Done()"
                        Bots="_bots"
                        Retry="() => Task.CompletedTask"
                        BotChanged="_ => { }"
                        TeamChanged="_ => { }"/>
                    <DashboardTeamConnector
                        Team="_team"
                        State="LoadingState.Done()"
                        Retry="() => Task.CompletedTask"/>
                </Toolbar>
            </Dashboard>
        </Template>
    </Story>
    <Story Name="With Appraiser widgets">
        <Template>
            <Dashboard
                BotId="BotId"
                State="LoadingState.Done()"
                Widgets="_appraiserWidgets"
                Retry="() => Task.CompletedTask"
                WidgetParametersFactory="CreateWidgetParameters">
                <Toolbar>
                    <DashboardTeamSelector
                        BotId="BotId"
                        TeamId="TeamId"
                        State="LoadingState.Done()"
                        Bots="_bots"
                        Retry="() => Task.CompletedTask"
                        BotChanged="_ => { }"
                        TeamChanged="_ => { }"/>
                    <DashboardTeamConnector
                        Team="_team"
                        State="LoadingState.Done()"
                        Retry="() => Task.CompletedTask"/>
                </Toolbar>
            </Dashboard>
        </Template>
    </Story>
    <Story Name="With RandomCoffee widgets">
        <Template>
            <Dashboard
                BotId="BotId"
                State="LoadingState.Done()"
                Widgets="_randomCoffeeWidgets"
                Retry="() => Task.CompletedTask"
                WidgetParametersFactory="CreateWidgetParameters">
                <Toolbar>
                    <DashboardTeamSelector
                        BotId="BotId"
                        TeamId="TeamId"
                        State="LoadingState.Done()"
                        Bots="_bots"
                        Retry="() => Task.CompletedTask"
                        BotChanged="_ => { }"
                        TeamChanged="_ => { }"/>
                    <DashboardTeamConnector
                        Team="_team"
                        State="LoadingState.Done()"
                        Retry="() => Task.CompletedTask"/>
                </Toolbar>
            </Dashboard>
        </Template>
    </Story>
    <Story Name="With CheckIn widgets">
        <Template>
            <Dashboard
                BotId="BotId"
                State="LoadingState.Done()"
                Widgets="_mapWidgets"
                Retry="() => Task.CompletedTask"
                WidgetParametersFactory="CreateWidgetParameters">
                <Toolbar>
                    <DashboardTeamSelector
                        BotId="BotId"
                        TeamId="TeamId"
                        State="LoadingState.Done()"
                        Bots="_bots"
                        Retry="() => Task.CompletedTask"
                        BotChanged="_ => { }"
                        TeamChanged="_ => { }"/>
                    <DashboardTeamConnector
                        Team="_team"
                        State="LoadingState.Done()"
                        Retry="() => Task.CompletedTask"/>
                </Toolbar>
            </Dashboard>
        </Template>
    </Story>
    <Story Name="Loading">
        <Template>
            <Dashboard
                BotId="BotId"
                State="LoadingState.Loading()"
                Widgets="_allWidgets"
                Retry="() => Task.CompletedTask"
                WidgetParametersFactory="CreateWidgetParameters">
                <Toolbar>
                    <DashboardTeamSelector
                        BotId="BotId"
                        TeamId="TeamId"
                        State="LoadingState.Loading()"
                        Bots="_bots"
                        Retry="() => Task.CompletedTask"
                        BotChanged="_ => { }"
                        TeamChanged="_ => { }"/>
                    <DashboardTeamConnector
                        Team="_team"
                        State="LoadingState.Loading()"
                        Retry="() => Task.CompletedTask"/>
                </Toolbar>
            </Dashboard>
        </Template>
    </Story>
    <Story Name="Error">
        <Template>
            <Dashboard
                BotId="BotId"
                State="LoadingState.Error()"
                Widgets="_allWidgets"
                Retry="() => Task.CompletedTask"
                WidgetParametersFactory="CreateWidgetParameters">
                <Toolbar>
                    <DashboardTeamSelector
                        BotId="BotId"
                        TeamId="TeamId"
                        State="LoadingState.Error()"
                        Bots="_bots"
                        Retry="() => Task.CompletedTask"
                        BotChanged="_ => { }"
                        TeamChanged="_ => { }"/>
                    <DashboardTeamConnector
                        Team="_team"
                        State="LoadingState.Error()"
                        Retry="() => Task.CompletedTask"/>
                </Toolbar>
            </Dashboard>
        </Template>
    </Story>
</Stories>

@code {
    private static readonly Guid BotId = Guid.NewGuid();
    private static readonly Guid TeamId = Guid.NewGuid();

    private readonly IReadOnlyCollection<Type> _allWidgets =
    [
        typeof(TeammatesWidget),
        typeof(ReviewAverageStatsWidget),
        typeof(ReviewHistoryWidget),
        typeof(ReviewTotalStatsWidget),
        typeof(AppraiserHistoryWidget),
        typeof(AppraiserIntegrationWidget),
        typeof(RandomCoffeeHistoryWidget),
        typeof(MapWidget)
    ];

    private readonly IReadOnlyCollection<Type> _reviewerWidgets =
    [
        typeof(TeammatesWidget),
        typeof(ReviewAverageStatsWidget),
        typeof(ReviewHistoryWidget),
        typeof(ReviewTotalStatsWidget)
    ];

    private readonly IReadOnlyCollection<Type> _appraiserWidgets =
    [
        typeof(TeammatesWidget),
        typeof(AppraiserHistoryWidget),
        typeof(AppraiserIntegrationWidget)
    ];

    private readonly IReadOnlyCollection<Type> _randomCoffeeWidgets =
    [
        typeof(TeammatesWidget),
        typeof(RandomCoffeeHistoryWidget)
    ];

    private readonly IReadOnlyCollection<Type> _mapWidgets =
    [
        typeof(TeammatesWidget),
        typeof(MapWidget)
    ];

    private readonly IReadOnlyCollection<BotDto> _bots =
    [
        new(
            Id: BotId,
            Name: "Bot 1",
            OwnerId: 1,
            Teams:
            [
                new TeamDto(Id: TeamId, Name: "Team 1"),
                new TeamDto(Id: Guid.NewGuid(), Name: "Team 2")
            ]),
        new(
            Id: Guid.NewGuid(),
            Name: "Bot 2",
            OwnerId: 1,
            Teams:
            [
                new TeamDto(Id: Guid.NewGuid(), Name: "Team 3")
            ]),
        new(
            Id: Guid.NewGuid(),
            Name: "Bot 3",
            OwnerId: 1,
            Teams: [])
    ];

    private readonly GetTeamConnectorResult _team = new(
        TeamName: "Team 1",
        LinkForConnect: "#",
        Code: CodeForConnectFactory.CreateDark());

    private Dictionary<string, object?> CreateWidgetParameters(Type type) => WidgetsDataFactory.Create(type, TeamId);
}